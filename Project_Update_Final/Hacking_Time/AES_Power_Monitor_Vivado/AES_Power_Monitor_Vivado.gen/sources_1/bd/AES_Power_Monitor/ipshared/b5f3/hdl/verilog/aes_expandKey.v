// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_expandKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        expandedKey_address0,
        expandedKey_ce0,
        expandedKey_we0,
        expandedKey_d0,
        expandedKey_q0,
        expandedKey_address1,
        expandedKey_ce1,
        expandedKey_q1,
        key_array128_address0,
        key_array128_ce0,
        key_array128_q0,
        key,
        size,
        expandedKeySize
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] expandedKey_address0;
output   expandedKey_ce0;
output   expandedKey_we0;
output  [7:0] expandedKey_d0;
input  [7:0] expandedKey_q0;
output  [7:0] expandedKey_address1;
output   expandedKey_ce1;
input  [7:0] expandedKey_q1;
output  [10:0] key_array128_address0;
output   key_array128_ce0;
input  [7:0] key_array128_q0;
input  [10:0] key;
input  [5:0] size;
input  [7:0] expandedKeySize;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] expandedKey_address0;
reg expandedKey_ce0;
reg expandedKey_we0;
reg[7:0] expandedKey_d0;
reg expandedKey_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire   [0:0] cmp17_fu_70_p2;
reg   [0:0] cmp17_reg_93;
wire    grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_start;
wire    grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_done;
wire    grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_idle;
wire    grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_ready;
wire   [10:0] grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_key_array128_address0;
wire    grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_key_array128_ce0;
wire   [7:0] grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_expandedKey_address0;
wire    grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_expandedKey_ce0;
wire    grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_expandedKey_we0;
wire   [7:0] grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_expandedKey_d0;
wire    grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_start;
wire    grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_done;
wire    grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_idle;
wire    grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_ready;
wire   [7:0] grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_address0;
wire    grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_ce0;
wire    grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_we0;
wire   [7:0] grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_d0;
wire   [7:0] grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_address1;
wire    grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_ce1;
reg    grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_start_reg = 1'b0;
#0 grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_start_reg = 1'b0;
end

aes_expandKey_Pipeline_VITIS_LOOP_227_1 grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_start),
    .ap_done(grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_done),
    .ap_idle(grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_idle),
    .ap_ready(grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_ready),
    .size(size),
    .key(key),
    .key_array128_address0(grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_key_array128_address0),
    .key_array128_ce0(grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_key_array128_ce0),
    .key_array128_q0(key_array128_q0),
    .expandedKey_address0(grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_expandedKey_address0),
    .expandedKey_ce0(grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_expandedKey_ce0),
    .expandedKey_we0(grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_expandedKey_we0),
    .expandedKey_d0(grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_expandedKey_d0)
);

aes_expandKey_Pipeline_expandKeyLoop grp_expandKey_Pipeline_expandKeyLoop_fu_56(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_start),
    .ap_done(grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_done),
    .ap_idle(grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_idle),
    .ap_ready(grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_ready),
    .size_cast(size),
    .expandedKeySize(expandedKeySize),
    .expandedKey_address0(grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_address0),
    .expandedKey_ce0(grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_ce0),
    .expandedKey_we0(grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_we0),
    .expandedKey_d0(grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_d0),
    .expandedKey_q0(expandedKey_q0),
    .expandedKey_address1(grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_address1),
    .expandedKey_ce1(grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_ce1),
    .expandedKey_q1(expandedKey_q1),
    .cmp17(cmp17_reg_93)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_start_reg <= 1'b1;
        end else if ((grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_ready == 1'b1)) begin
            grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_ready == 1'b1)) begin
            grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cmp17_reg_93 <= cmp17_fu_70_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_address0 = grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_address0 = grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_expandedKey_address0;
    end else begin
        expandedKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_ce0 = grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_ce0 = grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_expandedKey_ce0;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_ce1 = grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_ce1;
    end else begin
        expandedKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_d0 = grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_d0 = grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_expandedKey_d0;
    end else begin
        expandedKey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_we0 = grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_we0 = grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_expandedKey_we0;
    end else begin
        expandedKey_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign cmp17_fu_70_p2 = ((size == 6'd32) ? 1'b1 : 1'b0);

assign expandedKey_address1 = grp_expandKey_Pipeline_expandKeyLoop_fu_56_expandedKey_address1;

assign grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_start = grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_ap_start_reg;

assign grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_start = grp_expandKey_Pipeline_expandKeyLoop_fu_56_ap_start_reg;

assign key_array128_address0 = grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_key_array128_address0;

assign key_array128_ce0 = grp_expandKey_Pipeline_VITIS_LOOP_227_1_fu_44_key_array128_ce0;

endmodule //aes_expandKey
