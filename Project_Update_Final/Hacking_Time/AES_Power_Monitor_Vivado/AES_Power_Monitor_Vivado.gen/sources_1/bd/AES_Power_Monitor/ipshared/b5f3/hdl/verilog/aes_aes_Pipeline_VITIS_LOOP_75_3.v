// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_aes_Pipeline_VITIS_LOOP_75_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_and_plaintext_TVALID,
        key_and_plaintext_TDATA,
        key_and_plaintext_TREADY,
        key_and_plaintext_TKEEP,
        key_and_plaintext_TSTRB,
        key_and_plaintext_TUSER,
        key_and_plaintext_TLAST,
        key_and_plaintext_TID,
        key_and_plaintext_TDEST,
        plaintext_array_address0,
        plaintext_array_ce0,
        plaintext_array_we0,
        plaintext_array_d0,
        tmp_keep_V_out,
        tmp_keep_V_out_ap_vld,
        tmp_strb_V_out,
        tmp_strb_V_out_ap_vld,
        tmp_user_V_out,
        tmp_user_V_out_ap_vld,
        p_4_0_0_0115_phi_out,
        p_4_0_0_0115_phi_out_ap_vld,
        tmp_id_V_out,
        tmp_id_V_out_ap_vld,
        tmp_dest_V_out,
        tmp_dest_V_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   key_and_plaintext_TVALID;
input  [7:0] key_and_plaintext_TDATA;
output   key_and_plaintext_TREADY;
input  [0:0] key_and_plaintext_TKEEP;
input  [0:0] key_and_plaintext_TSTRB;
input  [0:0] key_and_plaintext_TUSER;
input  [0:0] key_and_plaintext_TLAST;
input  [0:0] key_and_plaintext_TID;
input  [0:0] key_and_plaintext_TDEST;
output  [3:0] plaintext_array_address0;
output   plaintext_array_ce0;
output   plaintext_array_we0;
output  [7:0] plaintext_array_d0;
output  [0:0] tmp_keep_V_out;
output   tmp_keep_V_out_ap_vld;
output  [0:0] tmp_strb_V_out;
output   tmp_strb_V_out_ap_vld;
output  [0:0] tmp_user_V_out;
output   tmp_user_V_out_ap_vld;
output  [0:0] p_4_0_0_0115_phi_out;
output   p_4_0_0_0115_phi_out_ap_vld;
output  [0:0] tmp_id_V_out;
output   tmp_id_V_out_ap_vld;
output  [0:0] tmp_dest_V_out;
output   tmp_dest_V_out_ap_vld;

reg ap_idle;
reg key_and_plaintext_TREADY;
reg plaintext_array_ce0;
reg plaintext_array_we0;
reg tmp_keep_V_out_ap_vld;
reg tmp_strb_V_out_ap_vld;
reg tmp_user_V_out_ap_vld;
reg p_4_0_0_0115_phi_out_ap_vld;
reg tmp_id_V_out_ap_vld;
reg tmp_dest_V_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln75_fu_175_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    key_and_plaintext_TDATA_blk_n;
wire   [63:0] i_29_cast_fu_187_p1;
reg   [0:0] tmp_k_and_p_dest_V_fu_66;
reg   [0:0] tmp_k_and_p_id_V_fu_70;
reg   [0:0] tmp_k_and_p_last_V_fu_74;
reg   [0:0] tmp_k_and_p_user_V_fu_78;
reg   [0:0] tmp_k_and_p_strb_V_fu_82;
reg   [0:0] tmp_k_and_p_keep_V_fu_86;
reg   [4:0] i_29_fu_90;
wire   [4:0] add_ln75_fu_181_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_209;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

aes_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_209)) begin
        if ((icmp_ln75_fu_175_p2 == 1'd0)) begin
            i_29_fu_90 <= add_ln75_fu_181_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_29_fu_90 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (icmp_ln75_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_k_and_p_dest_V_fu_66 <= key_and_plaintext_TDEST;
        tmp_k_and_p_id_V_fu_70 <= key_and_plaintext_TID;
        tmp_k_and_p_keep_V_fu_86 <= key_and_plaintext_TKEEP;
        tmp_k_and_p_last_V_fu_74 <= key_and_plaintext_TLAST;
        tmp_k_and_p_strb_V_fu_82 <= key_and_plaintext_TSTRB;
        tmp_k_and_p_user_V_fu_78 <= key_and_plaintext_TUSER;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (icmp_ln75_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 5'd0;
    end else begin
        ap_sig_allocacmp_i = i_29_fu_90;
    end
end

always @ (*) begin
    if (((icmp_ln75_fu_175_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        key_and_plaintext_TDATA_blk_n = key_and_plaintext_TVALID;
    end else begin
        key_and_plaintext_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (icmp_ln75_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        key_and_plaintext_TREADY = 1'b1;
    end else begin
        key_and_plaintext_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (icmp_ln75_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_4_0_0_0115_phi_out_ap_vld = 1'b1;
    end else begin
        p_4_0_0_0115_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        plaintext_array_ce0 = 1'b1;
    end else begin
        plaintext_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (icmp_ln75_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        plaintext_array_we0 = 1'b1;
    end else begin
        plaintext_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (icmp_ln75_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_dest_V_out_ap_vld = 1'b1;
    end else begin
        tmp_dest_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (icmp_ln75_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_id_V_out_ap_vld = 1'b1;
    end else begin
        tmp_id_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (icmp_ln75_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_keep_V_out_ap_vld = 1'b1;
    end else begin
        tmp_keep_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (icmp_ln75_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_strb_V_out_ap_vld = 1'b1;
    end else begin
        tmp_strb_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (icmp_ln75_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_user_V_out_ap_vld = 1'b1;
    end else begin
        tmp_user_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln75_fu_181_p2 = (ap_sig_allocacmp_i + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0)));
end

always @ (*) begin
    ap_condition_209 = (~((ap_start_int == 1'b0) | ((icmp_ln75_fu_175_p2 == 1'd0) & (key_and_plaintext_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_29_cast_fu_187_p1 = ap_sig_allocacmp_i;

assign icmp_ln75_fu_175_p2 = ((ap_sig_allocacmp_i == 5'd16) ? 1'b1 : 1'b0);

assign p_4_0_0_0115_phi_out = tmp_k_and_p_last_V_fu_74;

assign plaintext_array_address0 = i_29_cast_fu_187_p1;

assign plaintext_array_d0 = key_and_plaintext_TDATA;

assign tmp_dest_V_out = tmp_k_and_p_dest_V_fu_66;

assign tmp_id_V_out = tmp_k_and_p_id_V_fu_70;

assign tmp_keep_V_out = tmp_k_and_p_keep_V_fu_86;

assign tmp_strb_V_out = tmp_k_and_p_strb_V_fu_82;

assign tmp_user_V_out = tmp_k_and_p_user_V_fu_78;

endmodule //aes_aes_Pipeline_VITIS_LOOP_75_3
