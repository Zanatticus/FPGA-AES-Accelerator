// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_aes_round_Pipeline_mixColumnsLoop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        grp_galois_multiplication_fu_349_p_din1,
        grp_galois_multiplication_fu_349_p_din2,
        grp_galois_multiplication_fu_349_p_dout0,
        grp_galois_multiplication_fu_349_p_ready,
        grp_galois_multiplication_fu_354_p_din1,
        grp_galois_multiplication_fu_354_p_din2,
        grp_galois_multiplication_fu_354_p_dout0,
        grp_galois_multiplication_fu_354_p_ready,
        grp_galois_multiplication_fu_359_p_din1,
        grp_galois_multiplication_fu_359_p_din2,
        grp_galois_multiplication_fu_359_p_dout0,
        grp_galois_multiplication_fu_359_p_ready
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [7:0] grp_galois_multiplication_fu_349_p_din1;
output  [3:0] grp_galois_multiplication_fu_349_p_din2;
input  [7:0] grp_galois_multiplication_fu_349_p_dout0;
input   grp_galois_multiplication_fu_349_p_ready;
output  [7:0] grp_galois_multiplication_fu_354_p_din1;
output  [3:0] grp_galois_multiplication_fu_354_p_din2;
input  [7:0] grp_galois_multiplication_fu_354_p_dout0;
input   grp_galois_multiplication_fu_354_p_ready;
output  [7:0] grp_galois_multiplication_fu_359_p_din1;
output  [3:0] grp_galois_multiplication_fu_359_p_din2;
input  [7:0] grp_galois_multiplication_fu_359_p_dout0;
input   grp_galois_multiplication_fu_359_p_ready;

reg ap_idle;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln337_fu_122_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
reg   [7:0] reg_110;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [2:0] i_2_reg_247;
reg   [3:0] state_addr_reg_255;
wire  signed [2:0] xor_ln343_fu_139_p2;
reg  signed [2:0] xor_ln343_reg_260;
reg   [3:0] state_addr_1_reg_265;
reg   [7:0] cpy_reg_270;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [7:0] cpy_1_reg_276;
reg   [3:0] state_addr_2_reg_283;
reg   [3:0] state_addr_3_reg_288;
reg   [7:0] cpy_2_reg_293;
reg   [7:0] cpy_3_reg_299;
reg   [7:0] tmp_reg_305;
reg   [7:0] tmp_5_reg_310;
reg   [7:0] tmp_1_reg_316;
wire   [7:0] xor_ln372_fu_186_p2;
reg   [7:0] xor_ln372_reg_321;
wire   [7:0] xor_ln367_fu_202_p2;
reg   [7:0] xor_ln367_reg_326;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
reg   [7:0] tmp_7_reg_331;
reg   [7:0] tmp_8_reg_336;
wire   [7:0] xor_ln377_fu_217_p2;
reg   [7:0] xor_ln377_reg_342;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
wire   [7:0] xor_ln382_fu_234_p2;
reg   [7:0] xor_ln382_reg_347;
reg   [7:0] grp_galois_multiplication_fu_85_a;
reg   [3:0] grp_galois_multiplication_fu_85_b;
reg   [7:0] grp_galois_multiplication_fu_92_a;
reg   [3:0] grp_galois_multiplication_fu_92_b;
reg   [7:0] grp_galois_multiplication_fu_99_a;
reg   [3:0] grp_galois_multiplication_fu_99_b;
wire   [63:0] zext_ln337_fu_134_p1;
wire   [63:0] zext_ln343_fu_145_p1;
wire   [63:0] zext_ln343_1_fu_162_p1;
wire   [63:0] zext_ln343_2_fu_170_p1;
reg   [2:0] i_fu_40;
wire   [2:0] add_ln337_fu_128_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_2;
wire   [3:0] zext_ln343_1_cast_fu_155_p3;
wire  signed [3:0] sext_ln343_fu_167_p1;
wire   [7:0] xor_ln372_1_fu_180_p2;
wire   [7:0] xor_ln372_2_fu_175_p2;
wire   [7:0] xor_ln367_1_fu_198_p2;
wire   [7:0] xor_ln367_2_fu_192_p2;
wire   [7:0] xor_ln377_2_fu_212_p2;
wire   [7:0] xor_ln377_1_fu_208_p2;
wire   [7:0] xor_ln382_2_fu_228_p2;
wire   [7:0] xor_ln382_1_fu_223_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_done_reg = 1'b0;
end

aes_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln337_fu_122_p2 == 1'd0)) begin
            i_fu_40 <= add_ln337_fu_128_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cpy_1_reg_276 <= state_q0;
        cpy_reg_270 <= state_q1;
        state_addr_2_reg_283[2 : 0] <= zext_ln343_1_fu_162_p1[2 : 0];
        state_addr_3_reg_288 <= zext_ln343_2_fu_170_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cpy_2_reg_293 <= state_q1;
        cpy_3_reg_299 <= state_q0;
        tmp_5_reg_310 <= grp_galois_multiplication_fu_359_p_dout0;
        tmp_reg_305 <= grp_galois_multiplication_fu_349_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_2_reg_247 <= ap_sig_allocacmp_i_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_110 <= grp_galois_multiplication_fu_354_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln337_fu_122_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_addr_1_reg_265[2 : 0] <= zext_ln343_fu_145_p1[2 : 0];
        state_addr_reg_255[2 : 0] <= zext_ln337_fu_134_p1[2 : 0];
        xor_ln343_reg_260 <= xor_ln343_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_1_reg_316 <= grp_galois_multiplication_fu_349_p_dout0;
        xor_ln372_reg_321 <= xor_ln372_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_7_reg_331 <= grp_galois_multiplication_fu_354_p_dout0;
        tmp_8_reg_336 <= grp_galois_multiplication_fu_359_p_dout0;
        xor_ln367_reg_326 <= xor_ln367_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        xor_ln377_reg_342 <= xor_ln377_fu_217_p2;
        xor_ln382_reg_347 <= xor_ln382_fu_234_p2;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln337_fu_122_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_40;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_galois_multiplication_fu_85_a = cpy_1_reg_276;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_galois_multiplication_fu_85_a = cpy_3_reg_299;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_galois_multiplication_fu_85_a = cpy_reg_270;
    end else begin
        grp_galois_multiplication_fu_85_a = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_galois_multiplication_fu_85_b = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_galois_multiplication_fu_85_b = 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_galois_multiplication_fu_85_b = 4'd2;
    end else begin
        grp_galois_multiplication_fu_85_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_galois_multiplication_fu_92_a = cpy_3_reg_299;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_galois_multiplication_fu_92_a = cpy_2_reg_293;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_galois_multiplication_fu_92_a = cpy_1_reg_276;
    end else begin
        grp_galois_multiplication_fu_92_a = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_galois_multiplication_fu_92_b = 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_galois_multiplication_fu_92_b = 4'd2;
    end else begin
        grp_galois_multiplication_fu_92_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_galois_multiplication_fu_99_a = cpy_1_reg_276;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_galois_multiplication_fu_99_a = cpy_2_reg_293;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_galois_multiplication_fu_99_a = cpy_reg_270;
    end else begin
        grp_galois_multiplication_fu_99_a = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_galois_multiplication_fu_99_b = 4'd3;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_galois_multiplication_fu_99_b = 4'd1;
    end else begin
        grp_galois_multiplication_fu_99_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = state_addr_3_reg_288;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = state_addr_1_reg_265;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = zext_ln343_2_fu_170_p1;
    end else if (((icmp_ln337_fu_122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        state_address0 = zext_ln343_fu_145_p1;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = state_addr_2_reg_283;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = state_addr_reg_255;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = zext_ln343_1_fu_162_p1;
    end else if (((icmp_ln337_fu_122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        state_address1 = zext_ln337_fu_134_p1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln337_fu_122_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln337_fu_122_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_d0 = xor_ln382_reg_347;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_d0 = xor_ln372_reg_321;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_d1 = xor_ln377_reg_342;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_d1 = xor_ln367_reg_326;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln337_fu_122_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln337_fu_128_p2 = (ap_sig_allocacmp_i_2 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_galois_multiplication_fu_349_p_din1 = grp_galois_multiplication_fu_85_a;

assign grp_galois_multiplication_fu_349_p_din2 = grp_galois_multiplication_fu_85_b;

assign grp_galois_multiplication_fu_354_p_din1 = grp_galois_multiplication_fu_92_a;

assign grp_galois_multiplication_fu_354_p_din2 = grp_galois_multiplication_fu_92_b;

assign grp_galois_multiplication_fu_359_p_din1 = grp_galois_multiplication_fu_99_a;

assign grp_galois_multiplication_fu_359_p_din2 = grp_galois_multiplication_fu_99_b;

assign icmp_ln337_fu_122_p2 = ((ap_sig_allocacmp_i_2 == 3'd4) ? 1'b1 : 1'b0);

assign sext_ln343_fu_167_p1 = xor_ln343_reg_260;

assign xor_ln343_fu_139_p2 = (ap_sig_allocacmp_i_2 ^ 3'd4);

assign xor_ln367_1_fu_198_p2 = (tmp_reg_305 ^ tmp_1_reg_316);

assign xor_ln367_2_fu_192_p2 = (reg_110 ^ grp_galois_multiplication_fu_349_p_dout0);

assign xor_ln367_fu_202_p2 = (xor_ln367_2_fu_192_p2 ^ xor_ln367_1_fu_198_p2);

assign xor_ln372_1_fu_180_p2 = (reg_110 ^ grp_galois_multiplication_fu_349_p_dout0);

assign xor_ln372_2_fu_175_p2 = (tmp_5_reg_310 ^ grp_galois_multiplication_fu_359_p_dout0);

assign xor_ln372_fu_186_p2 = (xor_ln372_2_fu_175_p2 ^ xor_ln372_1_fu_180_p2);

assign xor_ln377_1_fu_208_p2 = (tmp_7_reg_331 ^ tmp_5_reg_310);

assign xor_ln377_2_fu_212_p2 = (tmp_8_reg_336 ^ grp_galois_multiplication_fu_349_p_dout0);

assign xor_ln377_fu_217_p2 = (xor_ln377_2_fu_212_p2 ^ xor_ln377_1_fu_208_p2);

assign xor_ln382_1_fu_223_p2 = (tmp_8_reg_336 ^ reg_110);

assign xor_ln382_2_fu_228_p2 = (grp_galois_multiplication_fu_359_p_dout0 ^ grp_galois_multiplication_fu_354_p_dout0);

assign xor_ln382_fu_234_p2 = (xor_ln382_2_fu_228_p2 ^ xor_ln382_1_fu_223_p2);

assign zext_ln337_fu_134_p1 = ap_sig_allocacmp_i_2;

assign zext_ln343_1_cast_fu_155_p3 = {{1'd1}, {i_2_reg_247}};

assign zext_ln343_1_fu_162_p1 = zext_ln343_1_cast_fu_155_p3;

assign zext_ln343_2_fu_170_p1 = $unsigned(sext_ln343_fu_167_p1);

assign zext_ln343_fu_145_p1 = $unsigned(xor_ln343_fu_139_p2);

always @ (posedge ap_clk) begin
    state_addr_reg_255[3] <= 1'b0;
    state_addr_1_reg_265[3] <= 1'b0;
    state_addr_2_reg_283[3] <= 1'b1;
end

endmodule //aes_aes_round_Pipeline_mixColumnsLoop
