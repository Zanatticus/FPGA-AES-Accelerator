// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_expandKey_Pipeline_expandKeyLoop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        size_cast,
        expandedKeySize,
        expandedKey_address0,
        expandedKey_ce0,
        expandedKey_we0,
        expandedKey_d0,
        expandedKey_q0,
        expandedKey_address1,
        expandedKey_ce1,
        expandedKey_q1,
        cmp17
);

parameter    ap_ST_fsm_pp0_stage0 = 15'd1;
parameter    ap_ST_fsm_pp0_stage1 = 15'd2;
parameter    ap_ST_fsm_pp0_stage2 = 15'd4;
parameter    ap_ST_fsm_pp0_stage3 = 15'd8;
parameter    ap_ST_fsm_pp0_stage4 = 15'd16;
parameter    ap_ST_fsm_pp0_stage5 = 15'd32;
parameter    ap_ST_fsm_pp0_stage6 = 15'd64;
parameter    ap_ST_fsm_pp0_stage7 = 15'd128;
parameter    ap_ST_fsm_pp0_stage8 = 15'd256;
parameter    ap_ST_fsm_pp0_stage9 = 15'd512;
parameter    ap_ST_fsm_pp0_stage10 = 15'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 15'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 15'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 15'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] size_cast;
input  [7:0] expandedKeySize;
output  [7:0] expandedKey_address0;
output   expandedKey_ce0;
output   expandedKey_we0;
output  [7:0] expandedKey_d0;
input  [7:0] expandedKey_q0;
output  [7:0] expandedKey_address1;
output   expandedKey_ce1;
input  [7:0] expandedKey_q1;
input  [0:0] cmp17;

reg ap_idle;
reg[7:0] expandedKey_address0;
reg expandedKey_ce0;
reg expandedKey_we0;
reg[7:0] expandedKey_d0;
reg[7:0] expandedKey_address1;
reg expandedKey_ce1;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_state25_pp0_stage9_iter1;
wire    ap_block_pp0_stage9_subdone;
reg   [0:0] icmp_ln233_reg_637;
reg    ap_condition_exit_pp0_iter0_stage9;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_subdone;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
wire   [7:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
reg   [7:0] reg_267;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state16_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state19_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg   [0:0] and_ln251_reg_743;
reg   [7:0] reg_271;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state17_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln245_reg_703;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state20_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire   [7:0] size_cast_cast_fu_275_p1;
reg   [7:0] size_cast_cast_reg_613;
reg   [7:0] currentSize_1_reg_622;
reg   [7:0] currentSize_1_reg_622_pp0_iter1_reg;
wire   [0:0] icmp_ln233_fu_292_p2;
reg   [31:0] rconIteration_1_load_reg_641;
reg   [7:0] Rcon_load_reg_652;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state18_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
reg   [7:0] expandedKey_load_1_reg_667;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
reg   [7:0] expandedKey_load_2_reg_673;
reg   [7:0] expandedKey_load_3_reg_693;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
wire   [0:0] icmp_ln245_fu_383_p2;
wire   [7:0] select_ln245_3_fu_399_p3;
reg   [7:0] select_ln245_3_reg_716;
reg   [7:0] expandedKey_load_reg_722;
reg   [7:0] expandedKey_load_7_reg_727;
wire   [7:0] select_ln245_2_fu_429_p3;
reg   [7:0] select_ln245_2_reg_738;
wire    ap_block_pp0_stage14_11001;
wire   [0:0] and_ln251_fu_441_p2;
wire   [7:0] xor_ln263_fu_458_p2;
reg   [7:0] xor_ln263_reg_755;
wire   [7:0] add_ln264_fu_475_p2;
reg   [7:0] add_ln264_reg_770;
wire   [7:0] select_ln245_fu_490_p3;
reg   [7:0] select_ln245_reg_780;
wire   [7:0] select_ln245_1_fu_496_p3;
reg   [7:0] select_ln245_1_reg_786;
wire   [7:0] xor_ln263_1_fu_513_p2;
reg   [7:0] xor_ln263_1_reg_796;
wire   [7:0] add_ln264_1_fu_527_p2;
reg   [7:0] add_ln264_1_reg_806;
wire   [7:0] xor_ln263_2_fu_548_p2;
reg   [7:0] xor_ln263_2_reg_816;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state21_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
wire   [7:0] add_ln264_2_fu_558_p2;
reg   [7:0] add_ln264_2_reg_821;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state23_pp0_stage7_iter1;
wire    ap_block_pp0_stage7_11001;
wire   [7:0] xor_ln263_3_fu_579_p2;
reg   [7:0] xor_ln263_3_reg_831;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state24_pp0_stage8_iter1;
wire    ap_block_pp0_stage8_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln189_fu_309_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln239_fu_330_p1;
wire    ap_block_pp0_stage10;
wire   [63:0] zext_ln239_1_fu_340_p1;
wire   [63:0] zext_ln239_2_fu_350_p1;
wire    ap_block_pp0_stage11;
wire   [63:0] zext_ln135_fu_355_p1;
wire   [63:0] zext_ln263_fu_364_p1;
wire   [63:0] zext_ln239_3_fu_374_p1;
wire    ap_block_pp0_stage12;
wire   [63:0] zext_ln135_1_fu_389_p1;
wire   [63:0] zext_ln135_4_fu_417_p1;
wire    ap_block_pp0_stage13;
wire   [63:0] zext_ln135_5_fu_446_p1;
wire    ap_block_pp0_stage14;
wire   [63:0] zext_ln135_2_fu_467_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln222_fu_463_p1;
wire   [63:0] zext_ln135_3_fu_471_p1;
wire   [63:0] zext_ln263_2_fu_485_p1;
wire   [63:0] zext_ln135_6_fu_502_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln135_7_fu_519_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln263_1_fu_523_p1;
wire   [63:0] zext_ln263_4_fu_537_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln263_3_fu_554_p1;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln263_6_fu_568_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln263_5_fu_585_p1;
wire    ap_block_pp0_stage9;
reg   [31:0] rconIteration_1_fu_54;
wire   [31:0] rconIteration_fu_411_p3;
wire    ap_loop_init;
reg   [7:0] currentSize_fu_58;
wire   [7:0] add_ln264_3_fu_314_p2;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state22_pp0_stage6_iter1;
wire    ap_block_pp0_stage6_11001;
wire    ap_block_pp0_stage9_11001;
wire   [5:0] grp_fu_300_p1;
wire   [7:0] trunc_ln206_fu_305_p1;
wire   [7:0] add_ln239_fu_325_p2;
wire   [7:0] add_ln239_1_fu_335_p2;
wire   [7:0] add_ln239_2_fu_345_p2;
wire   [7:0] sub_ln263_fu_360_p2;
wire   [7:0] add_ln239_3_fu_369_p2;
wire   [4:0] grp_fu_300_p2;
wire   [4:0] trunc_ln245_1_fu_379_p1;
wire   [7:0] xor_ln206_fu_394_p2;
wire   [31:0] rconIteration_2_fu_406_p2;
wire   [4:0] trunc_ln245_fu_426_p1;
wire   [0:0] icmp_ln251_fu_435_p2;
wire   [7:0] select_ln251_3_fu_451_p3;
wire   [7:0] sub_ln263_1_fu_480_p2;
wire   [7:0] select_ln251_2_fu_507_p3;
wire   [7:0] sub_ln263_2_fu_532_p2;
wire    ap_block_pp0_stage5;
wire   [7:0] select_ln251_1_fu_542_p3;
wire   [7:0] sub_ln263_3_fu_563_p2;
wire    ap_block_pp0_stage8;
wire   [7:0] select_ln251_fu_573_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [14:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

aes_expandKey_Pipeline_expandKeyLoop_sbox_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0)
);

aes_expandKey_Pipeline_expandKeyLoop_Rcon_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 255 ),
    .AddressWidth( 8 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

aes_urem_8ns_6ns_5_12_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 5 ))
urem_8ns_6ns_5_12_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(currentSize_fu_58),
    .din1(grp_fu_300_p1),
    .ce(1'b1),
    .dout(grp_fu_300_p2)
);

aes_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage9),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage9)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage14_subdone) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        currentSize_fu_58 <= size_cast_cast_fu_275_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_fu_292_p2 == 1'd1))) begin
        currentSize_fu_58 <= add_ln264_3_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rconIteration_1_fu_54 <= 32'd1;
    end else if (((icmp_ln233_reg_637 == 1'd1) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        rconIteration_1_fu_54 <= rconIteration_fu_411_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_reg_637 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        Rcon_load_reg_652 <= Rcon_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln264_1_reg_806 <= add_ln264_1_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_ln264_2_reg_821 <= add_ln264_2_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln264_reg_770 <= add_ln264_fu_475_p2;
        currentSize_1_reg_622 <= currentSize_fu_58;
        currentSize_1_reg_622_pp0_iter1_reg <= currentSize_1_reg_622;
        icmp_ln233_reg_637 <= icmp_ln233_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_reg_637 == 1'd1) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        and_ln251_reg_743 <= and_ln251_fu_441_p2;
        select_ln245_2_reg_738 <= select_ln245_2_fu_429_p3;
        xor_ln263_reg_755 <= xor_ln263_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_reg_637 == 1'd1) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        expandedKey_load_1_reg_667 <= expandedKey_q1;
        expandedKey_load_2_reg_673 <= expandedKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_reg_637 == 1'd1) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        expandedKey_load_3_reg_693 <= expandedKey_q0;
        expandedKey_load_reg_722 <= expandedKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_reg_637 == 1'd1) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        expandedKey_load_7_reg_727 <= expandedKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_reg_637 == 1'd1) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        icmp_ln245_reg_703 <= icmp_ln245_fu_383_p2;
        select_ln245_3_reg_716 <= select_ln245_3_fu_399_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_fu_292_p2 == 1'd1))) begin
        rconIteration_1_load_reg_641 <= rconIteration_1_fu_54;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln251_reg_743)) | ((icmp_ln233_reg_637 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln233_reg_637 == 1'd1) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)))) begin
        reg_267 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'd1 == and_ln251_reg_743)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln245_reg_703 == 1'd1)))) begin
        reg_271 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        select_ln245_1_reg_786 <= select_ln245_1_fu_496_p3;
        select_ln245_reg_780 <= select_ln245_fu_490_p3;
        xor_ln263_1_reg_796 <= xor_ln263_1_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        size_cast_cast_reg_613[5 : 0] <= size_cast_cast_fu_275_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        xor_ln263_2_reg_816 <= xor_ln263_2_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        xor_ln263_3_reg_831 <= xor_ln263_3_fu_579_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln233_reg_637 == 1'd0) & (1'b0 == ap_block_pp0_stage9_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        ap_condition_exit_pp0_iter0_stage9 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage14_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        expandedKey_address0 = zext_ln263_5_fu_585_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        expandedKey_address0 = zext_ln263_6_fu_568_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        expandedKey_address0 = zext_ln263_3_fu_554_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        expandedKey_address0 = zext_ln263_4_fu_537_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        expandedKey_address0 = zext_ln263_1_fu_523_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        expandedKey_address0 = zext_ln263_2_fu_485_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        expandedKey_address0 = zext_ln222_fu_463_p1;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        expandedKey_address0 = zext_ln239_2_fu_350_p1;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        expandedKey_address0 = zext_ln239_1_fu_340_p1;
    end else begin
        expandedKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
            expandedKey_address1 = zext_ln239_3_fu_374_p1;
        end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            expandedKey_address1 = zext_ln263_fu_364_p1;
        end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            expandedKey_address1 = zext_ln239_fu_330_p1;
        end else begin
            expandedKey_address1 = 'bx;
        end
    end else begin
        expandedKey_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        expandedKey_ce0 = 1'b1;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)))) begin
        expandedKey_ce1 = 1'b1;
    end else begin
        expandedKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            expandedKey_d0 = xor_ln263_3_reg_831;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            expandedKey_d0 = xor_ln263_2_reg_816;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            expandedKey_d0 = xor_ln263_1_reg_796;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            expandedKey_d0 = xor_ln263_reg_755;
        end else begin
            expandedKey_d0 = 'bx;
        end
    end else begin
        expandedKey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln233_reg_637 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        expandedKey_we0 = 1'b1;
    end else begin
        expandedKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        sbox_address0 = zext_ln135_7_fu_519_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sbox_address0 = zext_ln135_6_fu_502_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sbox_address0 = zext_ln135_3_fu_471_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_address0 = zext_ln135_2_fu_467_p1;
    end else if (((1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        sbox_address0 = zext_ln135_5_fu_446_p1;
    end else if (((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        sbox_address0 = zext_ln135_4_fu_417_p1;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        sbox_address0 = zext_ln135_1_fu_389_p1;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        sbox_address0 = zext_ln135_fu_355_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage9)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon_address0 = zext_ln189_fu_309_p1;

assign add_ln239_1_fu_335_p2 = ($signed(currentSize_1_reg_622) + $signed(8'd253));

assign add_ln239_2_fu_345_p2 = ($signed(currentSize_1_reg_622) + $signed(8'd254));

assign add_ln239_3_fu_369_p2 = ($signed(currentSize_1_reg_622) + $signed(8'd255));

assign add_ln239_fu_325_p2 = ($signed(currentSize_1_reg_622) + $signed(8'd252));

assign add_ln264_1_fu_527_p2 = (currentSize_1_reg_622_pp0_iter1_reg + 8'd2);

assign add_ln264_2_fu_558_p2 = (currentSize_1_reg_622_pp0_iter1_reg + 8'd3);

assign add_ln264_3_fu_314_p2 = (currentSize_fu_58 + 8'd4);

assign add_ln264_fu_475_p2 = (currentSize_1_reg_622 + 8'd1);

assign and_ln251_fu_441_p2 = (icmp_ln251_fu_435_p2 & cmp17);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage9;

assign grp_fu_300_p1 = size_cast_cast_reg_613;

assign icmp_ln233_fu_292_p2 = ((currentSize_fu_58 < expandedKeySize) ? 1'b1 : 1'b0);

assign icmp_ln245_fu_383_p2 = ((trunc_ln245_1_fu_379_p1 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln251_fu_435_p2 = ((trunc_ln245_fu_426_p1 == 5'd16) ? 1'b1 : 1'b0);

assign rconIteration_2_fu_406_p2 = (rconIteration_1_load_reg_641 + 32'd1);

assign rconIteration_fu_411_p3 = ((icmp_ln245_reg_703[0:0] == 1'b1) ? rconIteration_2_fu_406_p2 : rconIteration_1_load_reg_641);

assign select_ln245_1_fu_496_p3 = ((icmp_ln245_reg_703[0:0] == 1'b1) ? reg_271 : expandedKey_load_3_reg_693);

assign select_ln245_2_fu_429_p3 = ((icmp_ln245_reg_703[0:0] == 1'b1) ? reg_267 : expandedKey_load_2_reg_673);

assign select_ln245_3_fu_399_p3 = ((icmp_ln245_fu_383_p2[0:0] == 1'b1) ? xor_ln206_fu_394_p2 : expandedKey_load_1_reg_667);

assign select_ln245_fu_490_p3 = ((icmp_ln245_reg_703[0:0] == 1'b1) ? sbox_q0 : expandedKey_load_7_reg_727);

assign select_ln251_1_fu_542_p3 = ((and_ln251_reg_743[0:0] == 1'b1) ? reg_267 : select_ln245_1_reg_786);

assign select_ln251_2_fu_507_p3 = ((and_ln251_reg_743[0:0] == 1'b1) ? reg_267 : select_ln245_2_reg_738);

assign select_ln251_3_fu_451_p3 = ((and_ln251_fu_441_p2[0:0] == 1'b1) ? sbox_q0 : select_ln245_3_reg_716);

assign select_ln251_fu_573_p3 = ((and_ln251_reg_743[0:0] == 1'b1) ? reg_271 : select_ln245_reg_780);

assign size_cast_cast_fu_275_p1 = size_cast;

assign sub_ln263_1_fu_480_p2 = (add_ln264_fu_475_p2 - size_cast_cast_reg_613);

assign sub_ln263_2_fu_532_p2 = (add_ln264_1_fu_527_p2 - size_cast_cast_reg_613);

assign sub_ln263_3_fu_563_p2 = (add_ln264_2_fu_558_p2 - size_cast_cast_reg_613);

assign sub_ln263_fu_360_p2 = (currentSize_1_reg_622 - size_cast_cast_reg_613);

assign trunc_ln206_fu_305_p1 = rconIteration_1_fu_54[7:0];

assign trunc_ln245_1_fu_379_p1 = grp_fu_300_p2[4:0];

assign trunc_ln245_fu_426_p1 = currentSize_1_reg_622[4:0];

assign xor_ln206_fu_394_p2 = (sbox_q0 ^ Rcon_load_reg_652);

assign xor_ln263_1_fu_513_p2 = (select_ln251_2_fu_507_p3 ^ expandedKey_q0);

assign xor_ln263_2_fu_548_p2 = (select_ln251_1_fu_542_p3 ^ expandedKey_q0);

assign xor_ln263_3_fu_579_p2 = (select_ln251_fu_573_p3 ^ expandedKey_q0);

assign xor_ln263_fu_458_p2 = (select_ln251_3_fu_451_p3 ^ expandedKey_load_reg_722);

assign zext_ln135_1_fu_389_p1 = expandedKey_q0;

assign zext_ln135_2_fu_467_p1 = expandedKey_load_7_reg_727;

assign zext_ln135_3_fu_471_p1 = expandedKey_load_1_reg_667;

assign zext_ln135_4_fu_417_p1 = select_ln245_3_reg_716;

assign zext_ln135_5_fu_446_p1 = select_ln245_2_fu_429_p3;

assign zext_ln135_6_fu_502_p1 = select_ln245_1_fu_496_p3;

assign zext_ln135_7_fu_519_p1 = select_ln245_reg_780;

assign zext_ln135_fu_355_p1 = expandedKey_q0;

assign zext_ln189_fu_309_p1 = trunc_ln206_fu_305_p1;

assign zext_ln222_fu_463_p1 = currentSize_1_reg_622;

assign zext_ln239_1_fu_340_p1 = add_ln239_1_fu_335_p2;

assign zext_ln239_2_fu_350_p1 = add_ln239_2_fu_345_p2;

assign zext_ln239_3_fu_374_p1 = add_ln239_3_fu_369_p2;

assign zext_ln239_fu_330_p1 = add_ln239_fu_325_p2;

assign zext_ln263_1_fu_523_p1 = add_ln264_reg_770;

assign zext_ln263_2_fu_485_p1 = sub_ln263_1_fu_480_p2;

assign zext_ln263_3_fu_554_p1 = add_ln264_1_reg_806;

assign zext_ln263_4_fu_537_p1 = sub_ln263_2_fu_532_p2;

assign zext_ln263_5_fu_585_p1 = add_ln264_2_reg_821;

assign zext_ln263_6_fu_568_p1 = sub_ln263_3_fu_563_p2;

assign zext_ln263_fu_364_p1 = sub_ln263_fu_360_p2;

always @ (posedge ap_clk) begin
    size_cast_cast_reg_613[7:6] <= 2'b00;
end

endmodule //aes_expandKey_Pipeline_expandKeyLoop
