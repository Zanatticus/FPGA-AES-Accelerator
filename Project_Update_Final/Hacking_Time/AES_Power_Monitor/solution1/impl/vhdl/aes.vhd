-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    key_and_plaintext_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    key_and_plaintext_TVALID : IN STD_LOGIC;
    key_and_plaintext_TREADY : OUT STD_LOGIC;
    key_and_plaintext_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    key_and_plaintext_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    key_and_plaintext_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    key_and_plaintext_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    key_and_plaintext_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    key_and_plaintext_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    ciphertext_and_decryptedtext_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_and_decryptedtext_TVALID : OUT STD_LOGIC;
    ciphertext_and_decryptedtext_TREADY : IN STD_LOGIC;
    ciphertext_and_decryptedtext_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    ciphertext_and_decryptedtext_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    ciphertext_and_decryptedtext_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    ciphertext_and_decryptedtext_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ciphertext_and_decryptedtext_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    ciphertext_and_decryptedtext_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of aes is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes_aes,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.084000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=1919,HLS_SYN_LUT=8006,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv11_200 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal mode : STD_LOGIC_VECTOR (31 downto 0);
    signal enable_in : STD_LOGIC_VECTOR (7 downto 0);
    signal enable_out : STD_LOGIC_VECTOR (7 downto 0);
    signal power_reading_in : STD_LOGIC_VECTOR (31 downto 0);
    signal power_reading_out : STD_LOGIC_VECTOR (31 downto 0);
    signal p_4_0_0_0115_phi_loc_load_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal expandedKeySize_fu_470_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKeySize_reg_550 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipherkey_size_reg_225 : STD_LOGIC_VECTOR (5 downto 0);
    signal expandedKeySize_1_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKeySize_1_reg_555 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal key_array128_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal key_array128_ce0 : STD_LOGIC;
    signal key_array128_we0 : STD_LOGIC;
    signal key_array128_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_array128_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_ce0 : STD_LOGIC;
    signal expandedKey_we0 : STD_LOGIC;
    signal expandedKey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_ce1 : STD_LOGIC;
    signal expandedKey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_ce0 : STD_LOGIC;
    signal block_we0 : STD_LOGIC;
    signal block_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_ce1 : STD_LOGIC;
    signal block_we1 : STD_LOGIC;
    signal block_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_1_ce0 : STD_LOGIC;
    signal expandedKey_1_we0 : STD_LOGIC;
    signal expandedKey_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_1_ce1 : STD_LOGIC;
    signal expandedKey_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_1_ce0 : STD_LOGIC;
    signal block_1_we0 : STD_LOGIC;
    signal block_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_1_ce1 : STD_LOGIC;
    signal block_1_we1 : STD_LOGIC;
    signal block_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal plaintext_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal plaintext_array_ce0 : STD_LOGIC;
    signal plaintext_array_we0 : STD_LOGIC;
    signal plaintext_array_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ciphertext_array_ce0 : STD_LOGIC;
    signal ciphertext_array_we0 : STD_LOGIC;
    signal ciphertext_array_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal decryptedtext_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal decryptedtext_array_ce0 : STD_LOGIC;
    signal decryptedtext_array_we0 : STD_LOGIC;
    signal decryptedtext_array_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_Pipeline_1_fu_273_ap_start : STD_LOGIC;
    signal grp_aes_Pipeline_1_fu_273_ap_done : STD_LOGIC;
    signal grp_aes_Pipeline_1_fu_273_ap_idle : STD_LOGIC;
    signal grp_aes_Pipeline_1_fu_273_ap_ready : STD_LOGIC;
    signal grp_aes_Pipeline_1_fu_273_key_array128_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_aes_Pipeline_1_fu_273_key_array128_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_1_fu_273_key_array128_we0 : STD_LOGIC;
    signal grp_aes_Pipeline_1_fu_273_key_array128_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_Pipeline_2_fu_279_ap_start : STD_LOGIC;
    signal grp_aes_Pipeline_2_fu_279_ap_done : STD_LOGIC;
    signal grp_aes_Pipeline_2_fu_279_ap_idle : STD_LOGIC;
    signal grp_aes_Pipeline_2_fu_279_ap_ready : STD_LOGIC;
    signal grp_aes_Pipeline_2_fu_279_key_array128_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_aes_Pipeline_2_fu_279_key_array128_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_2_fu_279_key_array128_we0 : STD_LOGIC;
    signal grp_aes_Pipeline_2_fu_279_key_array128_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_Pipeline_3_fu_284_ap_start : STD_LOGIC;
    signal grp_aes_Pipeline_3_fu_284_ap_done : STD_LOGIC;
    signal grp_aes_Pipeline_3_fu_284_ap_idle : STD_LOGIC;
    signal grp_aes_Pipeline_3_fu_284_ap_ready : STD_LOGIC;
    signal grp_aes_Pipeline_3_fu_284_key_array128_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_aes_Pipeline_3_fu_284_key_array128_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_3_fu_284_key_array128_we0 : STD_LOGIC;
    signal grp_aes_Pipeline_3_fu_284_key_array128_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_start : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_done : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_idle : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_ready : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_and_plaintext_TREADY : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_we0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_start : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_done : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_idle : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_ready : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_key_and_plaintext_TREADY : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_we0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_keep_V_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_keep_V_out_ap_vld : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_strb_V_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_strb_V_out_ap_vld : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_user_V_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_user_V_out_ap_vld : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_p_4_0_0_0115_phi_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_p_4_0_0_0115_phi_out_ap_vld : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_id_V_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_id_V_out_ap_vld : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_dest_V_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_dest_V_out_ap_vld : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_start : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_done : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_idle : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_ready : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_plaintext_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_plaintext_array_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_we0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_343_ap_start : STD_LOGIC;
    signal grp_expandKey_fu_343_ap_done : STD_LOGIC;
    signal grp_expandKey_fu_343_ap_idle : STD_LOGIC;
    signal grp_expandKey_fu_343_ap_ready : STD_LOGIC;
    signal grp_expandKey_fu_343_expandedKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_343_expandedKey_ce0 : STD_LOGIC;
    signal grp_expandKey_fu_343_expandedKey_we0 : STD_LOGIC;
    signal grp_expandKey_fu_343_expandedKey_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_343_expandedKey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_343_expandedKey_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_343_expandedKey_ce1 : STD_LOGIC;
    signal grp_expandKey_fu_343_expandedKey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_343_key_array128_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_expandKey_fu_343_key_array128_ce0 : STD_LOGIC;
    signal grp_expandKey_fu_343_expandedKeySize : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_358_ap_start : STD_LOGIC;
    signal grp_aes_main_fu_358_ap_done : STD_LOGIC;
    signal grp_aes_main_fu_358_ap_idle : STD_LOGIC;
    signal grp_aes_main_fu_358_ap_ready : STD_LOGIC;
    signal grp_aes_main_fu_358_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_main_fu_358_state_ce0 : STD_LOGIC;
    signal grp_aes_main_fu_358_state_we0 : STD_LOGIC;
    signal grp_aes_main_fu_358_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_358_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_main_fu_358_state_ce1 : STD_LOGIC;
    signal grp_aes_main_fu_358_state_we1 : STD_LOGIC;
    signal grp_aes_main_fu_358_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_358_expandedKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_358_expandedKey_ce0 : STD_LOGIC;
    signal grp_aes_main_fu_358_grp_galois_multiplication_fu_560_p_din1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_358_grp_galois_multiplication_fu_560_p_din2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_main_fu_358_grp_galois_multiplication_fu_565_p_din1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_358_grp_galois_multiplication_fu_565_p_din2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_main_fu_358_grp_galois_multiplication_fu_570_p_din1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_358_grp_galois_multiplication_fu_570_p_din2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_start : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_done : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_idle : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_ready : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_block_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_block_1_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_we0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_start : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_done : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_idle : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_ready : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ciphertext_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ciphertext_array_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_we0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_invMain_fu_380_ap_start : STD_LOGIC;
    signal grp_aes_invMain_fu_380_ap_done : STD_LOGIC;
    signal grp_aes_invMain_fu_380_ap_idle : STD_LOGIC;
    signal grp_aes_invMain_fu_380_ap_ready : STD_LOGIC;
    signal grp_aes_invMain_fu_380_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_invMain_fu_380_state_ce0 : STD_LOGIC;
    signal grp_aes_invMain_fu_380_state_we0 : STD_LOGIC;
    signal grp_aes_invMain_fu_380_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_invMain_fu_380_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_invMain_fu_380_state_ce1 : STD_LOGIC;
    signal grp_aes_invMain_fu_380_state_we1 : STD_LOGIC;
    signal grp_aes_invMain_fu_380_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_invMain_fu_380_expandedKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_invMain_fu_380_expandedKey_ce0 : STD_LOGIC;
    signal grp_aes_invMain_fu_380_grp_galois_multiplication_fu_560_p_din1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_invMain_fu_380_grp_galois_multiplication_fu_560_p_din2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_invMain_fu_380_grp_galois_multiplication_fu_565_p_din1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_invMain_fu_380_grp_galois_multiplication_fu_565_p_din2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_invMain_fu_380_grp_galois_multiplication_fu_570_p_din1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_invMain_fu_380_grp_galois_multiplication_fu_570_p_din2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_start : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_done : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_idle : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_ready : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_block_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_block_r_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_we0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_start : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_done : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_idle : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_ready : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TREADY : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_array_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_start : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_done : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_idle : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_ready : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TREADY : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_decryptedtext_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_decryptedtext_array_ce0 : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID : STD_LOGIC;
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_galois_multiplication_fu_560_ap_ready : STD_LOGIC;
    signal grp_galois_multiplication_fu_560_a : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplication_fu_560_b : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_galois_multiplication_fu_560_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplication_fu_565_ap_ready : STD_LOGIC;
    signal grp_galois_multiplication_fu_565_a : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplication_fu_565_b : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_galois_multiplication_fu_565_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplication_fu_570_ap_ready : STD_LOGIC;
    signal grp_galois_multiplication_fu_570_a : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplication_fu_570_b : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_galois_multiplication_fu_570_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal key_array_reg_210 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal mode_read_read_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_nbrRounds_phi_fu_243_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal nbrRounds_reg_240 : STD_LOGIC_VECTOR (3 downto 0);
    signal nbrRounds_1_reg_255 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_predicate_op118_call_state17 : BOOLEAN;
    signal ap_block_state17_on_subcall_done : BOOLEAN;
    signal grp_aes_Pipeline_1_fu_273_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_aes_Pipeline_2_fu_279_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_aes_Pipeline_3_fu_284_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_expandKey_fu_343_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_aes_main_fu_358_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_start_reg : STD_LOGIC := '0';
    signal grp_aes_invMain_fu_380_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_start_reg : STD_LOGIC := '0';
    signal ap_predicate_op133_call_state23 : BOOLEAN;
    signal ap_block_state23_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal shl_ln_fu_462_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln5_fu_477_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_block_state13_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_block_state19_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal regslice_both_key_and_plaintext_V_data_V_U_apdone_blk : STD_LOGIC;
    signal key_and_plaintext_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal key_and_plaintext_TVALID_int_regslice : STD_LOGIC;
    signal key_and_plaintext_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal key_and_plaintext_TKEEP_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_key_and_plaintext_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal key_and_plaintext_TSTRB_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_key_and_plaintext_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_user_V_U_apdone_blk : STD_LOGIC;
    signal key_and_plaintext_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_key_and_plaintext_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_last_V_U_apdone_blk : STD_LOGIC;
    signal key_and_plaintext_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_key_and_plaintext_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_id_V_U_apdone_blk : STD_LOGIC;
    signal key_and_plaintext_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_key_and_plaintext_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal key_and_plaintext_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_key_and_plaintext_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_key_and_plaintext_V_dest_V_U_ack_in : STD_LOGIC;
    signal ciphertext_and_decryptedtext_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_and_decryptedtext_TVALID_int_regslice : STD_LOGIC;
    signal ciphertext_and_decryptedtext_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal ciphertext_and_decryptedtext_TKEEP_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_ciphertext_and_decryptedtext_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal ciphertext_and_decryptedtext_TSTRB_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_ciphertext_and_decryptedtext_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_user_V_U_apdone_blk : STD_LOGIC;
    signal ciphertext_and_decryptedtext_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_ciphertext_and_decryptedtext_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_last_V_U_apdone_blk : STD_LOGIC;
    signal ciphertext_and_decryptedtext_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_ciphertext_and_decryptedtext_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_id_V_U_apdone_blk : STD_LOGIC;
    signal ciphertext_and_decryptedtext_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_ciphertext_and_decryptedtext_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal ciphertext_and_decryptedtext_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_ciphertext_and_decryptedtext_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ciphertext_and_decryptedtext_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes_aes_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_array128_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        key_array128_ce0 : OUT STD_LOGIC;
        key_array128_we0 : OUT STD_LOGIC;
        key_array128_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_aes_Pipeline_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_array128_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        key_array128_ce0 : OUT STD_LOGIC;
        key_array128_we0 : OUT STD_LOGIC;
        key_array128_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_aes_Pipeline_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_array128_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        key_array128_ce0 : OUT STD_LOGIC;
        key_array128_we0 : OUT STD_LOGIC;
        key_array128_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_aes_Pipeline_VITIS_LOOP_70_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_and_plaintext_TVALID : IN STD_LOGIC;
        cipherkey_size : IN STD_LOGIC_VECTOR (5 downto 0);
        key_and_plaintext_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        key_and_plaintext_TREADY : OUT STD_LOGIC;
        key_and_plaintext_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        key_and_plaintext_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        key_and_plaintext_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        key_and_plaintext_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        key_and_plaintext_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        key_and_plaintext_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        key_array : IN STD_LOGIC_VECTOR (10 downto 0);
        key_array128_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        key_array128_ce0 : OUT STD_LOGIC;
        key_array128_we0 : OUT STD_LOGIC;
        key_array128_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_aes_Pipeline_VITIS_LOOP_75_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_and_plaintext_TVALID : IN STD_LOGIC;
        key_and_plaintext_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        key_and_plaintext_TREADY : OUT STD_LOGIC;
        key_and_plaintext_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        key_and_plaintext_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        key_and_plaintext_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        key_and_plaintext_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        key_and_plaintext_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        key_and_plaintext_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        plaintext_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        plaintext_array_ce0 : OUT STD_LOGIC;
        plaintext_array_we0 : OUT STD_LOGIC;
        plaintext_array_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tmp_keep_V_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        tmp_keep_V_out_ap_vld : OUT STD_LOGIC;
        tmp_strb_V_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        tmp_strb_V_out_ap_vld : OUT STD_LOGIC;
        tmp_user_V_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        tmp_user_V_out_ap_vld : OUT STD_LOGIC;
        p_4_0_0_0115_phi_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_4_0_0_0115_phi_out_ap_vld : OUT STD_LOGIC;
        tmp_id_V_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        tmp_id_V_out_ap_vld : OUT STD_LOGIC;
        tmp_dest_V_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        tmp_dest_V_out_ap_vld : OUT STD_LOGIC );
    end component;


    component aes_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        plaintext_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        plaintext_array_ce0 : OUT STD_LOGIC;
        plaintext_array_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        block_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        block_1_ce0 : OUT STD_LOGIC;
        block_1_we0 : OUT STD_LOGIC;
        block_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_expandKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        expandedKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce0 : OUT STD_LOGIC;
        expandedKey_we0 : OUT STD_LOGIC;
        expandedKey_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce1 : OUT STD_LOGIC;
        expandedKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_array128_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        key_array128_ce0 : OUT STD_LOGIC;
        key_array128_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key : IN STD_LOGIC_VECTOR (10 downto 0);
        size : IN STD_LOGIC_VECTOR (5 downto 0);
        expandedKeySize : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_aes_main IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce0 : OUT STD_LOGIC;
        expandedKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        nbrRounds : IN STD_LOGIC_VECTOR (3 downto 0);
        grp_galois_multiplication_fu_560_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_560_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        grp_galois_multiplication_fu_560_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_560_p_ready : IN STD_LOGIC;
        grp_galois_multiplication_fu_565_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_565_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        grp_galois_multiplication_fu_565_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_565_p_ready : IN STD_LOGIC;
        grp_galois_multiplication_fu_570_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_570_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        grp_galois_multiplication_fu_570_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_570_p_ready : IN STD_LOGIC );
    end component;


    component aes_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        block_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        block_1_ce0 : OUT STD_LOGIC;
        block_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ciphertext_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ciphertext_array_ce0 : OUT STD_LOGIC;
        ciphertext_array_we0 : OUT STD_LOGIC;
        ciphertext_array_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ciphertext_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ciphertext_array_ce0 : OUT STD_LOGIC;
        ciphertext_array_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        block_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        block_r_ce0 : OUT STD_LOGIC;
        block_r_we0 : OUT STD_LOGIC;
        block_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_aes_invMain IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce0 : OUT STD_LOGIC;
        expandedKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        nbrRounds : IN STD_LOGIC_VECTOR (3 downto 0);
        grp_galois_multiplication_fu_560_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_560_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        grp_galois_multiplication_fu_560_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_560_p_ready : IN STD_LOGIC;
        grp_galois_multiplication_fu_565_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_565_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        grp_galois_multiplication_fu_565_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_565_p_ready : IN STD_LOGIC;
        grp_galois_multiplication_fu_570_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_570_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        grp_galois_multiplication_fu_570_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_570_p_ready : IN STD_LOGIC );
    end component;


    component aes_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        block_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        block_r_ce0 : OUT STD_LOGIC;
        block_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        decryptedtext_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        decryptedtext_array_ce0 : OUT STD_LOGIC;
        decryptedtext_array_we0 : OUT STD_LOGIC;
        decryptedtext_array_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_aes_Pipeline_VITIS_LOOP_85_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ciphertext_and_decryptedtext_TREADY : IN STD_LOGIC;
        ciphertext_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ciphertext_array_ce0 : OUT STD_LOGIC;
        ciphertext_array_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        tmp_keep_V_reload : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp_strb_V_reload : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp_user_V_reload : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp_id_V_reload : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp_dest_V_reload : IN STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_and_decryptedtext_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        ciphertext_and_decryptedtext_TVALID : OUT STD_LOGIC;
        ciphertext_and_decryptedtext_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_and_decryptedtext_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_and_decryptedtext_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_and_decryptedtext_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_and_decryptedtext_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_and_decryptedtext_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component aes_aes_Pipeline_VITIS_LOOP_94_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ciphertext_and_decryptedtext_TREADY : IN STD_LOGIC;
        decryptedtext_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        decryptedtext_array_ce0 : OUT STD_LOGIC;
        decryptedtext_array_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        tmp_keep_V_reload : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp_strb_V_reload : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp_user_V_reload : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp_id_V_reload : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp_dest_V_reload : IN STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_and_decryptedtext_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        ciphertext_and_decryptedtext_TVALID : OUT STD_LOGIC;
        ciphertext_and_decryptedtext_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_and_decryptedtext_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_and_decryptedtext_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_and_decryptedtext_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_and_decryptedtext_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_and_decryptedtext_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component aes_galois_multiplication IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (7 downto 0);
        b : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_key_array128_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_expandedKey_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_block_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_aes_main_roundKey_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        mode : OUT STD_LOGIC_VECTOR (31 downto 0);
        enable_in : OUT STD_LOGIC_VECTOR (7 downto 0);
        power_reading_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aes_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        enable_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        power_reading_in : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aes_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    key_array128_U : component aes_key_array128_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 1056,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => key_array128_address0,
        ce0 => key_array128_ce0,
        we0 => key_array128_we0,
        d0 => key_array128_d0,
        q0 => key_array128_q0);

    expandedKey_U : component aes_expandedKey_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => expandedKey_address0,
        ce0 => expandedKey_ce0,
        we0 => expandedKey_we0,
        d0 => grp_expandKey_fu_343_expandedKey_d0,
        q0 => expandedKey_q0,
        address1 => grp_expandKey_fu_343_expandedKey_address1,
        ce1 => expandedKey_ce1,
        q1 => expandedKey_q1);

    block_U : component aes_block_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => block_address0,
        ce0 => block_ce0,
        we0 => block_we0,
        d0 => block_d0,
        q0 => block_q0,
        address1 => grp_aes_invMain_fu_380_state_address1,
        ce1 => block_ce1,
        we1 => block_we1,
        d1 => grp_aes_invMain_fu_380_state_d1,
        q1 => block_q1);

    expandedKey_1_U : component aes_expandedKey_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => expandedKey_1_address0,
        ce0 => expandedKey_1_ce0,
        we0 => expandedKey_1_we0,
        d0 => grp_expandKey_fu_343_expandedKey_d0,
        q0 => expandedKey_1_q0,
        address1 => grp_expandKey_fu_343_expandedKey_address1,
        ce1 => expandedKey_1_ce1,
        q1 => expandedKey_1_q1);

    block_1_U : component aes_block_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => block_1_address0,
        ce0 => block_1_ce0,
        we0 => block_1_we0,
        d0 => block_1_d0,
        q0 => block_1_q0,
        address1 => grp_aes_main_fu_358_state_address1,
        ce1 => block_1_ce1,
        we1 => block_1_we1,
        d1 => grp_aes_main_fu_358_state_d1,
        q1 => block_1_q1);

    plaintext_array_U : component aes_aes_main_roundKey_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => plaintext_array_address0,
        ce0 => plaintext_array_ce0,
        we0 => plaintext_array_we0,
        d0 => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_d0,
        q0 => plaintext_array_q0);

    ciphertext_array_U : component aes_aes_main_roundKey_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ciphertext_array_address0,
        ce0 => ciphertext_array_ce0,
        we0 => ciphertext_array_we0,
        d0 => grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_d0,
        q0 => ciphertext_array_q0);

    decryptedtext_array_U : component aes_aes_main_roundKey_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => decryptedtext_array_address0,
        ce0 => decryptedtext_array_ce0,
        we0 => decryptedtext_array_we0,
        d0 => grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_d0,
        q0 => decryptedtext_array_q0);

    grp_aes_Pipeline_1_fu_273 : component aes_aes_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_Pipeline_1_fu_273_ap_start,
        ap_done => grp_aes_Pipeline_1_fu_273_ap_done,
        ap_idle => grp_aes_Pipeline_1_fu_273_ap_idle,
        ap_ready => grp_aes_Pipeline_1_fu_273_ap_ready,
        key_array128_address0 => grp_aes_Pipeline_1_fu_273_key_array128_address0,
        key_array128_ce0 => grp_aes_Pipeline_1_fu_273_key_array128_ce0,
        key_array128_we0 => grp_aes_Pipeline_1_fu_273_key_array128_we0,
        key_array128_d0 => grp_aes_Pipeline_1_fu_273_key_array128_d0);

    grp_aes_Pipeline_2_fu_279 : component aes_aes_Pipeline_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_Pipeline_2_fu_279_ap_start,
        ap_done => grp_aes_Pipeline_2_fu_279_ap_done,
        ap_idle => grp_aes_Pipeline_2_fu_279_ap_idle,
        ap_ready => grp_aes_Pipeline_2_fu_279_ap_ready,
        key_array128_address0 => grp_aes_Pipeline_2_fu_279_key_array128_address0,
        key_array128_ce0 => grp_aes_Pipeline_2_fu_279_key_array128_ce0,
        key_array128_we0 => grp_aes_Pipeline_2_fu_279_key_array128_we0,
        key_array128_d0 => grp_aes_Pipeline_2_fu_279_key_array128_d0);

    grp_aes_Pipeline_3_fu_284 : component aes_aes_Pipeline_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_Pipeline_3_fu_284_ap_start,
        ap_done => grp_aes_Pipeline_3_fu_284_ap_done,
        ap_idle => grp_aes_Pipeline_3_fu_284_ap_idle,
        ap_ready => grp_aes_Pipeline_3_fu_284_ap_ready,
        key_array128_address0 => grp_aes_Pipeline_3_fu_284_key_array128_address0,
        key_array128_ce0 => grp_aes_Pipeline_3_fu_284_key_array128_ce0,
        key_array128_we0 => grp_aes_Pipeline_3_fu_284_key_array128_we0,
        key_array128_d0 => grp_aes_Pipeline_3_fu_284_key_array128_d0);

    grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289 : component aes_aes_Pipeline_VITIS_LOOP_70_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_start,
        ap_done => grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_done,
        ap_idle => grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_idle,
        ap_ready => grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_ready,
        key_and_plaintext_TVALID => key_and_plaintext_TVALID_int_regslice,
        cipherkey_size => cipherkey_size_reg_225,
        key_and_plaintext_TDATA => key_and_plaintext_TDATA_int_regslice,
        key_and_plaintext_TREADY => grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_and_plaintext_TREADY,
        key_and_plaintext_TKEEP => key_and_plaintext_TKEEP_int_regslice,
        key_and_plaintext_TSTRB => key_and_plaintext_TSTRB_int_regslice,
        key_and_plaintext_TUSER => key_and_plaintext_TUSER_int_regslice,
        key_and_plaintext_TLAST => key_and_plaintext_TLAST_int_regslice,
        key_and_plaintext_TID => key_and_plaintext_TID_int_regslice,
        key_and_plaintext_TDEST => key_and_plaintext_TDEST_int_regslice,
        key_array => key_array_reg_210,
        key_array128_address0 => grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_address0,
        key_array128_ce0 => grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_ce0,
        key_array128_we0 => grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_we0,
        key_array128_d0 => grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_d0);

    grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312 : component aes_aes_Pipeline_VITIS_LOOP_75_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_start,
        ap_done => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_done,
        ap_idle => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_idle,
        ap_ready => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_ready,
        key_and_plaintext_TVALID => key_and_plaintext_TVALID_int_regslice,
        key_and_plaintext_TDATA => key_and_plaintext_TDATA_int_regslice,
        key_and_plaintext_TREADY => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_key_and_plaintext_TREADY,
        key_and_plaintext_TKEEP => key_and_plaintext_TKEEP_int_regslice,
        key_and_plaintext_TSTRB => key_and_plaintext_TSTRB_int_regslice,
        key_and_plaintext_TUSER => key_and_plaintext_TUSER_int_regslice,
        key_and_plaintext_TLAST => key_and_plaintext_TLAST_int_regslice,
        key_and_plaintext_TID => key_and_plaintext_TID_int_regslice,
        key_and_plaintext_TDEST => key_and_plaintext_TDEST_int_regslice,
        plaintext_array_address0 => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_address0,
        plaintext_array_ce0 => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_ce0,
        plaintext_array_we0 => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_we0,
        plaintext_array_d0 => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_d0,
        tmp_keep_V_out => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_keep_V_out,
        tmp_keep_V_out_ap_vld => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_keep_V_out_ap_vld,
        tmp_strb_V_out => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_strb_V_out,
        tmp_strb_V_out_ap_vld => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_strb_V_out_ap_vld,
        tmp_user_V_out => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_user_V_out,
        tmp_user_V_out_ap_vld => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_user_V_out_ap_vld,
        p_4_0_0_0115_phi_out => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_p_4_0_0_0115_phi_out,
        p_4_0_0_0115_phi_out_ap_vld => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_p_4_0_0_0115_phi_out_ap_vld,
        tmp_id_V_out => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_id_V_out,
        tmp_id_V_out_ap_vld => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_id_V_out_ap_vld,
        tmp_dest_V_out => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_dest_V_out,
        tmp_dest_V_out_ap_vld => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_dest_V_out_ap_vld);

    grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337 : component aes_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_start,
        ap_done => grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_done,
        ap_idle => grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_idle,
        ap_ready => grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_ready,
        plaintext_array_address0 => grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_plaintext_array_address0,
        plaintext_array_ce0 => grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_plaintext_array_ce0,
        plaintext_array_q0 => plaintext_array_q0,
        block_1_address0 => grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_address0,
        block_1_ce0 => grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_ce0,
        block_1_we0 => grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_we0,
        block_1_d0 => grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_d0);

    grp_expandKey_fu_343 : component aes_expandKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_expandKey_fu_343_ap_start,
        ap_done => grp_expandKey_fu_343_ap_done,
        ap_idle => grp_expandKey_fu_343_ap_idle,
        ap_ready => grp_expandKey_fu_343_ap_ready,
        expandedKey_address0 => grp_expandKey_fu_343_expandedKey_address0,
        expandedKey_ce0 => grp_expandKey_fu_343_expandedKey_ce0,
        expandedKey_we0 => grp_expandKey_fu_343_expandedKey_we0,
        expandedKey_d0 => grp_expandKey_fu_343_expandedKey_d0,
        expandedKey_q0 => grp_expandKey_fu_343_expandedKey_q0,
        expandedKey_address1 => grp_expandKey_fu_343_expandedKey_address1,
        expandedKey_ce1 => grp_expandKey_fu_343_expandedKey_ce1,
        expandedKey_q1 => grp_expandKey_fu_343_expandedKey_q1,
        key_array128_address0 => grp_expandKey_fu_343_key_array128_address0,
        key_array128_ce0 => grp_expandKey_fu_343_key_array128_ce0,
        key_array128_q0 => key_array128_q0,
        key => key_array_reg_210,
        size => cipherkey_size_reg_225,
        expandedKeySize => grp_expandKey_fu_343_expandedKeySize);

    grp_aes_main_fu_358 : component aes_aes_main
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_main_fu_358_ap_start,
        ap_done => grp_aes_main_fu_358_ap_done,
        ap_idle => grp_aes_main_fu_358_ap_idle,
        ap_ready => grp_aes_main_fu_358_ap_ready,
        state_address0 => grp_aes_main_fu_358_state_address0,
        state_ce0 => grp_aes_main_fu_358_state_ce0,
        state_we0 => grp_aes_main_fu_358_state_we0,
        state_d0 => grp_aes_main_fu_358_state_d0,
        state_q0 => block_1_q0,
        state_address1 => grp_aes_main_fu_358_state_address1,
        state_ce1 => grp_aes_main_fu_358_state_ce1,
        state_we1 => grp_aes_main_fu_358_state_we1,
        state_d1 => grp_aes_main_fu_358_state_d1,
        state_q1 => block_1_q1,
        expandedKey_address0 => grp_aes_main_fu_358_expandedKey_address0,
        expandedKey_ce0 => grp_aes_main_fu_358_expandedKey_ce0,
        expandedKey_q0 => expandedKey_1_q0,
        nbrRounds => nbrRounds_reg_240,
        grp_galois_multiplication_fu_560_p_din1 => grp_aes_main_fu_358_grp_galois_multiplication_fu_560_p_din1,
        grp_galois_multiplication_fu_560_p_din2 => grp_aes_main_fu_358_grp_galois_multiplication_fu_560_p_din2,
        grp_galois_multiplication_fu_560_p_dout0 => grp_galois_multiplication_fu_560_ap_return,
        grp_galois_multiplication_fu_560_p_ready => grp_galois_multiplication_fu_560_ap_ready,
        grp_galois_multiplication_fu_565_p_din1 => grp_aes_main_fu_358_grp_galois_multiplication_fu_565_p_din1,
        grp_galois_multiplication_fu_565_p_din2 => grp_aes_main_fu_358_grp_galois_multiplication_fu_565_p_din2,
        grp_galois_multiplication_fu_565_p_dout0 => grp_galois_multiplication_fu_565_ap_return,
        grp_galois_multiplication_fu_565_p_ready => grp_galois_multiplication_fu_565_ap_ready,
        grp_galois_multiplication_fu_570_p_din1 => grp_aes_main_fu_358_grp_galois_multiplication_fu_570_p_din1,
        grp_galois_multiplication_fu_570_p_din2 => grp_aes_main_fu_358_grp_galois_multiplication_fu_570_p_din2,
        grp_galois_multiplication_fu_570_p_dout0 => grp_galois_multiplication_fu_570_ap_return,
        grp_galois_multiplication_fu_570_p_ready => grp_galois_multiplication_fu_570_ap_ready);

    grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368 : component aes_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_start,
        ap_done => grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_done,
        ap_idle => grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_idle,
        ap_ready => grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_ready,
        block_1_address0 => grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_block_1_address0,
        block_1_ce0 => grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_block_1_ce0,
        block_1_q0 => block_1_q0,
        ciphertext_array_address0 => grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_address0,
        ciphertext_array_ce0 => grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_ce0,
        ciphertext_array_we0 => grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_we0,
        ciphertext_array_d0 => grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_d0);

    grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374 : component aes_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_start,
        ap_done => grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_done,
        ap_idle => grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_idle,
        ap_ready => grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_ready,
        ciphertext_array_address0 => grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ciphertext_array_address0,
        ciphertext_array_ce0 => grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ciphertext_array_ce0,
        ciphertext_array_q0 => ciphertext_array_q0,
        block_r_address0 => grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_address0,
        block_r_ce0 => grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_ce0,
        block_r_we0 => grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_we0,
        block_r_d0 => grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_d0);

    grp_aes_invMain_fu_380 : component aes_aes_invMain
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_invMain_fu_380_ap_start,
        ap_done => grp_aes_invMain_fu_380_ap_done,
        ap_idle => grp_aes_invMain_fu_380_ap_idle,
        ap_ready => grp_aes_invMain_fu_380_ap_ready,
        state_address0 => grp_aes_invMain_fu_380_state_address0,
        state_ce0 => grp_aes_invMain_fu_380_state_ce0,
        state_we0 => grp_aes_invMain_fu_380_state_we0,
        state_d0 => grp_aes_invMain_fu_380_state_d0,
        state_q0 => block_q0,
        state_address1 => grp_aes_invMain_fu_380_state_address1,
        state_ce1 => grp_aes_invMain_fu_380_state_ce1,
        state_we1 => grp_aes_invMain_fu_380_state_we1,
        state_d1 => grp_aes_invMain_fu_380_state_d1,
        state_q1 => block_q1,
        expandedKey_address0 => grp_aes_invMain_fu_380_expandedKey_address0,
        expandedKey_ce0 => grp_aes_invMain_fu_380_expandedKey_ce0,
        expandedKey_q0 => expandedKey_q0,
        nbrRounds => nbrRounds_1_reg_255,
        grp_galois_multiplication_fu_560_p_din1 => grp_aes_invMain_fu_380_grp_galois_multiplication_fu_560_p_din1,
        grp_galois_multiplication_fu_560_p_din2 => grp_aes_invMain_fu_380_grp_galois_multiplication_fu_560_p_din2,
        grp_galois_multiplication_fu_560_p_dout0 => grp_galois_multiplication_fu_560_ap_return,
        grp_galois_multiplication_fu_560_p_ready => grp_galois_multiplication_fu_560_ap_ready,
        grp_galois_multiplication_fu_565_p_din1 => grp_aes_invMain_fu_380_grp_galois_multiplication_fu_565_p_din1,
        grp_galois_multiplication_fu_565_p_din2 => grp_aes_invMain_fu_380_grp_galois_multiplication_fu_565_p_din2,
        grp_galois_multiplication_fu_565_p_dout0 => grp_galois_multiplication_fu_565_ap_return,
        grp_galois_multiplication_fu_565_p_ready => grp_galois_multiplication_fu_565_ap_ready,
        grp_galois_multiplication_fu_570_p_din1 => grp_aes_invMain_fu_380_grp_galois_multiplication_fu_570_p_din1,
        grp_galois_multiplication_fu_570_p_din2 => grp_aes_invMain_fu_380_grp_galois_multiplication_fu_570_p_din2,
        grp_galois_multiplication_fu_570_p_dout0 => grp_galois_multiplication_fu_570_ap_return,
        grp_galois_multiplication_fu_570_p_ready => grp_galois_multiplication_fu_570_ap_ready);

    grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390 : component aes_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_start,
        ap_done => grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_done,
        ap_idle => grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_idle,
        ap_ready => grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_ready,
        block_r_address0 => grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_block_r_address0,
        block_r_ce0 => grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_block_r_ce0,
        block_r_q0 => block_q0,
        decryptedtext_array_address0 => grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_address0,
        decryptedtext_array_ce0 => grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_ce0,
        decryptedtext_array_we0 => grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_we0,
        decryptedtext_array_d0 => grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_d0);

    grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396 : component aes_aes_Pipeline_VITIS_LOOP_85_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_start,
        ap_done => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_done,
        ap_idle => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_idle,
        ap_ready => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_ready,
        ciphertext_and_decryptedtext_TREADY => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TREADY,
        ciphertext_array_address0 => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_array_address0,
        ciphertext_array_ce0 => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_array_ce0,
        ciphertext_array_q0 => ciphertext_array_q0,
        tmp_keep_V_reload => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_keep_V_out,
        tmp_strb_V_reload => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_strb_V_out,
        tmp_user_V_reload => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_user_V_out,
        tmp_id_V_reload => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_id_V_out,
        tmp_dest_V_reload => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_dest_V_out,
        ciphertext_and_decryptedtext_TDATA => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TDATA,
        ciphertext_and_decryptedtext_TVALID => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID,
        ciphertext_and_decryptedtext_TKEEP => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TKEEP,
        ciphertext_and_decryptedtext_TSTRB => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TSTRB,
        ciphertext_and_decryptedtext_TUSER => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TUSER,
        ciphertext_and_decryptedtext_TLAST => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TLAST,
        ciphertext_and_decryptedtext_TID => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TID,
        ciphertext_and_decryptedtext_TDEST => grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TDEST);

    grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420 : component aes_aes_Pipeline_VITIS_LOOP_94_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_start,
        ap_done => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_done,
        ap_idle => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_idle,
        ap_ready => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_ready,
        ciphertext_and_decryptedtext_TREADY => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TREADY,
        decryptedtext_array_address0 => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_decryptedtext_array_address0,
        decryptedtext_array_ce0 => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_decryptedtext_array_ce0,
        decryptedtext_array_q0 => decryptedtext_array_q0,
        tmp_keep_V_reload => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_keep_V_out,
        tmp_strb_V_reload => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_strb_V_out,
        tmp_user_V_reload => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_user_V_out,
        tmp_id_V_reload => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_id_V_out,
        tmp_dest_V_reload => grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_tmp_dest_V_out,
        ciphertext_and_decryptedtext_TDATA => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TDATA,
        ciphertext_and_decryptedtext_TVALID => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID,
        ciphertext_and_decryptedtext_TKEEP => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TKEEP,
        ciphertext_and_decryptedtext_TSTRB => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TSTRB,
        ciphertext_and_decryptedtext_TUSER => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TUSER,
        ciphertext_and_decryptedtext_TLAST => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TLAST,
        ciphertext_and_decryptedtext_TID => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TID,
        ciphertext_and_decryptedtext_TDEST => grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TDEST);

    grp_galois_multiplication_fu_560 : component aes_galois_multiplication
    port map (
        ap_ready => grp_galois_multiplication_fu_560_ap_ready,
        a => grp_galois_multiplication_fu_560_a,
        b => grp_galois_multiplication_fu_560_b,
        ap_return => grp_galois_multiplication_fu_560_ap_return);

    grp_galois_multiplication_fu_565 : component aes_galois_multiplication
    port map (
        ap_ready => grp_galois_multiplication_fu_565_ap_ready,
        a => grp_galois_multiplication_fu_565_a,
        b => grp_galois_multiplication_fu_565_b,
        ap_return => grp_galois_multiplication_fu_565_ap_return);

    grp_galois_multiplication_fu_570 : component aes_galois_multiplication
    port map (
        ap_ready => grp_galois_multiplication_fu_570_ap_ready,
        a => grp_galois_multiplication_fu_570_a,
        b => grp_galois_multiplication_fu_570_b,
        ap_return => grp_galois_multiplication_fu_570_ap_return);

    CTRL_BUS_s_axi_U : component aes_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        mode => mode,
        enable_in => enable_in,
        power_reading_out => power_reading_out);

    control_s_axi_U : component aes_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        enable_out => enable_out,
        power_reading_in => power_reading_in);

    regslice_both_key_and_plaintext_V_data_V_U : component aes_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => key_and_plaintext_TDATA,
        vld_in => key_and_plaintext_TVALID,
        ack_in => regslice_both_key_and_plaintext_V_data_V_U_ack_in,
        data_out => key_and_plaintext_TDATA_int_regslice,
        vld_out => key_and_plaintext_TVALID_int_regslice,
        ack_out => key_and_plaintext_TREADY_int_regslice,
        apdone_blk => regslice_both_key_and_plaintext_V_data_V_U_apdone_blk);

    regslice_both_key_and_plaintext_V_keep_V_U : component aes_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => key_and_plaintext_TKEEP,
        vld_in => key_and_plaintext_TVALID,
        ack_in => regslice_both_key_and_plaintext_V_keep_V_U_ack_in,
        data_out => key_and_plaintext_TKEEP_int_regslice,
        vld_out => regslice_both_key_and_plaintext_V_keep_V_U_vld_out,
        ack_out => key_and_plaintext_TREADY_int_regslice,
        apdone_blk => regslice_both_key_and_plaintext_V_keep_V_U_apdone_blk);

    regslice_both_key_and_plaintext_V_strb_V_U : component aes_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => key_and_plaintext_TSTRB,
        vld_in => key_and_plaintext_TVALID,
        ack_in => regslice_both_key_and_plaintext_V_strb_V_U_ack_in,
        data_out => key_and_plaintext_TSTRB_int_regslice,
        vld_out => regslice_both_key_and_plaintext_V_strb_V_U_vld_out,
        ack_out => key_and_plaintext_TREADY_int_regslice,
        apdone_blk => regslice_both_key_and_plaintext_V_strb_V_U_apdone_blk);

    regslice_both_key_and_plaintext_V_user_V_U : component aes_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => key_and_plaintext_TUSER,
        vld_in => key_and_plaintext_TVALID,
        ack_in => regslice_both_key_and_plaintext_V_user_V_U_ack_in,
        data_out => key_and_plaintext_TUSER_int_regslice,
        vld_out => regslice_both_key_and_plaintext_V_user_V_U_vld_out,
        ack_out => key_and_plaintext_TREADY_int_regslice,
        apdone_blk => regslice_both_key_and_plaintext_V_user_V_U_apdone_blk);

    regslice_both_key_and_plaintext_V_last_V_U : component aes_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => key_and_plaintext_TLAST,
        vld_in => key_and_plaintext_TVALID,
        ack_in => regslice_both_key_and_plaintext_V_last_V_U_ack_in,
        data_out => key_and_plaintext_TLAST_int_regslice,
        vld_out => regslice_both_key_and_plaintext_V_last_V_U_vld_out,
        ack_out => key_and_plaintext_TREADY_int_regslice,
        apdone_blk => regslice_both_key_and_plaintext_V_last_V_U_apdone_blk);

    regslice_both_key_and_plaintext_V_id_V_U : component aes_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => key_and_plaintext_TID,
        vld_in => key_and_plaintext_TVALID,
        ack_in => regslice_both_key_and_plaintext_V_id_V_U_ack_in,
        data_out => key_and_plaintext_TID_int_regslice,
        vld_out => regslice_both_key_and_plaintext_V_id_V_U_vld_out,
        ack_out => key_and_plaintext_TREADY_int_regslice,
        apdone_blk => regslice_both_key_and_plaintext_V_id_V_U_apdone_blk);

    regslice_both_key_and_plaintext_V_dest_V_U : component aes_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => key_and_plaintext_TDEST,
        vld_in => key_and_plaintext_TVALID,
        ack_in => regslice_both_key_and_plaintext_V_dest_V_U_ack_in,
        data_out => key_and_plaintext_TDEST_int_regslice,
        vld_out => regslice_both_key_and_plaintext_V_dest_V_U_vld_out,
        ack_out => key_and_plaintext_TREADY_int_regslice,
        apdone_blk => regslice_both_key_and_plaintext_V_dest_V_U_apdone_blk);

    regslice_both_ciphertext_and_decryptedtext_V_data_V_U : component aes_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ciphertext_and_decryptedtext_TDATA_int_regslice,
        vld_in => ciphertext_and_decryptedtext_TVALID_int_regslice,
        ack_in => ciphertext_and_decryptedtext_TREADY_int_regslice,
        data_out => ciphertext_and_decryptedtext_TDATA,
        vld_out => regslice_both_ciphertext_and_decryptedtext_V_data_V_U_vld_out,
        ack_out => ciphertext_and_decryptedtext_TREADY,
        apdone_blk => regslice_both_ciphertext_and_decryptedtext_V_data_V_U_apdone_blk);

    regslice_both_ciphertext_and_decryptedtext_V_keep_V_U : component aes_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ciphertext_and_decryptedtext_TKEEP_int_regslice,
        vld_in => ciphertext_and_decryptedtext_TVALID_int_regslice,
        ack_in => regslice_both_ciphertext_and_decryptedtext_V_keep_V_U_ack_in_dummy,
        data_out => ciphertext_and_decryptedtext_TKEEP,
        vld_out => regslice_both_ciphertext_and_decryptedtext_V_keep_V_U_vld_out,
        ack_out => ciphertext_and_decryptedtext_TREADY,
        apdone_blk => regslice_both_ciphertext_and_decryptedtext_V_keep_V_U_apdone_blk);

    regslice_both_ciphertext_and_decryptedtext_V_strb_V_U : component aes_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ciphertext_and_decryptedtext_TSTRB_int_regslice,
        vld_in => ciphertext_and_decryptedtext_TVALID_int_regslice,
        ack_in => regslice_both_ciphertext_and_decryptedtext_V_strb_V_U_ack_in_dummy,
        data_out => ciphertext_and_decryptedtext_TSTRB,
        vld_out => regslice_both_ciphertext_and_decryptedtext_V_strb_V_U_vld_out,
        ack_out => ciphertext_and_decryptedtext_TREADY,
        apdone_blk => regslice_both_ciphertext_and_decryptedtext_V_strb_V_U_apdone_blk);

    regslice_both_ciphertext_and_decryptedtext_V_user_V_U : component aes_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ciphertext_and_decryptedtext_TUSER_int_regslice,
        vld_in => ciphertext_and_decryptedtext_TVALID_int_regslice,
        ack_in => regslice_both_ciphertext_and_decryptedtext_V_user_V_U_ack_in_dummy,
        data_out => ciphertext_and_decryptedtext_TUSER,
        vld_out => regslice_both_ciphertext_and_decryptedtext_V_user_V_U_vld_out,
        ack_out => ciphertext_and_decryptedtext_TREADY,
        apdone_blk => regslice_both_ciphertext_and_decryptedtext_V_user_V_U_apdone_blk);

    regslice_both_ciphertext_and_decryptedtext_V_last_V_U : component aes_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ciphertext_and_decryptedtext_TLAST_int_regslice,
        vld_in => ciphertext_and_decryptedtext_TVALID_int_regslice,
        ack_in => regslice_both_ciphertext_and_decryptedtext_V_last_V_U_ack_in_dummy,
        data_out => ciphertext_and_decryptedtext_TLAST,
        vld_out => regslice_both_ciphertext_and_decryptedtext_V_last_V_U_vld_out,
        ack_out => ciphertext_and_decryptedtext_TREADY,
        apdone_blk => regslice_both_ciphertext_and_decryptedtext_V_last_V_U_apdone_blk);

    regslice_both_ciphertext_and_decryptedtext_V_id_V_U : component aes_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ciphertext_and_decryptedtext_TID_int_regslice,
        vld_in => ciphertext_and_decryptedtext_TVALID_int_regslice,
        ack_in => regslice_both_ciphertext_and_decryptedtext_V_id_V_U_ack_in_dummy,
        data_out => ciphertext_and_decryptedtext_TID,
        vld_out => regslice_both_ciphertext_and_decryptedtext_V_id_V_U_vld_out,
        ack_out => ciphertext_and_decryptedtext_TREADY,
        apdone_blk => regslice_both_ciphertext_and_decryptedtext_V_id_V_U_apdone_blk);

    regslice_both_ciphertext_and_decryptedtext_V_dest_V_U : component aes_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ciphertext_and_decryptedtext_TDEST_int_regslice,
        vld_in => ciphertext_and_decryptedtext_TVALID_int_regslice,
        ack_in => regslice_both_ciphertext_and_decryptedtext_V_dest_V_U_ack_in_dummy,
        data_out => ciphertext_and_decryptedtext_TDEST,
        vld_out => regslice_both_ciphertext_and_decryptedtext_V_dest_V_U_vld_out,
        ack_out => ciphertext_and_decryptedtext_TREADY,
        apdone_blk => regslice_both_ciphertext_and_decryptedtext_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_Pipeline_1_fu_273_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_Pipeline_1_fu_273_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    grp_aes_Pipeline_1_fu_273_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_Pipeline_1_fu_273_ap_ready = ap_const_logic_1)) then 
                    grp_aes_Pipeline_1_fu_273_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_Pipeline_2_fu_279_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_Pipeline_2_fu_279_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_aes_Pipeline_2_fu_279_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_Pipeline_2_fu_279_ap_ready = ap_const_logic_1)) then 
                    grp_aes_Pipeline_2_fu_279_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_Pipeline_3_fu_284_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_Pipeline_3_fu_284_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_aes_Pipeline_3_fu_284_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_Pipeline_3_fu_284_ap_ready = ap_const_logic_1)) then 
                    grp_aes_Pipeline_3_fu_284_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((cipherkey_size_reg_225 = ap_const_lv6_10) or ((cipherkey_size_reg_225 = ap_const_lv6_18) or (cipherkey_size_reg_225 = ap_const_lv6_20))))) then 
                    grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_ready = ap_const_logic_1)) then 
                    grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_ready = ap_const_logic_1)) then 
                    grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_ready = ap_const_logic_1)) then 
                    grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_ready = ap_const_logic_1)) then 
                    grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_ready = ap_const_logic_1)) then 
                    grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_ready = ap_const_logic_1)) then 
                    grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_ready = ap_const_logic_1)) then 
                    grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_ready = ap_const_logic_1)) then 
                    grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_invMain_fu_380_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_invMain_fu_380_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_aes_invMain_fu_380_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_invMain_fu_380_ap_ready = ap_const_logic_1)) then 
                    grp_aes_invMain_fu_380_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_main_fu_358_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_main_fu_358_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_aes_main_fu_358_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_main_fu_358_ap_ready = ap_const_logic_1)) then 
                    grp_aes_main_fu_358_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_expandKey_fu_343_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_expandKey_fu_343_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state12) and ((cipherkey_size_reg_225 = ap_const_lv6_10) or ((cipherkey_size_reg_225 = ap_const_lv6_18) or (cipherkey_size_reg_225 = ap_const_lv6_20)))))) then 
                    grp_expandKey_fu_343_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_expandKey_fu_343_ap_ready = ap_const_logic_1)) then 
                    grp_expandKey_fu_343_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cipherkey_size_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_aes_Pipeline_3_fu_284_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                if ((mode_read_read_fu_204_p2 = ap_const_lv32_80)) then 
                    cipherkey_size_reg_225(3) <= '0';
                    cipherkey_size_reg_225(4) <= '1';
                    cipherkey_size_reg_225(5) <= '0';
                elsif ((mode_read_read_fu_204_p2 = ap_const_lv32_C0)) then 
                    cipherkey_size_reg_225(3) <= '1';
                    cipherkey_size_reg_225(4) <= '1';
                    cipherkey_size_reg_225(5) <= '0';
                elsif ((mode_read_read_fu_204_p2 = ap_const_lv32_100)) then 
                    cipherkey_size_reg_225(3) <= '0';
                    cipherkey_size_reg_225(4) <= '0';
                    cipherkey_size_reg_225(5) <= '1';
                end if;
            end if; 
        end if;
    end process;

    key_array_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_aes_Pipeline_3_fu_284_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                if ((mode_read_read_fu_204_p2 = ap_const_lv32_80)) then 
                    key_array_reg_210(9) <= '0';
                    key_array_reg_210(10) <= '0';
                elsif ((mode_read_read_fu_204_p2 = ap_const_lv32_C0)) then 
                    key_array_reg_210(9) <= '1';
                    key_array_reg_210(10) <= '0';
                elsif ((mode_read_read_fu_204_p2 = ap_const_lv32_100)) then 
                    key_array_reg_210(9) <= '0';
                    key_array_reg_210(10) <= '1';
                end if;
            end if; 
        end if;
    end process;

    nbrRounds_1_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state17_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                if ((cipherkey_size_reg_225 = ap_const_lv6_10)) then 
                    nbrRounds_1_reg_255(1) <= '1';
                    nbrRounds_1_reg_255(2) <= '0';
                elsif ((cipherkey_size_reg_225 = ap_const_lv6_18)) then 
                    nbrRounds_1_reg_255(1) <= '0';
                    nbrRounds_1_reg_255(2) <= '1';
                elsif ((cipherkey_size_reg_225 = ap_const_lv6_20)) then 
                    nbrRounds_1_reg_255(1) <= '1';
                    nbrRounds_1_reg_255(2) <= '1';
                end if;
            end if; 
        end if;
    end process;

    nbrRounds_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                if ((cipherkey_size_reg_225 = ap_const_lv6_10)) then 
                    nbrRounds_reg_240(1) <= '1';
                    nbrRounds_reg_240(2) <= '0';
                elsif ((cipherkey_size_reg_225 = ap_const_lv6_18)) then 
                    nbrRounds_reg_240(1) <= '0';
                    nbrRounds_reg_240(2) <= '1';
                elsif ((cipherkey_size_reg_225 = ap_const_lv6_20)) then 
                    nbrRounds_reg_240(1) <= '1';
                    nbrRounds_reg_240(2) <= '1';
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                    expandedKeySize_1_reg_555(6 downto 5) <= expandedKeySize_1_fu_485_p2(6 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((cipherkey_size_reg_225 = ap_const_lv6_10) or ((cipherkey_size_reg_225 = ap_const_lv6_18) or (cipherkey_size_reg_225 = ap_const_lv6_20))))) then
                    expandedKeySize_reg_550(7 downto 5) <= expandedKeySize_fu_470_p2(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                p_4_0_0_0115_phi_loc_load_reg_540 <= grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_p_4_0_0_0115_phi_out;
            end if;
        end if;
    end process;
    expandedKeySize_reg_550(4 downto 0) <= "10000";
    cipherkey_size_reg_225(2 downto 0) <= "000";
    expandedKeySize_1_reg_555(4 downto 0) <= "10000";
    expandedKeySize_1_reg_555(7) <= '1';
    key_array_reg_210(8 downto 0) <= "000000000";
    nbrRounds_reg_240(0) <= '0';
    nbrRounds_reg_240(3) <= '1';
    nbrRounds_1_reg_255(0) <= '0';
    nbrRounds_1_reg_255(3) <= '1';

    ap_NS_fsm_assign_proc : process (p_4_0_0_0115_phi_loc_load_reg_540, ap_CS_fsm, ap_CS_fsm_state12, cipherkey_size_reg_225, grp_aes_Pipeline_1_fu_273_ap_done, grp_aes_Pipeline_2_fu_279_ap_done, grp_aes_Pipeline_3_fu_284_ap_done, grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_done, grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_done, grp_aes_main_fu_358_ap_done, grp_aes_invMain_fu_380_ap_done, grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_done, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_done, ap_CS_fsm_state6, mode_read_read_fu_204_p2, ap_CS_fsm_state17, ap_block_state17_on_subcall_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_block_state23_on_subcall_done, ap_CS_fsm_state24, ap_CS_fsm_state27, ap_block_state13_on_subcall_done, ap_block_state19_on_subcall_done, regslice_both_ciphertext_and_decryptedtext_V_data_V_U_apdone_blk, ap_CS_fsm_state28)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_aes_Pipeline_1_fu_273_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_aes_Pipeline_2_fu_279_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_aes_Pipeline_3_fu_284_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and ((mode_read_read_fu_204_p2 = ap_const_lv32_80) or ((mode_read_read_fu_204_p2 = ap_const_lv32_C0) or (mode_read_read_fu_204_p2 = ap_const_lv32_100))))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not((mode_read_read_fu_204_p2 = ap_const_lv32_80)) and not((mode_read_read_fu_204_p2 = ap_const_lv32_C0)) and not((mode_read_read_fu_204_p2 = ap_const_lv32_100)) and (grp_aes_Pipeline_3_fu_284_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not((cipherkey_size_reg_225 = ap_const_lv6_10)) and not((cipherkey_size_reg_225 = ap_const_lv6_18)) and not((cipherkey_size_reg_225 = ap_const_lv6_20)) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_aes_main_fu_358_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if ((not((cipherkey_size_reg_225 = ap_const_lv6_10)) and not((cipherkey_size_reg_225 = ap_const_lv6_18)) and not((cipherkey_size_reg_225 = ap_const_lv6_20)) and (ap_const_boolean_0 = ap_block_state17_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                elsif (((ap_const_boolean_0 = ap_block_state17_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state17) and ((cipherkey_size_reg_225 = ap_const_lv6_10) or ((cipherkey_size_reg_225 = ap_const_lv6_18) or (cipherkey_size_reg_225 = ap_const_lv6_20))))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_boolean_0 = ap_block_state19_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_aes_invMain_fu_380_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((p_4_0_0_0115_phi_loc_load_reg_540 = ap_const_lv1_1) and (grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                elsif (((p_4_0_0_0115_phi_loc_load_reg_540 = ap_const_lv1_0) and (grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((regslice_both_ciphertext_and_decryptedtext_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_done)
    begin
        if ((grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(ap_block_state13_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state13_on_subcall_done)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(grp_aes_main_fu_358_ap_done)
    begin
        if ((grp_aes_main_fu_358_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(ap_block_state17_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state17_on_subcall_done)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(ap_block_state19_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state19_on_subcall_done)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(grp_aes_invMain_fu_380_ap_done)
    begin
        if ((grp_aes_invMain_fu_380_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(ap_block_state23_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state23_on_subcall_done)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state24_blk_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_done)
    begin
        if ((grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;

    ap_ST_fsm_state27_blk_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_done)
    begin
        if ((grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state28_blk_assign_proc : process(regslice_both_ciphertext_and_decryptedtext_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_ciphertext_and_decryptedtext_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state28_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state28_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_aes_Pipeline_1_fu_273_ap_done)
    begin
        if ((grp_aes_Pipeline_1_fu_273_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_aes_Pipeline_2_fu_279_ap_done)
    begin
        if ((grp_aes_Pipeline_2_fu_279_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_aes_Pipeline_3_fu_284_ap_done)
    begin
        if ((grp_aes_Pipeline_3_fu_284_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_done)
    begin
        if ((grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state13_on_subcall_done_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_done, grp_expandKey_fu_343_ap_done)
    begin
                ap_block_state13_on_subcall_done <= ((grp_expandKey_fu_343_ap_done = ap_const_logic_0) or (grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_done = ap_const_logic_0));
    end process;


    ap_block_state17_on_subcall_done_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_done, ap_predicate_op118_call_state17)
    begin
                ap_block_state17_on_subcall_done <= ((ap_predicate_op118_call_state17 = ap_const_boolean_1) and (grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_done = ap_const_logic_0));
    end process;


    ap_block_state19_on_subcall_done_assign_proc : process(grp_expandKey_fu_343_ap_done, grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_done)
    begin
                ap_block_state19_on_subcall_done <= ((grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_done = ap_const_logic_0) or (grp_expandKey_fu_343_ap_done = ap_const_logic_0));
    end process;


    ap_block_state23_on_subcall_done_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_done, ap_predicate_op133_call_state23)
    begin
                ap_block_state23_on_subcall_done <= ((ap_predicate_op133_call_state23 = ap_const_boolean_1) and (grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_done = ap_const_logic_0));
    end process;


    ap_phi_mux_nbrRounds_phi_fu_243_p6_assign_proc : process(ap_CS_fsm_state12, cipherkey_size_reg_225)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
            if ((cipherkey_size_reg_225 = ap_const_lv6_10)) then 
                ap_phi_mux_nbrRounds_phi_fu_243_p6 <= ap_const_lv4_A;
            elsif ((cipherkey_size_reg_225 = ap_const_lv6_18)) then 
                ap_phi_mux_nbrRounds_phi_fu_243_p6 <= ap_const_lv4_C;
            elsif ((cipherkey_size_reg_225 = ap_const_lv6_20)) then 
                ap_phi_mux_nbrRounds_phi_fu_243_p6 <= ap_const_lv4_E;
            else 
                ap_phi_mux_nbrRounds_phi_fu_243_p6 <= "XXXX";
            end if;
        else 
            ap_phi_mux_nbrRounds_phi_fu_243_p6 <= "XXXX";
        end if; 
    end process;


    ap_predicate_op118_call_state17_assign_proc : process(cipherkey_size_reg_225)
    begin
                ap_predicate_op118_call_state17 <= ((cipherkey_size_reg_225 = ap_const_lv6_10) or ((cipherkey_size_reg_225 = ap_const_lv6_18) or (cipherkey_size_reg_225 = ap_const_lv6_20)));
    end process;


    ap_predicate_op133_call_state23_assign_proc : process(cipherkey_size_reg_225)
    begin
                ap_predicate_op133_call_state23 <= ((cipherkey_size_reg_225 = ap_const_lv6_10) or ((cipherkey_size_reg_225 = ap_const_lv6_18) or (cipherkey_size_reg_225 = ap_const_lv6_20)));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    block_1_address0_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_address0, grp_aes_main_fu_358_state_address0, grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_block_1_address0, ap_CS_fsm_state17, ap_predicate_op118_call_state17, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if (((ap_predicate_op118_call_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            block_1_address0 <= grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_block_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            block_1_address0 <= grp_aes_main_fu_358_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            block_1_address0 <= grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_address0;
        else 
            block_1_address0 <= "XXXX";
        end if; 
    end process;


    block_1_ce0_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_ce0, grp_aes_main_fu_358_state_ce0, grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_block_1_ce0, ap_CS_fsm_state17, ap_predicate_op118_call_state17, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if (((ap_predicate_op118_call_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            block_1_ce0 <= grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_block_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            block_1_ce0 <= grp_aes_main_fu_358_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            block_1_ce0 <= grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_ce0;
        else 
            block_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_1_ce1_assign_proc : process(grp_aes_main_fu_358_state_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            block_1_ce1 <= grp_aes_main_fu_358_state_ce1;
        else 
            block_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    block_1_d0_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_d0, grp_aes_main_fu_358_state_d0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            block_1_d0 <= grp_aes_main_fu_358_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            block_1_d0 <= grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_d0;
        else 
            block_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    block_1_we0_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_we0, grp_aes_main_fu_358_state_we0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            block_1_we0 <= grp_aes_main_fu_358_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            block_1_we0 <= grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_block_1_we0;
        else 
            block_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    block_1_we1_assign_proc : process(grp_aes_main_fu_358_state_we1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            block_1_we1 <= grp_aes_main_fu_358_state_we1;
        else 
            block_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    block_address0_assign_proc : process(cipherkey_size_reg_225, grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_address0, grp_aes_invMain_fu_380_state_address0, grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_block_r_address0, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and ((cipherkey_size_reg_225 = ap_const_lv6_10) or ((cipherkey_size_reg_225 = ap_const_lv6_18) or (cipherkey_size_reg_225 = ap_const_lv6_20))))) then 
            block_address0 <= grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_block_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            block_address0 <= grp_aes_invMain_fu_380_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            block_address0 <= grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_address0;
        else 
            block_address0 <= "XXXX";
        end if; 
    end process;


    block_ce0_assign_proc : process(cipherkey_size_reg_225, grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_ce0, grp_aes_invMain_fu_380_state_ce0, grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_block_r_ce0, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and ((cipherkey_size_reg_225 = ap_const_lv6_10) or ((cipherkey_size_reg_225 = ap_const_lv6_18) or (cipherkey_size_reg_225 = ap_const_lv6_20))))) then 
            block_ce0 <= grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_block_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            block_ce0 <= grp_aes_invMain_fu_380_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            block_ce0 <= grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_ce0;
        else 
            block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_ce1_assign_proc : process(grp_aes_invMain_fu_380_state_ce1, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            block_ce1 <= grp_aes_invMain_fu_380_state_ce1;
        else 
            block_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    block_d0_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_d0, grp_aes_invMain_fu_380_state_d0, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            block_d0 <= grp_aes_invMain_fu_380_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            block_d0 <= grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_d0;
        else 
            block_d0 <= "XXXXXXXX";
        end if; 
    end process;


    block_we0_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_we0, grp_aes_invMain_fu_380_state_we0, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            block_we0 <= grp_aes_invMain_fu_380_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            block_we0 <= grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_block_r_we0;
        else 
            block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    block_we1_assign_proc : process(grp_aes_invMain_fu_380_state_we1, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            block_we1 <= grp_aes_invMain_fu_380_state_we1;
        else 
            block_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_and_decryptedtext_TDATA_int_regslice_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TDATA, grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TDATA, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if (((grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ciphertext_and_decryptedtext_TDATA_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TDATA;
        elsif (((grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ciphertext_and_decryptedtext_TDATA_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TDATA;
        else 
            ciphertext_and_decryptedtext_TDATA_int_regslice <= "XXXXXXXX";
        end if; 
    end process;


    ciphertext_and_decryptedtext_TDEST_int_regslice_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TDEST, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TDEST, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if (((grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ciphertext_and_decryptedtext_TDEST_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TDEST;
        elsif (((grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ciphertext_and_decryptedtext_TDEST_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TDEST;
        else 
            ciphertext_and_decryptedtext_TDEST_int_regslice <= "X";
        end if; 
    end process;


    ciphertext_and_decryptedtext_TID_int_regslice_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TID, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TID, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if (((grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ciphertext_and_decryptedtext_TID_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TID;
        elsif (((grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ciphertext_and_decryptedtext_TID_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TID;
        else 
            ciphertext_and_decryptedtext_TID_int_regslice <= "X";
        end if; 
    end process;


    ciphertext_and_decryptedtext_TKEEP_int_regslice_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TKEEP, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TKEEP, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if (((grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ciphertext_and_decryptedtext_TKEEP_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TKEEP;
        elsif (((grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ciphertext_and_decryptedtext_TKEEP_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TKEEP;
        else 
            ciphertext_and_decryptedtext_TKEEP_int_regslice <= "X";
        end if; 
    end process;


    ciphertext_and_decryptedtext_TLAST_int_regslice_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TLAST, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TLAST, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if (((grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ciphertext_and_decryptedtext_TLAST_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TLAST;
        elsif (((grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ciphertext_and_decryptedtext_TLAST_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TLAST;
        else 
            ciphertext_and_decryptedtext_TLAST_int_regslice <= "X";
        end if; 
    end process;


    ciphertext_and_decryptedtext_TSTRB_int_regslice_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TSTRB, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TSTRB, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if (((grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ciphertext_and_decryptedtext_TSTRB_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TSTRB;
        elsif (((grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ciphertext_and_decryptedtext_TSTRB_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TSTRB;
        else 
            ciphertext_and_decryptedtext_TSTRB_int_regslice <= "X";
        end if; 
    end process;


    ciphertext_and_decryptedtext_TUSER_int_regslice_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TUSER, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TUSER, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if (((grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ciphertext_and_decryptedtext_TUSER_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TUSER;
        elsif (((grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ciphertext_and_decryptedtext_TUSER_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TUSER;
        else 
            ciphertext_and_decryptedtext_TUSER_int_regslice <= "X";
        end if; 
    end process;

    ciphertext_and_decryptedtext_TVALID <= regslice_both_ciphertext_and_decryptedtext_V_data_V_U_vld_out;

    ciphertext_and_decryptedtext_TVALID_int_regslice_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ciphertext_and_decryptedtext_TVALID_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ciphertext_and_decryptedtext_TVALID_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TVALID;
        else 
            ciphertext_and_decryptedtext_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_array_address0_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_address0, grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ciphertext_array_address0, grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_array_address0, ap_CS_fsm_state17, ap_predicate_op118_call_state17, ap_CS_fsm_state19, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ciphertext_array_address0 <= grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ciphertext_array_address0 <= grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ciphertext_array_address0;
        elsif (((ap_predicate_op118_call_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ciphertext_array_address0 <= grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_address0;
        else 
            ciphertext_array_address0 <= "XXXX";
        end if; 
    end process;


    ciphertext_array_ce0_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_ce0, grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ciphertext_array_ce0, grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_array_ce0, ap_CS_fsm_state17, ap_predicate_op118_call_state17, ap_CS_fsm_state19, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ciphertext_array_ce0 <= grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ciphertext_array_ce0 <= grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ciphertext_array_ce0;
        elsif (((ap_predicate_op118_call_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ciphertext_array_ce0 <= grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_ce0;
        else 
            ciphertext_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_array_we0_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_we0, ap_CS_fsm_state17, ap_predicate_op118_call_state17)
    begin
        if (((ap_predicate_op118_call_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ciphertext_array_we0 <= grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ciphertext_array_we0;
        else 
            ciphertext_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_array_address0_assign_proc : process(cipherkey_size_reg_225, grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_address0, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_decryptedtext_array_address0, ap_CS_fsm_state23, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            decryptedtext_array_address0 <= grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_decryptedtext_array_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and ((cipherkey_size_reg_225 = ap_const_lv6_10) or ((cipherkey_size_reg_225 = ap_const_lv6_18) or (cipherkey_size_reg_225 = ap_const_lv6_20))))) then 
            decryptedtext_array_address0 <= grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_address0;
        else 
            decryptedtext_array_address0 <= "XXXX";
        end if; 
    end process;


    decryptedtext_array_ce0_assign_proc : process(cipherkey_size_reg_225, grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_ce0, grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_decryptedtext_array_ce0, ap_CS_fsm_state23, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            decryptedtext_array_ce0 <= grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_decryptedtext_array_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and ((cipherkey_size_reg_225 = ap_const_lv6_10) or ((cipherkey_size_reg_225 = ap_const_lv6_18) or (cipherkey_size_reg_225 = ap_const_lv6_20))))) then 
            decryptedtext_array_ce0 <= grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_ce0;
        else 
            decryptedtext_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_array_we0_assign_proc : process(cipherkey_size_reg_225, grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_we0, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and ((cipherkey_size_reg_225 = ap_const_lv6_10) or ((cipherkey_size_reg_225 = ap_const_lv6_18) or (cipherkey_size_reg_225 = ap_const_lv6_20))))) then 
            decryptedtext_array_we0 <= grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_decryptedtext_array_we0;
        else 
            decryptedtext_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    expandedKeySize_1_fu_485_p2 <= (shl_ln5_fu_477_p3 or ap_const_lv8_10);
    expandedKeySize_fu_470_p2 <= (shl_ln_fu_462_p3 or ap_const_lv8_10);

    expandedKey_1_address0_assign_proc : process(grp_expandKey_fu_343_expandedKey_address0, grp_aes_main_fu_358_expandedKey_address0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            expandedKey_1_address0 <= grp_aes_main_fu_358_expandedKey_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            expandedKey_1_address0 <= grp_expandKey_fu_343_expandedKey_address0;
        else 
            expandedKey_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_1_ce0_assign_proc : process(grp_expandKey_fu_343_expandedKey_ce0, grp_aes_main_fu_358_expandedKey_ce0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            expandedKey_1_ce0 <= grp_aes_main_fu_358_expandedKey_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            expandedKey_1_ce0 <= grp_expandKey_fu_343_expandedKey_ce0;
        else 
            expandedKey_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_ce1_assign_proc : process(grp_expandKey_fu_343_expandedKey_ce1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            expandedKey_1_ce1 <= grp_expandKey_fu_343_expandedKey_ce1;
        else 
            expandedKey_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_we0_assign_proc : process(grp_expandKey_fu_343_expandedKey_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            expandedKey_1_we0 <= grp_expandKey_fu_343_expandedKey_we0;
        else 
            expandedKey_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_address0_assign_proc : process(grp_expandKey_fu_343_expandedKey_address0, grp_aes_invMain_fu_380_expandedKey_address0, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            expandedKey_address0 <= grp_aes_invMain_fu_380_expandedKey_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            expandedKey_address0 <= grp_expandKey_fu_343_expandedKey_address0;
        else 
            expandedKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_ce0_assign_proc : process(grp_expandKey_fu_343_expandedKey_ce0, grp_aes_invMain_fu_380_expandedKey_ce0, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            expandedKey_ce0 <= grp_aes_invMain_fu_380_expandedKey_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            expandedKey_ce0 <= grp_expandKey_fu_343_expandedKey_ce0;
        else 
            expandedKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_ce1_assign_proc : process(grp_expandKey_fu_343_expandedKey_ce1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            expandedKey_ce1 <= grp_expandKey_fu_343_expandedKey_ce1;
        else 
            expandedKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_we0_assign_proc : process(grp_expandKey_fu_343_expandedKey_we0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            expandedKey_we0 <= grp_expandKey_fu_343_expandedKey_we0;
        else 
            expandedKey_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes_Pipeline_1_fu_273_ap_start <= grp_aes_Pipeline_1_fu_273_ap_start_reg;
    grp_aes_Pipeline_2_fu_279_ap_start <= grp_aes_Pipeline_2_fu_279_ap_start_reg;
    grp_aes_Pipeline_3_fu_284_ap_start <= grp_aes_Pipeline_3_fu_284_ap_start_reg;
    grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_start <= grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_ap_start_reg;
    grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_start <= grp_aes_Pipeline_VITIS_LOOP_489_3_VITIS_LOOP_492_4_fu_368_ap_start_reg;
    grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_start <= grp_aes_Pipeline_VITIS_LOOP_665_1_VITIS_LOOP_668_2_fu_374_ap_start_reg;
    grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_start <= grp_aes_Pipeline_VITIS_LOOP_679_3_VITIS_LOOP_682_4_fu_390_ap_start_reg;
    grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_start <= grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_ap_start_reg;
    grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_start <= grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_ap_start_reg;
    grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_start <= grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ap_start_reg;
    grp_aes_Pipeline_VITIS_LOOP_85_4_fu_396_ciphertext_and_decryptedtext_TREADY <= (ciphertext_and_decryptedtext_TREADY_int_regslice and ap_CS_fsm_state24);
    grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_start <= grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ap_start_reg;
    grp_aes_Pipeline_VITIS_LOOP_94_5_fu_420_ciphertext_and_decryptedtext_TREADY <= (ciphertext_and_decryptedtext_TREADY_int_regslice and ap_CS_fsm_state27);
    grp_aes_invMain_fu_380_ap_start <= grp_aes_invMain_fu_380_ap_start_reg;
    grp_aes_main_fu_358_ap_start <= grp_aes_main_fu_358_ap_start_reg;
    grp_expandKey_fu_343_ap_start <= grp_expandKey_fu_343_ap_start_reg;

    grp_expandKey_fu_343_expandedKeySize_assign_proc : process(expandedKeySize_reg_550, expandedKeySize_1_reg_555, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_expandKey_fu_343_expandedKeySize <= expandedKeySize_1_reg_555;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_expandKey_fu_343_expandedKeySize <= expandedKeySize_reg_550;
        else 
            grp_expandKey_fu_343_expandedKeySize <= "XXXXXXXX";
        end if; 
    end process;


    grp_expandKey_fu_343_expandedKey_q0_assign_proc : process(expandedKey_q0, expandedKey_1_q0, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_expandKey_fu_343_expandedKey_q0 <= expandedKey_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_expandKey_fu_343_expandedKey_q0 <= expandedKey_1_q0;
        else 
            grp_expandKey_fu_343_expandedKey_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_expandKey_fu_343_expandedKey_q1_assign_proc : process(expandedKey_q1, expandedKey_1_q1, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_expandKey_fu_343_expandedKey_q1 <= expandedKey_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_expandKey_fu_343_expandedKey_q1 <= expandedKey_1_q1;
        else 
            grp_expandKey_fu_343_expandedKey_q1 <= "XXXXXXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_560_a_assign_proc : process(grp_aes_main_fu_358_grp_galois_multiplication_fu_560_p_din1, grp_aes_invMain_fu_380_grp_galois_multiplication_fu_560_p_din1, ap_CS_fsm_state15, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_galois_multiplication_fu_560_a <= grp_aes_invMain_fu_380_grp_galois_multiplication_fu_560_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_galois_multiplication_fu_560_a <= grp_aes_main_fu_358_grp_galois_multiplication_fu_560_p_din1;
        else 
            grp_galois_multiplication_fu_560_a <= "XXXXXXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_560_b_assign_proc : process(grp_aes_main_fu_358_grp_galois_multiplication_fu_560_p_din2, grp_aes_invMain_fu_380_grp_galois_multiplication_fu_560_p_din2, ap_CS_fsm_state15, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_galois_multiplication_fu_560_b <= grp_aes_invMain_fu_380_grp_galois_multiplication_fu_560_p_din2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_galois_multiplication_fu_560_b <= grp_aes_main_fu_358_grp_galois_multiplication_fu_560_p_din2;
        else 
            grp_galois_multiplication_fu_560_b <= "XXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_565_a_assign_proc : process(grp_aes_main_fu_358_grp_galois_multiplication_fu_565_p_din1, grp_aes_invMain_fu_380_grp_galois_multiplication_fu_565_p_din1, ap_CS_fsm_state15, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_galois_multiplication_fu_565_a <= grp_aes_invMain_fu_380_grp_galois_multiplication_fu_565_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_galois_multiplication_fu_565_a <= grp_aes_main_fu_358_grp_galois_multiplication_fu_565_p_din1;
        else 
            grp_galois_multiplication_fu_565_a <= "XXXXXXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_565_b_assign_proc : process(grp_aes_main_fu_358_grp_galois_multiplication_fu_565_p_din2, grp_aes_invMain_fu_380_grp_galois_multiplication_fu_565_p_din2, ap_CS_fsm_state15, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_galois_multiplication_fu_565_b <= grp_aes_invMain_fu_380_grp_galois_multiplication_fu_565_p_din2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_galois_multiplication_fu_565_b <= grp_aes_main_fu_358_grp_galois_multiplication_fu_565_p_din2;
        else 
            grp_galois_multiplication_fu_565_b <= "XXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_570_a_assign_proc : process(grp_aes_main_fu_358_grp_galois_multiplication_fu_570_p_din1, grp_aes_invMain_fu_380_grp_galois_multiplication_fu_570_p_din1, ap_CS_fsm_state15, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_galois_multiplication_fu_570_a <= grp_aes_invMain_fu_380_grp_galois_multiplication_fu_570_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_galois_multiplication_fu_570_a <= grp_aes_main_fu_358_grp_galois_multiplication_fu_570_p_din1;
        else 
            grp_galois_multiplication_fu_570_a <= "XXXXXXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_570_b_assign_proc : process(grp_aes_main_fu_358_grp_galois_multiplication_fu_570_p_din2, grp_aes_invMain_fu_380_grp_galois_multiplication_fu_570_p_din2, ap_CS_fsm_state15, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_galois_multiplication_fu_570_b <= grp_aes_invMain_fu_380_grp_galois_multiplication_fu_570_p_din2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_galois_multiplication_fu_570_b <= grp_aes_main_fu_358_grp_galois_multiplication_fu_570_p_din2;
        else 
            grp_galois_multiplication_fu_570_b <= "XXXX";
        end if; 
    end process;

    key_and_plaintext_TREADY <= regslice_both_key_and_plaintext_V_data_V_U_ack_in;

    key_and_plaintext_TREADY_int_regslice_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_and_plaintext_TREADY, grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_key_and_plaintext_TREADY, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            key_and_plaintext_TREADY_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_key_and_plaintext_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            key_and_plaintext_TREADY_int_regslice <= grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_and_plaintext_TREADY;
        else 
            key_and_plaintext_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    key_array128_address0_assign_proc : process(grp_aes_Pipeline_1_fu_273_key_array128_address0, grp_aes_Pipeline_2_fu_279_key_array128_address0, grp_aes_Pipeline_3_fu_284_key_array128_address0, grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_address0, grp_expandKey_fu_343_key_array128_address0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            key_array128_address0 <= grp_expandKey_fu_343_key_array128_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            key_array128_address0 <= grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            key_array128_address0 <= grp_aes_Pipeline_3_fu_284_key_array128_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            key_array128_address0 <= grp_aes_Pipeline_2_fu_279_key_array128_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_array128_address0 <= grp_aes_Pipeline_1_fu_273_key_array128_address0;
        else 
            key_array128_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    key_array128_ce0_assign_proc : process(grp_aes_Pipeline_1_fu_273_key_array128_ce0, grp_aes_Pipeline_2_fu_279_key_array128_ce0, grp_aes_Pipeline_3_fu_284_key_array128_ce0, grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_ce0, grp_expandKey_fu_343_key_array128_ce0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            key_array128_ce0 <= grp_expandKey_fu_343_key_array128_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            key_array128_ce0 <= grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            key_array128_ce0 <= grp_aes_Pipeline_3_fu_284_key_array128_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            key_array128_ce0 <= grp_aes_Pipeline_2_fu_279_key_array128_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_array128_ce0 <= grp_aes_Pipeline_1_fu_273_key_array128_ce0;
        else 
            key_array128_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_array128_d0_assign_proc : process(grp_aes_Pipeline_1_fu_273_key_array128_d0, grp_aes_Pipeline_2_fu_279_key_array128_d0, grp_aes_Pipeline_3_fu_284_key_array128_d0, grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_d0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            key_array128_d0 <= grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            key_array128_d0 <= grp_aes_Pipeline_3_fu_284_key_array128_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            key_array128_d0 <= grp_aes_Pipeline_2_fu_279_key_array128_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_array128_d0 <= grp_aes_Pipeline_1_fu_273_key_array128_d0;
        else 
            key_array128_d0 <= "XXXXXXXX";
        end if; 
    end process;


    key_array128_we0_assign_proc : process(grp_aes_Pipeline_1_fu_273_key_array128_we0, grp_aes_Pipeline_2_fu_279_key_array128_we0, grp_aes_Pipeline_3_fu_284_key_array128_we0, grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_we0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            key_array128_we0 <= grp_aes_Pipeline_VITIS_LOOP_70_2_fu_289_key_array128_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            key_array128_we0 <= grp_aes_Pipeline_3_fu_284_key_array128_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            key_array128_we0 <= grp_aes_Pipeline_2_fu_279_key_array128_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_array128_we0 <= grp_aes_Pipeline_1_fu_273_key_array128_we0;
        else 
            key_array128_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mode_read_read_fu_204_p2 <= mode;

    plaintext_array_address0_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_address0, grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_plaintext_array_address0, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            plaintext_array_address0 <= grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_plaintext_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            plaintext_array_address0 <= grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_address0;
        else 
            plaintext_array_address0 <= "XXXX";
        end if; 
    end process;


    plaintext_array_ce0_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_ce0, grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_plaintext_array_ce0, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            plaintext_array_ce0 <= grp_aes_Pipeline_VITIS_LOOP_475_1_VITIS_LOOP_478_2_fu_337_plaintext_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            plaintext_array_ce0 <= grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_ce0;
        else 
            plaintext_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    plaintext_array_we0_assign_proc : process(grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            plaintext_array_we0 <= grp_aes_Pipeline_VITIS_LOOP_75_3_fu_312_plaintext_array_we0;
        else 
            plaintext_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln5_fu_477_p3 <= (nbrRounds_1_reg_255 & ap_const_lv4_0);
    shl_ln_fu_462_p3 <= (ap_phi_mux_nbrRounds_phi_fu_243_p6 & ap_const_lv4_0);
end behav;
