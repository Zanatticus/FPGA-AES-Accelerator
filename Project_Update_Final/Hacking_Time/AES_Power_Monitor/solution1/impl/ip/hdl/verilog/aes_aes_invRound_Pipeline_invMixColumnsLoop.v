// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_aes_invRound_Pipeline_invMixColumnsLoop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        grp_galois_multiplication_fu_329_p_din1,
        grp_galois_multiplication_fu_329_p_din2,
        grp_galois_multiplication_fu_329_p_dout0,
        grp_galois_multiplication_fu_329_p_ready,
        grp_galois_multiplication_fu_334_p_din1,
        grp_galois_multiplication_fu_334_p_din2,
        grp_galois_multiplication_fu_334_p_dout0,
        grp_galois_multiplication_fu_334_p_ready,
        grp_galois_multiplication_fu_339_p_din1,
        grp_galois_multiplication_fu_339_p_din2,
        grp_galois_multiplication_fu_339_p_dout0,
        grp_galois_multiplication_fu_339_p_ready
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [7:0] grp_galois_multiplication_fu_329_p_din1;
output  [3:0] grp_galois_multiplication_fu_329_p_din2;
input  [7:0] grp_galois_multiplication_fu_329_p_dout0;
input   grp_galois_multiplication_fu_329_p_ready;
output  [7:0] grp_galois_multiplication_fu_334_p_din1;
output  [3:0] grp_galois_multiplication_fu_334_p_din2;
input  [7:0] grp_galois_multiplication_fu_334_p_dout0;
input   grp_galois_multiplication_fu_334_p_ready;
output  [7:0] grp_galois_multiplication_fu_339_p_din1;
output  [3:0] grp_galois_multiplication_fu_339_p_din2;
input  [7:0] grp_galois_multiplication_fu_339_p_dout0;
input   grp_galois_multiplication_fu_339_p_ready;

reg ap_idle;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln542_fu_128_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
reg   [2:0] i_13_reg_256;
reg   [3:0] state_addr_reg_264;
wire  signed [2:0] xor_ln548_fu_145_p2;
reg  signed [2:0] xor_ln548_reg_269;
reg   [3:0] state_addr_9_reg_274;
reg   [7:0] cpy_reg_279;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [7:0] cpy_4_reg_286;
reg   [3:0] state_addr_10_reg_292;
reg   [3:0] state_addr_11_reg_298;
reg   [7:0] cpy_5_reg_304;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [7:0] cpy_6_reg_311;
reg   [7:0] tmp_s_reg_318;
wire   [7:0] grp_galois_multiplication_fu_94_ap_return;
reg   [7:0] tmp_13_reg_323;
reg   [7:0] tmp_14_reg_328;
reg   [7:0] tmp_15_reg_333;
wire   [7:0] xor_ln572_fu_191_p2;
reg   [7:0] xor_ln572_reg_338;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire   [7:0] xor_ln576_fu_207_p2;
reg   [7:0] xor_ln576_reg_343;
wire   [7:0] xor_ln580_fu_225_p2;
reg   [7:0] xor_ln580_reg_348;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire   [7:0] xor_ln584_fu_243_p2;
reg   [7:0] xor_ln584_reg_353;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
reg   [7:0] grp_galois_multiplication_fu_87_a;
reg   [3:0] grp_galois_multiplication_fu_87_b;
wire    grp_galois_multiplication_fu_94_ap_ready;
reg   [7:0] grp_galois_multiplication_fu_94_a;
reg   [3:0] grp_galois_multiplication_fu_94_b;
reg   [7:0] grp_galois_multiplication_fu_101_a;
reg   [3:0] grp_galois_multiplication_fu_101_b;
reg   [7:0] grp_galois_multiplication_fu_108_a;
reg   [3:0] grp_galois_multiplication_fu_108_b;
wire   [63:0] zext_ln542_fu_140_p1;
wire   [63:0] zext_ln548_fu_151_p1;
wire   [63:0] zext_ln548_1_fu_168_p1;
wire   [63:0] zext_ln548_2_fu_176_p1;
reg   [2:0] i_fu_42;
wire   [2:0] add_ln542_fu_134_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_13;
wire   [3:0] zext_ln548_1_cast_fu_161_p3;
wire  signed [3:0] sext_ln548_fu_173_p1;
wire   [7:0] xor_ln572_1_fu_186_p2;
wire   [7:0] xor_ln572_2_fu_181_p2;
wire   [7:0] xor_ln576_2_fu_201_p2;
wire   [7:0] xor_ln576_1_fu_197_p2;
wire   [7:0] xor_ln580_2_fu_219_p2;
wire   [7:0] xor_ln580_1_fu_213_p2;
wire   [7:0] xor_ln584_1_fu_237_p2;
wire   [7:0] xor_ln584_2_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_done_reg = 1'b0;
end

aes_galois_multiplication grp_galois_multiplication_fu_94(
    .ap_ready(grp_galois_multiplication_fu_94_ap_ready),
    .a(grp_galois_multiplication_fu_94_a),
    .b(grp_galois_multiplication_fu_94_b),
    .ap_return(grp_galois_multiplication_fu_94_ap_return)
);

aes_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln542_fu_128_p2 == 1'd0)) begin
            i_fu_42 <= add_ln542_fu_134_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cpy_4_reg_286 <= state_q0;
        cpy_reg_279 <= state_q1;
        state_addr_10_reg_292[2 : 0] <= zext_ln548_1_fu_168_p1[2 : 0];
        state_addr_11_reg_298 <= zext_ln548_2_fu_176_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cpy_5_reg_304 <= state_q1;
        cpy_6_reg_311 <= state_q0;
        tmp_13_reg_323 <= grp_galois_multiplication_fu_94_ap_return;
        tmp_14_reg_328 <= grp_galois_multiplication_fu_329_p_dout0;
        tmp_15_reg_333 <= grp_galois_multiplication_fu_334_p_dout0;
        tmp_s_reg_318 <= grp_galois_multiplication_fu_339_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_13_reg_256 <= ap_sig_allocacmp_i_13;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln542_fu_128_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_addr_9_reg_274[2 : 0] <= zext_ln548_fu_151_p1[2 : 0];
        state_addr_reg_264[2 : 0] <= zext_ln542_fu_140_p1[2 : 0];
        xor_ln548_reg_269 <= xor_ln548_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xor_ln572_reg_338 <= xor_ln572_fu_191_p2;
        xor_ln576_reg_343 <= xor_ln576_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xor_ln580_reg_348 <= xor_ln580_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        xor_ln584_reg_353 <= xor_ln584_fu_243_p2;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln542_fu_128_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_13 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_13 = i_fu_42;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_galois_multiplication_fu_101_a = cpy_reg_279;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_galois_multiplication_fu_101_a = cpy_6_reg_311;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_galois_multiplication_fu_101_a = cpy_4_reg_286;
    end else begin
        grp_galois_multiplication_fu_101_a = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_galois_multiplication_fu_101_b = 4'd13;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_galois_multiplication_fu_101_b = 4'd14;
    end else begin
        grp_galois_multiplication_fu_101_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_galois_multiplication_fu_108_a = cpy_6_reg_311;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_galois_multiplication_fu_108_a = cpy_5_reg_304;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_galois_multiplication_fu_108_a = cpy_reg_279;
    end else begin
        grp_galois_multiplication_fu_108_a = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_galois_multiplication_fu_108_b = 4'd11;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_galois_multiplication_fu_108_b = 4'd9;
    end else begin
        grp_galois_multiplication_fu_108_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_galois_multiplication_fu_87_a = cpy_5_reg_304;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_galois_multiplication_fu_87_a = cpy_6_reg_311;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_galois_multiplication_fu_87_a = cpy_reg_279;
    end else begin
        grp_galois_multiplication_fu_87_a = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_galois_multiplication_fu_87_b = 4'd9;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_galois_multiplication_fu_87_b = 4'd14;
    end else begin
        grp_galois_multiplication_fu_87_b = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_galois_multiplication_fu_94_a = cpy_5_reg_304;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_galois_multiplication_fu_94_a = cpy_4_reg_286;
    end else begin
        grp_galois_multiplication_fu_94_a = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_galois_multiplication_fu_94_b = 4'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_galois_multiplication_fu_94_b = 4'd13;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_galois_multiplication_fu_94_b = 4'd11;
    end else begin
        grp_galois_multiplication_fu_94_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = state_addr_10_reg_292;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = state_addr_9_reg_274;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = zext_ln548_2_fu_176_p1;
    end else if (((icmp_ln542_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        state_address0 = zext_ln548_fu_151_p1;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = state_addr_11_reg_298;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = state_addr_reg_264;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = zext_ln548_1_fu_168_p1;
    end else if (((icmp_ln542_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        state_address1 = zext_ln542_fu_140_p1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln542_fu_128_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln542_fu_128_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_d0 = xor_ln580_reg_348;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_d0 = xor_ln576_reg_343;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_d1 = xor_ln584_reg_353;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_d1 = xor_ln572_reg_338;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln542_fu_128_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln542_fu_134_p2 = (ap_sig_allocacmp_i_13 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_galois_multiplication_fu_329_p_din1 = grp_galois_multiplication_fu_101_a;

assign grp_galois_multiplication_fu_329_p_din2 = grp_galois_multiplication_fu_101_b;

assign grp_galois_multiplication_fu_334_p_din1 = grp_galois_multiplication_fu_108_a;

assign grp_galois_multiplication_fu_334_p_din2 = grp_galois_multiplication_fu_108_b;

assign grp_galois_multiplication_fu_339_p_din1 = grp_galois_multiplication_fu_87_a;

assign grp_galois_multiplication_fu_339_p_din2 = grp_galois_multiplication_fu_87_b;

assign icmp_ln542_fu_128_p2 = ((ap_sig_allocacmp_i_13 == 3'd4) ? 1'b1 : 1'b0);

assign sext_ln548_fu_173_p1 = xor_ln548_reg_269;

assign xor_ln548_fu_145_p2 = (ap_sig_allocacmp_i_13 ^ 3'd4);

assign xor_ln572_1_fu_186_p2 = (tmp_s_reg_318 ^ grp_galois_multiplication_fu_339_p_dout0);

assign xor_ln572_2_fu_181_p2 = (tmp_13_reg_323 ^ grp_galois_multiplication_fu_94_ap_return);

assign xor_ln572_fu_191_p2 = (xor_ln572_2_fu_181_p2 ^ xor_ln572_1_fu_186_p2);

assign xor_ln576_1_fu_197_p2 = (tmp_15_reg_333 ^ tmp_14_reg_328);

assign xor_ln576_2_fu_201_p2 = (grp_galois_multiplication_fu_334_p_dout0 ^ grp_galois_multiplication_fu_329_p_dout0);

assign xor_ln576_fu_207_p2 = (xor_ln576_2_fu_201_p2 ^ xor_ln576_1_fu_197_p2);

assign xor_ln580_1_fu_213_p2 = (grp_galois_multiplication_fu_94_ap_return ^ grp_galois_multiplication_fu_339_p_dout0);

assign xor_ln580_2_fu_219_p2 = (grp_galois_multiplication_fu_334_p_dout0 ^ grp_galois_multiplication_fu_329_p_dout0);

assign xor_ln580_fu_225_p2 = (xor_ln580_2_fu_219_p2 ^ xor_ln580_1_fu_213_p2);

assign xor_ln584_1_fu_237_p2 = (grp_galois_multiplication_fu_94_ap_return ^ grp_galois_multiplication_fu_339_p_dout0);

assign xor_ln584_2_fu_231_p2 = (grp_galois_multiplication_fu_334_p_dout0 ^ grp_galois_multiplication_fu_329_p_dout0);

assign xor_ln584_fu_243_p2 = (xor_ln584_2_fu_231_p2 ^ xor_ln584_1_fu_237_p2);

assign zext_ln542_fu_140_p1 = ap_sig_allocacmp_i_13;

assign zext_ln548_1_cast_fu_161_p3 = {{1'd1}, {i_13_reg_256}};

assign zext_ln548_1_fu_168_p1 = zext_ln548_1_cast_fu_161_p3;

assign zext_ln548_2_fu_176_p1 = $unsigned(sext_ln548_fu_173_p1);

assign zext_ln548_fu_151_p1 = $unsigned(xor_ln548_fu_145_p2);

always @ (posedge ap_clk) begin
    state_addr_reg_264[3] <= 1'b0;
    state_addr_9_reg_274[3] <= 1'b0;
    state_addr_10_reg_292[3] <= 1'b1;
end

endmodule //aes_aes_invRound_Pipeline_invMixColumnsLoop
