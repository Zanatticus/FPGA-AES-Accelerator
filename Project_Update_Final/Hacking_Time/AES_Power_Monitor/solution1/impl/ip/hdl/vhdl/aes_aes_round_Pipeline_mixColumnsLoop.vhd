-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_aes_round_Pipeline_mixColumnsLoop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_349_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_349_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
    grp_galois_multiplication_fu_349_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_349_p_ready : IN STD_LOGIC;
    grp_galois_multiplication_fu_354_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_354_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
    grp_galois_multiplication_fu_354_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_354_p_ready : IN STD_LOGIC;
    grp_galois_multiplication_fu_359_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_359_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
    grp_galois_multiplication_fu_359_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_359_p_ready : IN STD_LOGIC );
end;


architecture behav of aes_aes_round_Pipeline_mixColumnsLoop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln337_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal reg_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal i_2_reg_247 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_addr_reg_255 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln343_fu_139_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln343_reg_260 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_addr_1_reg_265 : STD_LOGIC_VECTOR (3 downto 0);
    signal cpy_reg_270 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal cpy_1_reg_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_2_reg_283 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_3_reg_288 : STD_LOGIC_VECTOR (3 downto 0);
    signal cpy_2_reg_293 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_3_reg_299 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_305 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_310 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_316 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln372_fu_186_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln372_reg_321 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln367_fu_202_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln367_reg_326 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal tmp_7_reg_331 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_336 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln377_fu_217_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln377_reg_342 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal xor_ln382_fu_234_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln382_reg_347 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplication_fu_85_a : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplication_fu_85_b : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_galois_multiplication_fu_92_a : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplication_fu_92_b : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_galois_multiplication_fu_99_a : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplication_fu_99_b : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln337_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln343_fu_145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln343_1_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln343_2_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_40 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln337_fu_128_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln343_1_cast_fu_155_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln343_fu_167_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln372_1_fu_180_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln372_2_fu_175_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln367_1_fu_198_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln367_2_fu_192_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln377_2_fu_212_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln377_1_fu_208_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln382_2_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln382_1_fu_223_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes_galois_multiplication IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (7 downto 0);
        b : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component aes_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln337_fu_122_p2 = ap_const_lv1_0)) then 
                    i_fu_40 <= add_ln337_fu_128_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_40 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cpy_1_reg_276 <= state_q0;
                cpy_reg_270 <= state_q1;
                    state_addr_2_reg_283(2 downto 0) <= zext_ln343_1_fu_162_p1(4 - 1 downto 0)(2 downto 0);
                state_addr_3_reg_288 <= zext_ln343_2_fu_170_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                cpy_2_reg_293 <= state_q1;
                cpy_3_reg_299 <= state_q0;
                tmp_5_reg_310 <= grp_galois_multiplication_fu_359_p_dout0;
                tmp_reg_305 <= grp_galois_multiplication_fu_349_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_2_reg_247 <= ap_sig_allocacmp_i_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_110 <= grp_galois_multiplication_fu_354_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln337_fu_122_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    state_addr_1_reg_265(2 downto 0) <= zext_ln343_fu_145_p1(4 - 1 downto 0)(2 downto 0);
                    state_addr_reg_255(2 downto 0) <= zext_ln337_fu_134_p1(4 - 1 downto 0)(2 downto 0);
                xor_ln343_reg_260 <= xor_ln343_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_1_reg_316 <= grp_galois_multiplication_fu_349_p_dout0;
                xor_ln372_reg_321 <= xor_ln372_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_7_reg_331 <= grp_galois_multiplication_fu_354_p_dout0;
                tmp_8_reg_336 <= grp_galois_multiplication_fu_359_p_dout0;
                xor_ln367_reg_326 <= xor_ln367_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                xor_ln377_reg_342 <= xor_ln377_fu_217_p2;
                xor_ln382_reg_347 <= xor_ln382_fu_234_p2;
            end if;
        end if;
    end process;
    state_addr_reg_255(3) <= '0';
    state_addr_1_reg_265(3) <= '0';
    state_addr_2_reg_283(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln337_fu_122_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln337_fu_122_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln337_fu_128_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln337_fu_122_p2, ap_start_int)
    begin
        if (((icmp_ln337_fu_122_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_state1, i_fu_40, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_40;
        end if; 
    end process;

    grp_galois_multiplication_fu_349_p_din1 <= grp_galois_multiplication_fu_85_a;
    grp_galois_multiplication_fu_349_p_din2 <= grp_galois_multiplication_fu_85_b;
    grp_galois_multiplication_fu_354_p_din1 <= grp_galois_multiplication_fu_92_a;
    grp_galois_multiplication_fu_354_p_din2 <= grp_galois_multiplication_fu_92_b;
    grp_galois_multiplication_fu_359_p_din1 <= grp_galois_multiplication_fu_99_a;
    grp_galois_multiplication_fu_359_p_din2 <= grp_galois_multiplication_fu_99_b;

    grp_galois_multiplication_fu_85_a_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, cpy_reg_270, cpy_1_reg_276, cpy_3_reg_299, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_galois_multiplication_fu_85_a <= cpy_1_reg_276;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_galois_multiplication_fu_85_a <= cpy_3_reg_299;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_galois_multiplication_fu_85_a <= cpy_reg_270;
        else 
            grp_galois_multiplication_fu_85_a <= "XXXXXXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_85_b_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_galois_multiplication_fu_85_b <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_galois_multiplication_fu_85_b <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_galois_multiplication_fu_85_b <= ap_const_lv4_2;
        else 
            grp_galois_multiplication_fu_85_b <= "XXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_92_a_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, cpy_1_reg_276, cpy_2_reg_293, cpy_3_reg_299, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_galois_multiplication_fu_92_a <= cpy_3_reg_299;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_galois_multiplication_fu_92_a <= cpy_2_reg_293;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_galois_multiplication_fu_92_a <= cpy_1_reg_276;
        else 
            grp_galois_multiplication_fu_92_a <= "XXXXXXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_92_b_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_galois_multiplication_fu_92_b <= ap_const_lv4_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_galois_multiplication_fu_92_b <= ap_const_lv4_2;
        else 
            grp_galois_multiplication_fu_92_b <= "XXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_99_a_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, cpy_reg_270, cpy_1_reg_276, cpy_2_reg_293, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_galois_multiplication_fu_99_a <= cpy_1_reg_276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_galois_multiplication_fu_99_a <= cpy_2_reg_293;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_galois_multiplication_fu_99_a <= cpy_reg_270;
        else 
            grp_galois_multiplication_fu_99_a <= "XXXXXXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_99_b_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_galois_multiplication_fu_99_b <= ap_const_lv4_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_galois_multiplication_fu_99_b <= ap_const_lv4_1;
        else 
            grp_galois_multiplication_fu_99_b <= "XXXX";
        end if; 
    end process;

    icmp_ln337_fu_122_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv3_4) else "0";
        sext_ln343_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln343_reg_260),4));


    state_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln337_fu_122_p2, ap_CS_fsm_state7, state_addr_1_reg_265, ap_CS_fsm_state2, state_addr_3_reg_288, ap_CS_fsm_state5, zext_ln343_fu_145_p1, zext_ln343_2_fu_170_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= state_addr_3_reg_288;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= state_addr_1_reg_265;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= zext_ln343_2_fu_170_p1(4 - 1 downto 0);
        elsif (((icmp_ln337_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            state_address0 <= zext_ln343_fu_145_p1(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln337_fu_122_p2, ap_CS_fsm_state7, state_addr_reg_255, ap_CS_fsm_state2, state_addr_2_reg_283, ap_CS_fsm_state6, zext_ln337_fu_134_p1, zext_ln343_1_fu_162_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= state_addr_2_reg_283;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1 <= state_addr_reg_255;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= zext_ln343_1_fu_162_p1(4 - 1 downto 0);
        elsif (((icmp_ln337_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            state_address1 <= zext_ln337_fu_134_p1(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln337_fu_122_p2, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln337_fu_122_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln337_fu_122_p2, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln337_fu_122_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_CS_fsm_state7, xor_ln372_reg_321, ap_CS_fsm_state5, xor_ln382_reg_347)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_d0 <= xor_ln382_reg_347;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_d0 <= xor_ln372_reg_321;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(ap_CS_fsm_state7, xor_ln367_reg_326, xor_ln377_reg_342, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_d1 <= xor_ln377_reg_342;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_d1 <= xor_ln367_reg_326;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln343_fu_139_p2 <= (ap_sig_allocacmp_i_2 xor ap_const_lv3_4);
    xor_ln367_1_fu_198_p2 <= (tmp_reg_305 xor tmp_1_reg_316);
    xor_ln367_2_fu_192_p2 <= (reg_110 xor grp_galois_multiplication_fu_349_p_dout0);
    xor_ln367_fu_202_p2 <= (xor_ln367_2_fu_192_p2 xor xor_ln367_1_fu_198_p2);
    xor_ln372_1_fu_180_p2 <= (reg_110 xor grp_galois_multiplication_fu_349_p_dout0);
    xor_ln372_2_fu_175_p2 <= (tmp_5_reg_310 xor grp_galois_multiplication_fu_359_p_dout0);
    xor_ln372_fu_186_p2 <= (xor_ln372_2_fu_175_p2 xor xor_ln372_1_fu_180_p2);
    xor_ln377_1_fu_208_p2 <= (tmp_7_reg_331 xor tmp_5_reg_310);
    xor_ln377_2_fu_212_p2 <= (tmp_8_reg_336 xor grp_galois_multiplication_fu_349_p_dout0);
    xor_ln377_fu_217_p2 <= (xor_ln377_2_fu_212_p2 xor xor_ln377_1_fu_208_p2);
    xor_ln382_1_fu_223_p2 <= (tmp_8_reg_336 xor reg_110);
    xor_ln382_2_fu_228_p2 <= (grp_galois_multiplication_fu_359_p_dout0 xor grp_galois_multiplication_fu_354_p_dout0);
    xor_ln382_fu_234_p2 <= (xor_ln382_2_fu_228_p2 xor xor_ln382_1_fu_223_p2);
    zext_ln337_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),64));
    zext_ln343_1_cast_fu_155_p3 <= (ap_const_lv1_1 & i_2_reg_247);
    zext_ln343_1_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln343_1_cast_fu_155_p3),64));
    zext_ln343_2_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln343_fu_167_p1),64));
    zext_ln343_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln343_fu_139_p2),64));
end behav;
