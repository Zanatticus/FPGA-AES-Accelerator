-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_aes_round is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    roundKey_ce0 : OUT STD_LOGIC;
    roundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_626_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_626_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
    grp_galois_multiplication_fu_626_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_626_p_ready : IN STD_LOGIC;
    grp_galois_multiplication_fu_631_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_631_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
    grp_galois_multiplication_fu_631_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_631_p_ready : IN STD_LOGIC;
    grp_galois_multiplication_fu_636_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_636_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
    grp_galois_multiplication_fu_636_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
    grp_galois_multiplication_fu_636_p_ready : IN STD_LOGIC );
end;


architecture behav of aes_aes_round is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_5_fu_194_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_286 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln_fu_204_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_291 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln285_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_1_reg_297 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln296_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln296_reg_302 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_reg_306 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_4_reg_311 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal state_addr_5_reg_316 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_4_reg_321 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_reg_326 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln296_fu_263_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_start : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_done : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_idle : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_ready : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_ce0 : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_we0 : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_ce1 : STD_LOGIC;
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_start : STD_LOGIC;
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_done : STD_LOGIC;
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_idle : STD_LOGIC;
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_ready : STD_LOGIC;
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_ce0 : STD_LOGIC;
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_we0 : STD_LOGIC;
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_ce1 : STD_LOGIC;
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_we1 : STD_LOGIC;
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_349_p_din1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_349_p_din2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_354_p_din1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_354_p_din2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_359_p_din1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_359_p_din2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_start : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_done : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_idle : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_ready : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_ce0 : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_we0 : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_ce1 : STD_LOGIC;
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_roundKey_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_roundKey_ce0 : STD_LOGIC;
    signal i_3_reg_99 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln296_1_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_40_reg_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_41_reg_121 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_42_reg_133 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_145 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln287_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln300_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ptr_i_sum2015_cast_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ptr_i_sum2216_cast_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_54 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln287_fu_200_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln300_fu_223_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ptr_i_sum2015_fu_234_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ptr_i_sum2216_fu_244_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln296_fu_254_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes_aes_round_Pipeline_VITIS_LOOP_276_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_aes_round_Pipeline_mixColumnsLoop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_349_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_349_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        grp_galois_multiplication_fu_349_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_349_p_ready : IN STD_LOGIC;
        grp_galois_multiplication_fu_354_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_354_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        grp_galois_multiplication_fu_354_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_354_p_ready : IN STD_LOGIC;
        grp_galois_multiplication_fu_359_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_359_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        grp_galois_multiplication_fu_359_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_galois_multiplication_fu_359_p_ready : IN STD_LOGIC );
    end component;


    component aes_aes_round_Pipeline_VITIS_LOOP_308_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        roundKey_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        roundKey_ce0 : OUT STD_LOGIC;
        roundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_galois_multiplication IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (7 downto 0);
        b : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158 : component aes_aes_round_Pipeline_VITIS_LOOP_276_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_start,
        ap_done => grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_done,
        ap_idle => grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_idle,
        ap_ready => grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_ready,
        state_address0 => grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_address0,
        state_ce0 => grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_ce0,
        state_we0 => grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_we0,
        state_d0 => grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_d0,
        state_address1 => grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_address1,
        state_ce1 => grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_ce1,
        state_q1 => state_q1);

    grp_aes_round_Pipeline_mixColumnsLoop_fu_166 : component aes_aes_round_Pipeline_mixColumnsLoop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_start,
        ap_done => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_done,
        ap_idle => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_idle,
        ap_ready => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_ready,
        state_address0 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_address0,
        state_ce0 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_ce0,
        state_we0 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_we0,
        state_d0 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_address1,
        state_ce1 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_ce1,
        state_we1 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_we1,
        state_d1 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_d1,
        state_q1 => state_q1,
        grp_galois_multiplication_fu_349_p_din1 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_349_p_din1,
        grp_galois_multiplication_fu_349_p_din2 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_349_p_din2,
        grp_galois_multiplication_fu_349_p_dout0 => grp_galois_multiplication_fu_626_p_dout0,
        grp_galois_multiplication_fu_349_p_ready => grp_galois_multiplication_fu_626_p_ready,
        grp_galois_multiplication_fu_354_p_din1 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_354_p_din1,
        grp_galois_multiplication_fu_354_p_din2 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_354_p_din2,
        grp_galois_multiplication_fu_354_p_dout0 => grp_galois_multiplication_fu_631_p_dout0,
        grp_galois_multiplication_fu_354_p_ready => grp_galois_multiplication_fu_631_p_ready,
        grp_galois_multiplication_fu_359_p_din1 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_359_p_din1,
        grp_galois_multiplication_fu_359_p_din2 => grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_359_p_din2,
        grp_galois_multiplication_fu_359_p_dout0 => grp_galois_multiplication_fu_636_p_dout0,
        grp_galois_multiplication_fu_359_p_ready => grp_galois_multiplication_fu_636_p_ready);

    grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172 : component aes_aes_round_Pipeline_VITIS_LOOP_308_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_start,
        ap_done => grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_done,
        ap_idle => grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_idle,
        ap_ready => grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_ready,
        state_address0 => grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_address0,
        state_ce0 => grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_ce0,
        state_we0 => grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_we0,
        state_d0 => grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_d0,
        state_address1 => grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_address1,
        state_ce1 => grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_ce1,
        state_q1 => state_q1,
        roundKey_address0 => grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_roundKey_address0,
        roundKey_ce0 => grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_roundKey_ce0,
        roundKey_q0 => roundKey_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_ready = ap_const_logic_1)) then 
                    grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_ready = ap_const_logic_1)) then 
                    grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln285_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_ready = ap_const_logic_1)) then 
                    grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_40_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                empty_40_reg_110 <= state_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln296_1_fu_258_p2 = ap_const_lv1_0))) then 
                empty_40_reg_110 <= tmp_reg_145;
            end if; 
        end if;
    end process;

    empty_41_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                empty_41_reg_121 <= state_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln296_1_fu_258_p2 = ap_const_lv1_0))) then 
                empty_41_reg_121 <= empty_40_reg_110;
            end if; 
        end if;
    end process;

    empty_42_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                empty_42_reg_133 <= state_load_reg_326;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln296_1_fu_258_p2 = ap_const_lv1_0))) then 
                empty_42_reg_133 <= empty_41_reg_121;
            end if; 
        end if;
    end process;

    i_1_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_1_fu_54 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_fu_54 <= i_5_reg_286;
            end if; 
        end if;
    end process;

    i_3_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_3_reg_99 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln296_1_fu_258_p2 = ap_const_lv1_0))) then 
                i_3_reg_99 <= add_ln296_fu_263_p2;
            end if; 
        end if;
    end process;

    tmp_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tmp_reg_145 <= state_load_4_reg_321;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln296_1_fu_258_p2 = ap_const_lv1_0))) then 
                tmp_reg_145 <= empty_42_reg_133;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_5_reg_286 <= i_5_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln285_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln296_reg_302 <= icmp_ln296_fu_217_p2;
                    shl_ln_reg_291(3 downto 2) <= shl_ln_fu_204_p3(3 downto 2);
                    state_addr_1_reg_297(3 downto 2) <= zext_ln287_fu_212_p1(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    state_addr_4_reg_311(3 downto 2) <= add_ptr_i_sum2015_cast_fu_239_p1(4 - 1 downto 0)(3 downto 2);
                    state_addr_5_reg_316(3 downto 2) <= add_ptr_i_sum2216_cast_fu_249_p1(4 - 1 downto 0)(3 downto 2);
                state_load_4_reg_321 <= state_q1;
                state_load_reg_326 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln296_fu_217_p2 = ap_const_lv1_0) and (icmp_ln285_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    state_addr_reg_306(3 downto 2) <= zext_ln300_fu_229_p1(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    shl_ln_reg_291(1 downto 0) <= "00";
    state_addr_1_reg_297(1 downto 0) <= "00";
    state_addr_reg_306(1 downto 0) <= "01";
    state_addr_4_reg_311(1 downto 0) <= "10";
    state_addr_5_reg_316(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln285_fu_188_p2, icmp_ln296_fu_217_p2, ap_CS_fsm_state6, grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_done, grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_done, grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_done, icmp_ln296_1_fu_258_p2, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln296_fu_217_p2 = ap_const_lv1_1) and (icmp_ln285_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((icmp_ln296_fu_217_p2 = ap_const_lv1_0) and (icmp_ln285_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln296_1_fu_258_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln296_fu_263_p2 <= std_logic_vector(unsigned(i_3_reg_99) + unsigned(ap_const_lv2_1));
    add_ptr_i_sum2015_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ptr_i_sum2015_fu_234_p2),64));
    add_ptr_i_sum2015_fu_234_p2 <= (shl_ln_reg_291 or ap_const_lv4_2);
    add_ptr_i_sum2216_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ptr_i_sum2216_fu_244_p2),64));
    add_ptr_i_sum2216_fu_244_p2 <= (shl_ln_reg_291 or ap_const_lv4_3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_done)
    begin
        if ((grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_done)
    begin
        if ((grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_done)
    begin
        if ((grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_done, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_start <= grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_ap_start_reg;
    grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_start <= grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_ap_start_reg;
    grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_start <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_ap_start_reg;
    grp_galois_multiplication_fu_626_p_din1 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_349_p_din1;
    grp_galois_multiplication_fu_626_p_din2 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_349_p_din2;
    grp_galois_multiplication_fu_631_p_din1 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_354_p_din1;
    grp_galois_multiplication_fu_631_p_din2 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_354_p_din2;
    grp_galois_multiplication_fu_636_p_din1 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_359_p_din1;
    grp_galois_multiplication_fu_636_p_din2 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_grp_galois_multiplication_fu_359_p_din2;
    i_5_fu_194_p2 <= std_logic_vector(unsigned(i_1_fu_54) + unsigned(ap_const_lv3_1));
    icmp_ln285_fu_188_p2 <= "1" when (i_1_fu_54 = ap_const_lv3_4) else "0";
    icmp_ln296_1_fu_258_p2 <= "1" when (zext_ln296_fu_254_p1 = i_1_fu_54) else "0";
    icmp_ln296_fu_217_p2 <= "1" when (trunc_ln287_fu_200_p1 = ap_const_lv2_0) else "0";
    or_ln300_fu_223_p2 <= (shl_ln_fu_204_p3 or ap_const_lv4_1);
    roundKey_address0 <= grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_roundKey_address0;
    roundKey_ce0 <= grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_roundKey_ce0;
    shl_ln_fu_204_p3 <= (trunc_ln287_fu_200_p1 & ap_const_lv2_0);

    state_address0_assign_proc : process(ap_CS_fsm_state3, icmp_ln285_fu_188_p2, icmp_ln296_fu_217_p2, state_addr_reg_306, ap_CS_fsm_state4, state_addr_5_reg_316, ap_CS_fsm_state6, grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_address0, grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_address0, grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_address0, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state10, zext_ln300_fu_229_p1, add_ptr_i_sum2216_cast_fu_249_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= state_addr_5_reg_316;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0 <= state_addr_reg_306;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= add_ptr_i_sum2216_cast_fu_249_p1(4 - 1 downto 0);
        elsif (((icmp_ln296_fu_217_p2 = ap_const_lv1_0) and (icmp_ln285_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_address0 <= zext_ln300_fu_229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address0 <= grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state3, icmp_ln285_fu_188_p2, state_addr_1_reg_297, icmp_ln296_fu_217_p2, state_addr_4_reg_311, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_address1, grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_address1, grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_address1, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state10, zext_ln287_fu_212_p1, add_ptr_i_sum2015_cast_fu_239_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= state_addr_4_reg_311;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1 <= state_addr_1_reg_297;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= add_ptr_i_sum2015_cast_fu_239_p1(4 - 1 downto 0);
        elsif (((icmp_ln296_fu_217_p2 = ap_const_lv1_0) and (icmp_ln285_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_address1 <= zext_ln287_fu_212_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address1 <= grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address1 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_address1;
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln285_fu_188_p2, icmp_ln296_fu_217_p2, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_ce0, grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_ce0, grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_ce0, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln296_fu_217_p2 = ap_const_lv1_0) and (icmp_ln285_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            state_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_ce0 <= grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_ce0 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_ce0 <= grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_CS_fsm_state3, icmp_ln285_fu_188_p2, icmp_ln296_fu_217_p2, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_ce1, grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_ce1, grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_ce1, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln296_fu_217_p2 = ap_const_lv1_0) and (icmp_ln285_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            state_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_ce1 <= grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_ce1 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_ce1 <= grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_ce1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_CS_fsm_state6, grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_d0, grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_d0, grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_d0, empty_40_reg_110, empty_42_reg_133, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_d0 <= empty_40_reg_110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_d0 <= empty_42_reg_133;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d0 <= grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_d0 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_d0 <= grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(ap_CS_fsm_state6, grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_d1, empty_41_reg_121, tmp_reg_145, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_d1 <= empty_41_reg_121;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_d1 <= tmp_reg_145;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_d1 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_d1;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(icmp_ln296_reg_302, ap_CS_fsm_state6, grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_we0, grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_we0, grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_we0, icmp_ln296_1_fu_258_p2, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln296_1_fu_258_p2 = ap_const_lv1_1)) or ((icmp_ln296_reg_302 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            state_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_we0 <= grp_aes_round_Pipeline_VITIS_LOOP_308_1_fu_172_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_we0 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_we0 <= grp_aes_round_Pipeline_VITIS_LOOP_276_1_fu_158_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(icmp_ln296_reg_302, ap_CS_fsm_state6, grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_we1, icmp_ln296_1_fu_258_p2, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln296_1_fu_258_p2 = ap_const_lv1_1)) or ((icmp_ln296_reg_302 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            state_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_we1 <= grp_aes_round_Pipeline_mixColumnsLoop_fu_166_state_we1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln287_fu_200_p1 <= i_1_fu_54(2 - 1 downto 0);
    zext_ln287_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_204_p3),64));
    zext_ln296_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_99),3));
    zext_ln300_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln300_fu_223_p2),64));
end behav;
