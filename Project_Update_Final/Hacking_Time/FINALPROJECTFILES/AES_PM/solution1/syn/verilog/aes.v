// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes_aes,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.164000,HLS_SYN_LAT=1604,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=5303,HLS_SYN_LUT=13326,HLS_VERSION=2022_1}" *)

module aes (
        ap_clk,
        ap_rst_n,
        key_and_plaintext_TDATA,
        key_and_plaintext_TVALID,
        key_and_plaintext_TREADY,
        key_and_plaintext_TKEEP,
        key_and_plaintext_TSTRB,
        key_and_plaintext_TUSER,
        key_and_plaintext_TLAST,
        key_and_plaintext_TID,
        key_and_plaintext_TDEST,
        ciphertext_and_decryptedtext_TDATA,
        ciphertext_and_decryptedtext_TVALID,
        ciphertext_and_decryptedtext_TREADY,
        ciphertext_and_decryptedtext_TKEEP,
        ciphertext_and_decryptedtext_TSTRB,
        ciphertext_and_decryptedtext_TUSER,
        ciphertext_and_decryptedtext_TLAST,
        ciphertext_and_decryptedtext_TID,
        ciphertext_and_decryptedtext_TDEST,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] key_and_plaintext_TDATA;
input   key_and_plaintext_TVALID;
output   key_and_plaintext_TREADY;
input  [0:0] key_and_plaintext_TKEEP;
input  [0:0] key_and_plaintext_TSTRB;
input  [0:0] key_and_plaintext_TUSER;
input  [0:0] key_and_plaintext_TLAST;
input  [0:0] key_and_plaintext_TID;
input  [0:0] key_and_plaintext_TDEST;
output  [7:0] ciphertext_and_decryptedtext_TDATA;
output   ciphertext_and_decryptedtext_TVALID;
input   ciphertext_and_decryptedtext_TREADY;
output  [0:0] ciphertext_and_decryptedtext_TKEEP;
output  [0:0] ciphertext_and_decryptedtext_TSTRB;
output  [0:0] ciphertext_and_decryptedtext_TUSER;
output  [0:0] ciphertext_and_decryptedtext_TLAST;
output  [0:0] ciphertext_and_decryptedtext_TID;
output  [0:0] ciphertext_and_decryptedtext_TDEST;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] mode;
wire   [7:0] enable_in;
wire   [7:0] enable_out;
wire   [31:0] power_reading_in;
wire   [31:0] power_reading_out;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
reg   [7:0] sbox_address1;
reg    sbox_ce1;
wire   [7:0] sbox_q1;
reg   [0:0] p_4_0_0_0115_phi_loc_load_reg_551;
wire    ap_CS_fsm_state12;
wire   [7:0] expandedKeySize_fu_481_p2;
reg   [7:0] expandedKeySize_reg_561;
reg   [5:0] cipherkey_size_reg_233;
wire   [7:0] expandedKeySize_1_fu_496_p2;
reg   [7:0] expandedKeySize_1_reg_566;
wire    ap_CS_fsm_state18;
reg   [10:0] key_array128_address0;
reg    key_array128_ce0;
reg    key_array128_we0;
reg   [7:0] key_array128_d0;
wire   [7:0] key_array128_q0;
reg    key_array128_ce1;
wire   [7:0] key_array128_q1;
reg    key_array128_ce2;
wire   [7:0] key_array128_q2;
reg    key_array128_ce3;
wire   [7:0] key_array128_q3;
reg   [6:0] expandedKey_address0;
reg    expandedKey_ce0;
reg    expandedKey_we0;
wire   [7:0] expandedKey_q0;
reg   [6:0] expandedKey_address1;
reg    expandedKey_ce1;
reg    expandedKey_we1;
wire   [7:0] expandedKey_q1;
reg   [6:0] expandedKey_1_address0;
reg    expandedKey_1_ce0;
reg    expandedKey_1_we0;
wire   [7:0] expandedKey_1_q0;
reg   [6:0] expandedKey_1_address1;
reg    expandedKey_1_ce1;
reg    expandedKey_1_we1;
wire   [7:0] expandedKey_1_q1;
reg   [3:0] block_address0;
reg    block_ce0;
reg    block_we0;
reg   [7:0] block_d0;
wire   [7:0] block_q0;
reg    block_ce1;
reg    block_we1;
wire   [7:0] block_q1;
reg   [6:0] expandedKey_2_address0;
reg    expandedKey_2_ce0;
reg    expandedKey_2_we0;
wire   [7:0] expandedKey_2_q0;
reg   [6:0] expandedKey_2_address1;
reg    expandedKey_2_ce1;
reg    expandedKey_2_we1;
wire   [7:0] expandedKey_2_q1;
reg   [6:0] expandedKey_3_address0;
reg    expandedKey_3_ce0;
reg    expandedKey_3_we0;
wire   [7:0] expandedKey_3_q0;
reg   [6:0] expandedKey_3_address1;
reg    expandedKey_3_ce1;
reg    expandedKey_3_we1;
wire   [7:0] expandedKey_3_q1;
reg   [3:0] block_1_address0;
reg    block_1_ce0;
reg    block_1_we0;
reg   [7:0] block_1_d0;
wire   [7:0] block_1_q0;
reg    block_1_ce1;
reg    block_1_we1;
wire   [7:0] block_1_q1;
reg   [3:0] plaintext_array_address0;
reg    plaintext_array_ce0;
reg    plaintext_array_we0;
wire   [7:0] plaintext_array_q0;
reg   [3:0] ciphertext_array_address0;
reg    ciphertext_array_ce0;
reg    ciphertext_array_we0;
wire   [7:0] ciphertext_array_q0;
reg   [3:0] decryptedtext_array_address0;
reg    decryptedtext_array_ce0;
reg    decryptedtext_array_we0;
wire   [7:0] decryptedtext_array_q0;
wire    grp_aes_Pipeline_1_fu_281_ap_start;
wire    grp_aes_Pipeline_1_fu_281_ap_done;
wire    grp_aes_Pipeline_1_fu_281_ap_idle;
wire    grp_aes_Pipeline_1_fu_281_ap_ready;
wire   [10:0] grp_aes_Pipeline_1_fu_281_key_array128_address0;
wire    grp_aes_Pipeline_1_fu_281_key_array128_ce0;
wire    grp_aes_Pipeline_1_fu_281_key_array128_we0;
wire   [7:0] grp_aes_Pipeline_1_fu_281_key_array128_d0;
wire    grp_aes_Pipeline_2_fu_287_ap_start;
wire    grp_aes_Pipeline_2_fu_287_ap_done;
wire    grp_aes_Pipeline_2_fu_287_ap_idle;
wire    grp_aes_Pipeline_2_fu_287_ap_ready;
wire   [10:0] grp_aes_Pipeline_2_fu_287_key_array128_address0;
wire    grp_aes_Pipeline_2_fu_287_key_array128_ce0;
wire    grp_aes_Pipeline_2_fu_287_key_array128_we0;
wire   [7:0] grp_aes_Pipeline_2_fu_287_key_array128_d0;
wire    grp_aes_Pipeline_3_fu_292_ap_start;
wire    grp_aes_Pipeline_3_fu_292_ap_done;
wire    grp_aes_Pipeline_3_fu_292_ap_idle;
wire    grp_aes_Pipeline_3_fu_292_ap_ready;
wire   [10:0] grp_aes_Pipeline_3_fu_292_key_array128_address0;
wire    grp_aes_Pipeline_3_fu_292_key_array128_ce0;
wire    grp_aes_Pipeline_3_fu_292_key_array128_we0;
wire   [7:0] grp_aes_Pipeline_3_fu_292_key_array128_d0;
wire    grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_start;
wire    grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_done;
wire    grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_idle;
wire    grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_ready;
wire    grp_aes_Pipeline_cipherkeyLoop_fu_297_key_and_plaintext_TREADY;
wire   [10:0] grp_aes_Pipeline_cipherkeyLoop_fu_297_key_array128_address0;
wire    grp_aes_Pipeline_cipherkeyLoop_fu_297_key_array128_ce0;
wire    grp_aes_Pipeline_cipherkeyLoop_fu_297_key_array128_we0;
wire   [7:0] grp_aes_Pipeline_cipherkeyLoop_fu_297_key_array128_d0;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_ap_start;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_ap_done;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_ap_idle;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_ap_ready;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_key_and_plaintext_TREADY;
wire   [3:0] grp_aes_Pipeline_plaintextLoop_fu_320_plaintext_array_address0;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_plaintext_array_ce0;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_plaintext_array_we0;
wire   [7:0] grp_aes_Pipeline_plaintextLoop_fu_320_plaintext_array_d0;
wire   [0:0] grp_aes_Pipeline_plaintextLoop_fu_320_tmp_keep_V_out;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_tmp_keep_V_out_ap_vld;
wire   [0:0] grp_aes_Pipeline_plaintextLoop_fu_320_tmp_strb_V_out;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_tmp_strb_V_out_ap_vld;
wire   [0:0] grp_aes_Pipeline_plaintextLoop_fu_320_tmp_user_V_out;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_tmp_user_V_out_ap_vld;
wire   [0:0] grp_aes_Pipeline_plaintextLoop_fu_320_p_4_0_0_0115_phi_out;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_p_4_0_0_0115_phi_out_ap_vld;
wire   [0:0] grp_aes_Pipeline_plaintextLoop_fu_320_tmp_id_V_out;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_tmp_id_V_out_ap_vld;
wire   [0:0] grp_aes_Pipeline_plaintextLoop_fu_320_tmp_dest_V_out;
wire    grp_aes_Pipeline_plaintextLoop_fu_320_tmp_dest_V_out_ap_vld;
wire    grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_start;
wire    grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_done;
wire    grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_idle;
wire    grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_ready;
wire   [3:0] grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_plaintext_array_address0;
wire    grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_plaintext_array_ce0;
wire   [3:0] grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_block_1_address0;
wire    grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_block_1_ce0;
wire    grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_block_1_we0;
wire   [7:0] grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_block_1_d0;
wire    grp_expandKey_fu_351_ap_start;
wire    grp_expandKey_fu_351_ap_done;
wire    grp_expandKey_fu_351_ap_idle;
wire    grp_expandKey_fu_351_ap_ready;
wire   [6:0] grp_expandKey_fu_351_expandedKey_0_address0;
wire    grp_expandKey_fu_351_expandedKey_0_ce0;
wire    grp_expandKey_fu_351_expandedKey_0_we0;
wire   [7:0] grp_expandKey_fu_351_expandedKey_0_d0;
reg   [7:0] grp_expandKey_fu_351_expandedKey_0_q0;
wire   [6:0] grp_expandKey_fu_351_expandedKey_0_address1;
wire    grp_expandKey_fu_351_expandedKey_0_ce1;
wire    grp_expandKey_fu_351_expandedKey_0_we1;
wire   [7:0] grp_expandKey_fu_351_expandedKey_0_d1;
reg   [7:0] grp_expandKey_fu_351_expandedKey_0_q1;
wire   [6:0] grp_expandKey_fu_351_expandedKey_1_address0;
wire    grp_expandKey_fu_351_expandedKey_1_ce0;
wire    grp_expandKey_fu_351_expandedKey_1_we0;
wire   [7:0] grp_expandKey_fu_351_expandedKey_1_d0;
reg   [7:0] grp_expandKey_fu_351_expandedKey_1_q0;
wire   [6:0] grp_expandKey_fu_351_expandedKey_1_address1;
wire    grp_expandKey_fu_351_expandedKey_1_ce1;
wire    grp_expandKey_fu_351_expandedKey_1_we1;
wire   [7:0] grp_expandKey_fu_351_expandedKey_1_d1;
reg   [7:0] grp_expandKey_fu_351_expandedKey_1_q1;
wire   [10:0] grp_expandKey_fu_351_key_array128_address0;
wire    grp_expandKey_fu_351_key_array128_ce0;
wire   [10:0] grp_expandKey_fu_351_key_array128_address1;
wire    grp_expandKey_fu_351_key_array128_ce1;
wire   [10:0] grp_expandKey_fu_351_key_array128_address2;
wire    grp_expandKey_fu_351_key_array128_ce2;
wire   [10:0] grp_expandKey_fu_351_key_array128_address3;
wire    grp_expandKey_fu_351_key_array128_ce3;
reg   [7:0] grp_expandKey_fu_351_expandedKeySize;
wire    grp_aes_main_fu_367_ap_start;
wire    grp_aes_main_fu_367_ap_done;
wire    grp_aes_main_fu_367_ap_idle;
wire    grp_aes_main_fu_367_ap_ready;
wire   [3:0] grp_aes_main_fu_367_state_address0;
wire    grp_aes_main_fu_367_state_ce0;
wire    grp_aes_main_fu_367_state_we0;
wire   [7:0] grp_aes_main_fu_367_state_d0;
wire   [3:0] grp_aes_main_fu_367_state_address1;
wire    grp_aes_main_fu_367_state_ce1;
wire    grp_aes_main_fu_367_state_we1;
wire   [7:0] grp_aes_main_fu_367_state_d1;
wire   [6:0] grp_aes_main_fu_367_expandedKey_0_address0;
wire    grp_aes_main_fu_367_expandedKey_0_ce0;
wire   [6:0] grp_aes_main_fu_367_expandedKey_0_address1;
wire    grp_aes_main_fu_367_expandedKey_0_ce1;
wire   [6:0] grp_aes_main_fu_367_expandedKey_1_address0;
wire    grp_aes_main_fu_367_expandedKey_1_ce0;
wire   [6:0] grp_aes_main_fu_367_expandedKey_1_address1;
wire    grp_aes_main_fu_367_expandedKey_1_ce1;
wire   [7:0] grp_aes_main_fu_367_sbox_address0;
wire    grp_aes_main_fu_367_sbox_ce0;
wire   [7:0] grp_aes_main_fu_367_sbox_address1;
wire    grp_aes_main_fu_367_sbox_ce1;
wire    grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_start;
wire    grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_done;
wire    grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_idle;
wire    grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_ready;
wire   [3:0] grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_block_1_address0;
wire    grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_block_1_ce0;
wire   [3:0] grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ciphertext_array_address0;
wire    grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ciphertext_array_ce0;
wire    grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ciphertext_array_we0;
wire   [7:0] grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ciphertext_array_d0;
wire    grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_start;
wire    grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_done;
wire    grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_idle;
wire    grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_ready;
wire   [3:0] grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ciphertext_array_address0;
wire    grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ciphertext_array_ce0;
wire   [3:0] grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_block_r_address0;
wire    grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_block_r_ce0;
wire    grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_block_r_we0;
wire   [7:0] grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_block_r_d0;
wire    grp_aes_invMain_fu_390_ap_start;
wire    grp_aes_invMain_fu_390_ap_done;
wire    grp_aes_invMain_fu_390_ap_idle;
wire    grp_aes_invMain_fu_390_ap_ready;
wire   [3:0] grp_aes_invMain_fu_390_state_address0;
wire    grp_aes_invMain_fu_390_state_ce0;
wire    grp_aes_invMain_fu_390_state_we0;
wire   [7:0] grp_aes_invMain_fu_390_state_d0;
wire   [3:0] grp_aes_invMain_fu_390_state_address1;
wire    grp_aes_invMain_fu_390_state_ce1;
wire    grp_aes_invMain_fu_390_state_we1;
wire   [7:0] grp_aes_invMain_fu_390_state_d1;
wire   [6:0] grp_aes_invMain_fu_390_expandedKey_0_address0;
wire    grp_aes_invMain_fu_390_expandedKey_0_ce0;
wire   [6:0] grp_aes_invMain_fu_390_expandedKey_0_address1;
wire    grp_aes_invMain_fu_390_expandedKey_0_ce1;
wire   [6:0] grp_aes_invMain_fu_390_expandedKey_1_address0;
wire    grp_aes_invMain_fu_390_expandedKey_1_ce0;
wire   [6:0] grp_aes_invMain_fu_390_expandedKey_1_address1;
wire    grp_aes_invMain_fu_390_expandedKey_1_ce1;
wire    grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_start;
wire    grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_done;
wire    grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_idle;
wire    grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_ready;
wire   [3:0] grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_block_r_address0;
wire    grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_block_r_ce0;
wire   [3:0] grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_decryptedtext_array_address0;
wire    grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_decryptedtext_array_ce0;
wire    grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_decryptedtext_array_we0;
wire   [7:0] grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_decryptedtext_array_d0;
wire    grp_aes_Pipeline_ciphertextLoop_fu_407_ap_start;
wire    grp_aes_Pipeline_ciphertextLoop_fu_407_ap_done;
wire    grp_aes_Pipeline_ciphertextLoop_fu_407_ap_idle;
wire    grp_aes_Pipeline_ciphertextLoop_fu_407_ap_ready;
wire    grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TREADY;
wire   [3:0] grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_array_address0;
wire    grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_array_ce0;
wire   [7:0] grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TDATA;
wire    grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TVALID;
wire   [0:0] grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TKEEP;
wire   [0:0] grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TSTRB;
wire   [0:0] grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TUSER;
wire   [0:0] grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TLAST;
wire   [0:0] grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TID;
wire   [0:0] grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TDEST;
wire    grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_start;
wire    grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_done;
wire    grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_idle;
wire    grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_ready;
wire    grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TREADY;
wire   [3:0] grp_aes_Pipeline_decryptedTextLoop_fu_431_decryptedtext_array_address0;
wire    grp_aes_Pipeline_decryptedTextLoop_fu_431_decryptedtext_array_ce0;
wire   [7:0] grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TDATA;
wire    grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TVALID;
wire   [0:0] grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TKEEP;
wire   [0:0] grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TSTRB;
wire   [0:0] grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TUSER;
wire   [0:0] grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TLAST;
wire   [0:0] grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TID;
wire   [0:0] grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TDEST;
reg   [10:0] key_array_reg_218;
wire    ap_CS_fsm_state6;
wire   [31:0] mode_read_read_fu_212_p2;
reg   [3:0] ap_phi_mux_nbrRounds_phi_fu_251_p6;
reg   [3:0] nbrRounds_reg_248;
reg   [3:0] nbrRounds_1_reg_263;
wire    ap_CS_fsm_state17;
reg    ap_predicate_op120_call_state17;
reg    ap_block_state17_on_subcall_done;
reg    grp_aes_Pipeline_1_fu_281_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_aes_Pipeline_2_fu_287_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_aes_Pipeline_3_fu_292_ap_start_reg;
wire    ap_CS_fsm_state5;
reg    grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    grp_aes_Pipeline_plaintextLoop_fu_320_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg    grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_start_reg;
wire    ap_CS_fsm_state13;
reg    grp_expandKey_fu_351_ap_start_reg;
wire    ap_CS_fsm_state19;
reg    grp_aes_main_fu_367_ap_start_reg;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
reg    grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_start_reg;
wire    ap_CS_fsm_state16;
reg    grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_start_reg;
reg    grp_aes_invMain_fu_390_ap_start_reg;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
reg    grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_start_reg;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
reg    grp_aes_Pipeline_ciphertextLoop_fu_407_ap_start_reg;
reg    ap_predicate_op135_call_state23;
reg    ap_block_state23_on_subcall_done;
wire    ap_CS_fsm_state24;
reg    grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_start_reg;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire   [7:0] shl_ln_fu_473_p3;
wire   [7:0] shl_ln3_fu_488_p3;
wire    ap_CS_fsm_state28;
wire    regslice_both_ciphertext_and_decryptedtext_V_data_V_U_apdone_blk;
reg   [27:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_block_state13_on_subcall_done;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
reg    ap_block_state19_on_subcall_done;
reg    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
wire    regslice_both_key_and_plaintext_V_data_V_U_apdone_blk;
wire   [7:0] key_and_plaintext_TDATA_int_regslice;
wire    key_and_plaintext_TVALID_int_regslice;
reg    key_and_plaintext_TREADY_int_regslice;
wire    regslice_both_key_and_plaintext_V_data_V_U_ack_in;
wire    regslice_both_key_and_plaintext_V_keep_V_U_apdone_blk;
wire   [0:0] key_and_plaintext_TKEEP_int_regslice;
wire    regslice_both_key_and_plaintext_V_keep_V_U_vld_out;
wire    regslice_both_key_and_plaintext_V_keep_V_U_ack_in;
wire    regslice_both_key_and_plaintext_V_strb_V_U_apdone_blk;
wire   [0:0] key_and_plaintext_TSTRB_int_regslice;
wire    regslice_both_key_and_plaintext_V_strb_V_U_vld_out;
wire    regslice_both_key_and_plaintext_V_strb_V_U_ack_in;
wire    regslice_both_key_and_plaintext_V_user_V_U_apdone_blk;
wire   [0:0] key_and_plaintext_TUSER_int_regslice;
wire    regslice_both_key_and_plaintext_V_user_V_U_vld_out;
wire    regslice_both_key_and_plaintext_V_user_V_U_ack_in;
wire    regslice_both_key_and_plaintext_V_last_V_U_apdone_blk;
wire   [0:0] key_and_plaintext_TLAST_int_regslice;
wire    regslice_both_key_and_plaintext_V_last_V_U_vld_out;
wire    regslice_both_key_and_plaintext_V_last_V_U_ack_in;
wire    regslice_both_key_and_plaintext_V_id_V_U_apdone_blk;
wire   [0:0] key_and_plaintext_TID_int_regslice;
wire    regslice_both_key_and_plaintext_V_id_V_U_vld_out;
wire    regslice_both_key_and_plaintext_V_id_V_U_ack_in;
wire    regslice_both_key_and_plaintext_V_dest_V_U_apdone_blk;
wire   [0:0] key_and_plaintext_TDEST_int_regslice;
wire    regslice_both_key_and_plaintext_V_dest_V_U_vld_out;
wire    regslice_both_key_and_plaintext_V_dest_V_U_ack_in;
reg   [7:0] ciphertext_and_decryptedtext_TDATA_int_regslice;
reg    ciphertext_and_decryptedtext_TVALID_int_regslice;
wire    ciphertext_and_decryptedtext_TREADY_int_regslice;
wire    regslice_both_ciphertext_and_decryptedtext_V_data_V_U_vld_out;
wire    regslice_both_ciphertext_and_decryptedtext_V_keep_V_U_apdone_blk;
reg   [0:0] ciphertext_and_decryptedtext_TKEEP_int_regslice;
wire    regslice_both_ciphertext_and_decryptedtext_V_keep_V_U_ack_in_dummy;
wire    regslice_both_ciphertext_and_decryptedtext_V_keep_V_U_vld_out;
wire    regslice_both_ciphertext_and_decryptedtext_V_strb_V_U_apdone_blk;
reg   [0:0] ciphertext_and_decryptedtext_TSTRB_int_regslice;
wire    regslice_both_ciphertext_and_decryptedtext_V_strb_V_U_ack_in_dummy;
wire    regslice_both_ciphertext_and_decryptedtext_V_strb_V_U_vld_out;
wire    regslice_both_ciphertext_and_decryptedtext_V_user_V_U_apdone_blk;
reg   [0:0] ciphertext_and_decryptedtext_TUSER_int_regslice;
wire    regslice_both_ciphertext_and_decryptedtext_V_user_V_U_ack_in_dummy;
wire    regslice_both_ciphertext_and_decryptedtext_V_user_V_U_vld_out;
wire    regslice_both_ciphertext_and_decryptedtext_V_last_V_U_apdone_blk;
reg   [0:0] ciphertext_and_decryptedtext_TLAST_int_regslice;
wire    regslice_both_ciphertext_and_decryptedtext_V_last_V_U_ack_in_dummy;
wire    regslice_both_ciphertext_and_decryptedtext_V_last_V_U_vld_out;
wire    regslice_both_ciphertext_and_decryptedtext_V_id_V_U_apdone_blk;
reg   [0:0] ciphertext_and_decryptedtext_TID_int_regslice;
wire    regslice_both_ciphertext_and_decryptedtext_V_id_V_U_ack_in_dummy;
wire    regslice_both_ciphertext_and_decryptedtext_V_id_V_U_vld_out;
wire    regslice_both_ciphertext_and_decryptedtext_V_dest_V_U_apdone_blk;
reg   [0:0] ciphertext_and_decryptedtext_TDEST_int_regslice;
wire    regslice_both_ciphertext_and_decryptedtext_V_dest_V_U_ack_in_dummy;
wire    regslice_both_ciphertext_and_decryptedtext_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 grp_aes_Pipeline_1_fu_281_ap_start_reg = 1'b0;
#0 grp_aes_Pipeline_2_fu_287_ap_start_reg = 1'b0;
#0 grp_aes_Pipeline_3_fu_292_ap_start_reg = 1'b0;
#0 grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_start_reg = 1'b0;
#0 grp_aes_Pipeline_plaintextLoop_fu_320_ap_start_reg = 1'b0;
#0 grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_start_reg = 1'b0;
#0 grp_expandKey_fu_351_ap_start_reg = 1'b0;
#0 grp_aes_main_fu_367_ap_start_reg = 1'b0;
#0 grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_start_reg = 1'b0;
#0 grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_start_reg = 1'b0;
#0 grp_aes_invMain_fu_390_ap_start_reg = 1'b0;
#0 grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_start_reg = 1'b0;
#0 grp_aes_Pipeline_ciphertextLoop_fu_407_ap_start_reg = 1'b0;
#0 grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_start_reg = 1'b0;
end

aes_expandKey_Pipeline_expandKeyLoop2_sbox_ROM_2P_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(sbox_address1),
    .ce1(sbox_ce1),
    .q1(sbox_q1)
);

aes_key_array128_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 1056 ),
    .AddressWidth( 11 ))
key_array128_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(key_array128_address0),
    .ce0(key_array128_ce0),
    .we0(key_array128_we0),
    .d0(key_array128_d0),
    .q0(key_array128_q0),
    .address1(grp_expandKey_fu_351_key_array128_address1),
    .ce1(key_array128_ce1),
    .q1(key_array128_q1),
    .address2(grp_expandKey_fu_351_key_array128_address2),
    .ce2(key_array128_ce2),
    .q2(key_array128_q2),
    .address3(grp_expandKey_fu_351_key_array128_address3),
    .ce3(key_array128_ce3),
    .q3(key_array128_q3)
);

aes_expandedKey_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
expandedKey_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(expandedKey_address0),
    .ce0(expandedKey_ce0),
    .we0(expandedKey_we0),
    .d0(grp_expandKey_fu_351_expandedKey_0_d0),
    .q0(expandedKey_q0),
    .address1(expandedKey_address1),
    .ce1(expandedKey_ce1),
    .we1(expandedKey_we1),
    .d1(grp_expandKey_fu_351_expandedKey_0_d1),
    .q1(expandedKey_q1)
);

aes_expandedKey_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
expandedKey_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(expandedKey_1_address0),
    .ce0(expandedKey_1_ce0),
    .we0(expandedKey_1_we0),
    .d0(grp_expandKey_fu_351_expandedKey_1_d0),
    .q0(expandedKey_1_q0),
    .address1(expandedKey_1_address1),
    .ce1(expandedKey_1_ce1),
    .we1(expandedKey_1_we1),
    .d1(grp_expandKey_fu_351_expandedKey_1_d1),
    .q1(expandedKey_1_q1)
);

aes_block_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
block_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(block_address0),
    .ce0(block_ce0),
    .we0(block_we0),
    .d0(block_d0),
    .q0(block_q0),
    .address1(grp_aes_invMain_fu_390_state_address1),
    .ce1(block_ce1),
    .we1(block_we1),
    .d1(grp_aes_invMain_fu_390_state_d1),
    .q1(block_q1)
);

aes_expandedKey_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
expandedKey_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(expandedKey_2_address0),
    .ce0(expandedKey_2_ce0),
    .we0(expandedKey_2_we0),
    .d0(grp_expandKey_fu_351_expandedKey_0_d0),
    .q0(expandedKey_2_q0),
    .address1(expandedKey_2_address1),
    .ce1(expandedKey_2_ce1),
    .we1(expandedKey_2_we1),
    .d1(grp_expandKey_fu_351_expandedKey_0_d1),
    .q1(expandedKey_2_q1)
);

aes_expandedKey_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
expandedKey_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(expandedKey_3_address0),
    .ce0(expandedKey_3_ce0),
    .we0(expandedKey_3_we0),
    .d0(grp_expandKey_fu_351_expandedKey_1_d0),
    .q0(expandedKey_3_q0),
    .address1(expandedKey_3_address1),
    .ce1(expandedKey_3_ce1),
    .we1(expandedKey_3_we1),
    .d1(grp_expandKey_fu_351_expandedKey_1_d1),
    .q1(expandedKey_3_q1)
);

aes_block_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
block_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(block_1_address0),
    .ce0(block_1_ce0),
    .we0(block_1_we0),
    .d0(block_1_d0),
    .q0(block_1_q0),
    .address1(grp_aes_main_fu_367_state_address1),
    .ce1(block_1_ce1),
    .we1(block_1_we1),
    .d1(grp_aes_main_fu_367_state_d1),
    .q1(block_1_q1)
);

aes_plaintext_array_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
plaintext_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(plaintext_array_address0),
    .ce0(plaintext_array_ce0),
    .we0(plaintext_array_we0),
    .d0(grp_aes_Pipeline_plaintextLoop_fu_320_plaintext_array_d0),
    .q0(plaintext_array_q0)
);

aes_plaintext_array_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
ciphertext_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ciphertext_array_address0),
    .ce0(ciphertext_array_ce0),
    .we0(ciphertext_array_we0),
    .d0(grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ciphertext_array_d0),
    .q0(ciphertext_array_q0)
);

aes_plaintext_array_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
decryptedtext_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(decryptedtext_array_address0),
    .ce0(decryptedtext_array_ce0),
    .we0(decryptedtext_array_we0),
    .d0(grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_decryptedtext_array_d0),
    .q0(decryptedtext_array_q0)
);

aes_aes_Pipeline_1 grp_aes_Pipeline_1_fu_281(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_Pipeline_1_fu_281_ap_start),
    .ap_done(grp_aes_Pipeline_1_fu_281_ap_done),
    .ap_idle(grp_aes_Pipeline_1_fu_281_ap_idle),
    .ap_ready(grp_aes_Pipeline_1_fu_281_ap_ready),
    .key_array128_address0(grp_aes_Pipeline_1_fu_281_key_array128_address0),
    .key_array128_ce0(grp_aes_Pipeline_1_fu_281_key_array128_ce0),
    .key_array128_we0(grp_aes_Pipeline_1_fu_281_key_array128_we0),
    .key_array128_d0(grp_aes_Pipeline_1_fu_281_key_array128_d0)
);

aes_aes_Pipeline_2 grp_aes_Pipeline_2_fu_287(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_Pipeline_2_fu_287_ap_start),
    .ap_done(grp_aes_Pipeline_2_fu_287_ap_done),
    .ap_idle(grp_aes_Pipeline_2_fu_287_ap_idle),
    .ap_ready(grp_aes_Pipeline_2_fu_287_ap_ready),
    .key_array128_address0(grp_aes_Pipeline_2_fu_287_key_array128_address0),
    .key_array128_ce0(grp_aes_Pipeline_2_fu_287_key_array128_ce0),
    .key_array128_we0(grp_aes_Pipeline_2_fu_287_key_array128_we0),
    .key_array128_d0(grp_aes_Pipeline_2_fu_287_key_array128_d0)
);

aes_aes_Pipeline_3 grp_aes_Pipeline_3_fu_292(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_Pipeline_3_fu_292_ap_start),
    .ap_done(grp_aes_Pipeline_3_fu_292_ap_done),
    .ap_idle(grp_aes_Pipeline_3_fu_292_ap_idle),
    .ap_ready(grp_aes_Pipeline_3_fu_292_ap_ready),
    .key_array128_address0(grp_aes_Pipeline_3_fu_292_key_array128_address0),
    .key_array128_ce0(grp_aes_Pipeline_3_fu_292_key_array128_ce0),
    .key_array128_we0(grp_aes_Pipeline_3_fu_292_key_array128_we0),
    .key_array128_d0(grp_aes_Pipeline_3_fu_292_key_array128_d0)
);

aes_aes_Pipeline_cipherkeyLoop grp_aes_Pipeline_cipherkeyLoop_fu_297(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_start),
    .ap_done(grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_done),
    .ap_idle(grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_idle),
    .ap_ready(grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_ready),
    .key_and_plaintext_TVALID(key_and_plaintext_TVALID_int_regslice),
    .cipherkey_size(cipherkey_size_reg_233),
    .key_and_plaintext_TDATA(key_and_plaintext_TDATA_int_regslice),
    .key_and_plaintext_TREADY(grp_aes_Pipeline_cipherkeyLoop_fu_297_key_and_plaintext_TREADY),
    .key_and_plaintext_TKEEP(key_and_plaintext_TKEEP_int_regslice),
    .key_and_plaintext_TSTRB(key_and_plaintext_TSTRB_int_regslice),
    .key_and_plaintext_TUSER(key_and_plaintext_TUSER_int_regslice),
    .key_and_plaintext_TLAST(key_and_plaintext_TLAST_int_regslice),
    .key_and_plaintext_TID(key_and_plaintext_TID_int_regslice),
    .key_and_plaintext_TDEST(key_and_plaintext_TDEST_int_regslice),
    .key_array(key_array_reg_218),
    .key_array128_address0(grp_aes_Pipeline_cipherkeyLoop_fu_297_key_array128_address0),
    .key_array128_ce0(grp_aes_Pipeline_cipherkeyLoop_fu_297_key_array128_ce0),
    .key_array128_we0(grp_aes_Pipeline_cipherkeyLoop_fu_297_key_array128_we0),
    .key_array128_d0(grp_aes_Pipeline_cipherkeyLoop_fu_297_key_array128_d0)
);

aes_aes_Pipeline_plaintextLoop grp_aes_Pipeline_plaintextLoop_fu_320(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_Pipeline_plaintextLoop_fu_320_ap_start),
    .ap_done(grp_aes_Pipeline_plaintextLoop_fu_320_ap_done),
    .ap_idle(grp_aes_Pipeline_plaintextLoop_fu_320_ap_idle),
    .ap_ready(grp_aes_Pipeline_plaintextLoop_fu_320_ap_ready),
    .key_and_plaintext_TVALID(key_and_plaintext_TVALID_int_regslice),
    .key_and_plaintext_TDATA(key_and_plaintext_TDATA_int_regslice),
    .key_and_plaintext_TREADY(grp_aes_Pipeline_plaintextLoop_fu_320_key_and_plaintext_TREADY),
    .key_and_plaintext_TKEEP(key_and_plaintext_TKEEP_int_regslice),
    .key_and_plaintext_TSTRB(key_and_plaintext_TSTRB_int_regslice),
    .key_and_plaintext_TUSER(key_and_plaintext_TUSER_int_regslice),
    .key_and_plaintext_TLAST(key_and_plaintext_TLAST_int_regslice),
    .key_and_plaintext_TID(key_and_plaintext_TID_int_regslice),
    .key_and_plaintext_TDEST(key_and_plaintext_TDEST_int_regslice),
    .plaintext_array_address0(grp_aes_Pipeline_plaintextLoop_fu_320_plaintext_array_address0),
    .plaintext_array_ce0(grp_aes_Pipeline_plaintextLoop_fu_320_plaintext_array_ce0),
    .plaintext_array_we0(grp_aes_Pipeline_plaintextLoop_fu_320_plaintext_array_we0),
    .plaintext_array_d0(grp_aes_Pipeline_plaintextLoop_fu_320_plaintext_array_d0),
    .tmp_keep_V_out(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_keep_V_out),
    .tmp_keep_V_out_ap_vld(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_keep_V_out_ap_vld),
    .tmp_strb_V_out(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_strb_V_out),
    .tmp_strb_V_out_ap_vld(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_strb_V_out_ap_vld),
    .tmp_user_V_out(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_user_V_out),
    .tmp_user_V_out_ap_vld(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_user_V_out_ap_vld),
    .p_4_0_0_0115_phi_out(grp_aes_Pipeline_plaintextLoop_fu_320_p_4_0_0_0115_phi_out),
    .p_4_0_0_0115_phi_out_ap_vld(grp_aes_Pipeline_plaintextLoop_fu_320_p_4_0_0_0115_phi_out_ap_vld),
    .tmp_id_V_out(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_id_V_out),
    .tmp_id_V_out_ap_vld(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_id_V_out_ap_vld),
    .tmp_dest_V_out(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_dest_V_out),
    .tmp_dest_V_out_ap_vld(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_dest_V_out_ap_vld)
);

aes_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2 grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_start),
    .ap_done(grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_done),
    .ap_idle(grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_idle),
    .ap_ready(grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_ready),
    .plaintext_array_address0(grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_plaintext_array_address0),
    .plaintext_array_ce0(grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_plaintext_array_ce0),
    .plaintext_array_q0(plaintext_array_q0),
    .block_1_address0(grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_block_1_address0),
    .block_1_ce0(grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_block_1_ce0),
    .block_1_we0(grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_block_1_we0),
    .block_1_d0(grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_block_1_d0)
);

aes_expandKey grp_expandKey_fu_351(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_expandKey_fu_351_ap_start),
    .ap_done(grp_expandKey_fu_351_ap_done),
    .ap_idle(grp_expandKey_fu_351_ap_idle),
    .ap_ready(grp_expandKey_fu_351_ap_ready),
    .expandedKey_0_address0(grp_expandKey_fu_351_expandedKey_0_address0),
    .expandedKey_0_ce0(grp_expandKey_fu_351_expandedKey_0_ce0),
    .expandedKey_0_we0(grp_expandKey_fu_351_expandedKey_0_we0),
    .expandedKey_0_d0(grp_expandKey_fu_351_expandedKey_0_d0),
    .expandedKey_0_q0(grp_expandKey_fu_351_expandedKey_0_q0),
    .expandedKey_0_address1(grp_expandKey_fu_351_expandedKey_0_address1),
    .expandedKey_0_ce1(grp_expandKey_fu_351_expandedKey_0_ce1),
    .expandedKey_0_we1(grp_expandKey_fu_351_expandedKey_0_we1),
    .expandedKey_0_d1(grp_expandKey_fu_351_expandedKey_0_d1),
    .expandedKey_0_q1(grp_expandKey_fu_351_expandedKey_0_q1),
    .expandedKey_1_address0(grp_expandKey_fu_351_expandedKey_1_address0),
    .expandedKey_1_ce0(grp_expandKey_fu_351_expandedKey_1_ce0),
    .expandedKey_1_we0(grp_expandKey_fu_351_expandedKey_1_we0),
    .expandedKey_1_d0(grp_expandKey_fu_351_expandedKey_1_d0),
    .expandedKey_1_q0(grp_expandKey_fu_351_expandedKey_1_q0),
    .expandedKey_1_address1(grp_expandKey_fu_351_expandedKey_1_address1),
    .expandedKey_1_ce1(grp_expandKey_fu_351_expandedKey_1_ce1),
    .expandedKey_1_we1(grp_expandKey_fu_351_expandedKey_1_we1),
    .expandedKey_1_d1(grp_expandKey_fu_351_expandedKey_1_d1),
    .expandedKey_1_q1(grp_expandKey_fu_351_expandedKey_1_q1),
    .key_array128_address0(grp_expandKey_fu_351_key_array128_address0),
    .key_array128_ce0(grp_expandKey_fu_351_key_array128_ce0),
    .key_array128_q0(key_array128_q0),
    .key_array128_address1(grp_expandKey_fu_351_key_array128_address1),
    .key_array128_ce1(grp_expandKey_fu_351_key_array128_ce1),
    .key_array128_q1(key_array128_q1),
    .key_array128_address2(grp_expandKey_fu_351_key_array128_address2),
    .key_array128_ce2(grp_expandKey_fu_351_key_array128_ce2),
    .key_array128_q2(key_array128_q2),
    .key_array128_address3(grp_expandKey_fu_351_key_array128_address3),
    .key_array128_ce3(grp_expandKey_fu_351_key_array128_ce3),
    .key_array128_q3(key_array128_q3),
    .key(key_array_reg_218),
    .size(cipherkey_size_reg_233),
    .expandedKeySize(grp_expandKey_fu_351_expandedKeySize)
);

aes_aes_main grp_aes_main_fu_367(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_main_fu_367_ap_start),
    .ap_done(grp_aes_main_fu_367_ap_done),
    .ap_idle(grp_aes_main_fu_367_ap_idle),
    .ap_ready(grp_aes_main_fu_367_ap_ready),
    .state_address0(grp_aes_main_fu_367_state_address0),
    .state_ce0(grp_aes_main_fu_367_state_ce0),
    .state_we0(grp_aes_main_fu_367_state_we0),
    .state_d0(grp_aes_main_fu_367_state_d0),
    .state_q0(block_1_q0),
    .state_address1(grp_aes_main_fu_367_state_address1),
    .state_ce1(grp_aes_main_fu_367_state_ce1),
    .state_we1(grp_aes_main_fu_367_state_we1),
    .state_d1(grp_aes_main_fu_367_state_d1),
    .state_q1(block_1_q1),
    .expandedKey_0_address0(grp_aes_main_fu_367_expandedKey_0_address0),
    .expandedKey_0_ce0(grp_aes_main_fu_367_expandedKey_0_ce0),
    .expandedKey_0_q0(expandedKey_2_q0),
    .expandedKey_0_address1(grp_aes_main_fu_367_expandedKey_0_address1),
    .expandedKey_0_ce1(grp_aes_main_fu_367_expandedKey_0_ce1),
    .expandedKey_0_q1(expandedKey_2_q1),
    .expandedKey_1_address0(grp_aes_main_fu_367_expandedKey_1_address0),
    .expandedKey_1_ce0(grp_aes_main_fu_367_expandedKey_1_ce0),
    .expandedKey_1_q0(expandedKey_3_q0),
    .expandedKey_1_address1(grp_aes_main_fu_367_expandedKey_1_address1),
    .expandedKey_1_ce1(grp_aes_main_fu_367_expandedKey_1_ce1),
    .expandedKey_1_q1(expandedKey_3_q1),
    .nbrRounds(nbrRounds_reg_248),
    .sbox_address0(grp_aes_main_fu_367_sbox_address0),
    .sbox_ce0(grp_aes_main_fu_367_sbox_ce0),
    .sbox_q0(sbox_q0),
    .sbox_address1(grp_aes_main_fu_367_sbox_address1),
    .sbox_ce1(grp_aes_main_fu_367_sbox_ce1),
    .sbox_q1(sbox_q1)
);

aes_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4 grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_start),
    .ap_done(grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_done),
    .ap_idle(grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_idle),
    .ap_ready(grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_ready),
    .block_1_address0(grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_block_1_address0),
    .block_1_ce0(grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_block_1_ce0),
    .block_1_q0(block_1_q0),
    .ciphertext_array_address0(grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ciphertext_array_address0),
    .ciphertext_array_ce0(grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ciphertext_array_ce0),
    .ciphertext_array_we0(grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ciphertext_array_we0),
    .ciphertext_array_d0(grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ciphertext_array_d0)
);

aes_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2 grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_start),
    .ap_done(grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_done),
    .ap_idle(grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_idle),
    .ap_ready(grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_ready),
    .ciphertext_array_address0(grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ciphertext_array_address0),
    .ciphertext_array_ce0(grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ciphertext_array_ce0),
    .ciphertext_array_q0(ciphertext_array_q0),
    .block_r_address0(grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_block_r_address0),
    .block_r_ce0(grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_block_r_ce0),
    .block_r_we0(grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_block_r_we0),
    .block_r_d0(grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_block_r_d0)
);

aes_aes_invMain grp_aes_invMain_fu_390(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_invMain_fu_390_ap_start),
    .ap_done(grp_aes_invMain_fu_390_ap_done),
    .ap_idle(grp_aes_invMain_fu_390_ap_idle),
    .ap_ready(grp_aes_invMain_fu_390_ap_ready),
    .state_address0(grp_aes_invMain_fu_390_state_address0),
    .state_ce0(grp_aes_invMain_fu_390_state_ce0),
    .state_we0(grp_aes_invMain_fu_390_state_we0),
    .state_d0(grp_aes_invMain_fu_390_state_d0),
    .state_q0(block_q0),
    .state_address1(grp_aes_invMain_fu_390_state_address1),
    .state_ce1(grp_aes_invMain_fu_390_state_ce1),
    .state_we1(grp_aes_invMain_fu_390_state_we1),
    .state_d1(grp_aes_invMain_fu_390_state_d1),
    .state_q1(block_q1),
    .expandedKey_0_address0(grp_aes_invMain_fu_390_expandedKey_0_address0),
    .expandedKey_0_ce0(grp_aes_invMain_fu_390_expandedKey_0_ce0),
    .expandedKey_0_q0(expandedKey_q0),
    .expandedKey_0_address1(grp_aes_invMain_fu_390_expandedKey_0_address1),
    .expandedKey_0_ce1(grp_aes_invMain_fu_390_expandedKey_0_ce1),
    .expandedKey_0_q1(expandedKey_q1),
    .expandedKey_1_address0(grp_aes_invMain_fu_390_expandedKey_1_address0),
    .expandedKey_1_ce0(grp_aes_invMain_fu_390_expandedKey_1_ce0),
    .expandedKey_1_q0(expandedKey_1_q0),
    .expandedKey_1_address1(grp_aes_invMain_fu_390_expandedKey_1_address1),
    .expandedKey_1_ce1(grp_aes_invMain_fu_390_expandedKey_1_ce1),
    .expandedKey_1_q1(expandedKey_1_q1),
    .nbrRounds(nbrRounds_1_reg_263)
);

aes_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4 grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_start),
    .ap_done(grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_done),
    .ap_idle(grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_idle),
    .ap_ready(grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_ready),
    .block_r_address0(grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_block_r_address0),
    .block_r_ce0(grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_block_r_ce0),
    .block_r_q0(block_q0),
    .decryptedtext_array_address0(grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_decryptedtext_array_address0),
    .decryptedtext_array_ce0(grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_decryptedtext_array_ce0),
    .decryptedtext_array_we0(grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_decryptedtext_array_we0),
    .decryptedtext_array_d0(grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_decryptedtext_array_d0)
);

aes_aes_Pipeline_ciphertextLoop grp_aes_Pipeline_ciphertextLoop_fu_407(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_Pipeline_ciphertextLoop_fu_407_ap_start),
    .ap_done(grp_aes_Pipeline_ciphertextLoop_fu_407_ap_done),
    .ap_idle(grp_aes_Pipeline_ciphertextLoop_fu_407_ap_idle),
    .ap_ready(grp_aes_Pipeline_ciphertextLoop_fu_407_ap_ready),
    .ciphertext_and_decryptedtext_TREADY(grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TREADY),
    .ciphertext_array_address0(grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_array_address0),
    .ciphertext_array_ce0(grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_array_ce0),
    .ciphertext_array_q0(ciphertext_array_q0),
    .tmp_keep_V_reload(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_keep_V_out),
    .tmp_strb_V_reload(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_strb_V_out),
    .tmp_user_V_reload(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_user_V_out),
    .tmp_id_V_reload(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_id_V_out),
    .tmp_dest_V_reload(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_dest_V_out),
    .ciphertext_and_decryptedtext_TDATA(grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TDATA),
    .ciphertext_and_decryptedtext_TVALID(grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TVALID),
    .ciphertext_and_decryptedtext_TKEEP(grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TKEEP),
    .ciphertext_and_decryptedtext_TSTRB(grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TSTRB),
    .ciphertext_and_decryptedtext_TUSER(grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TUSER),
    .ciphertext_and_decryptedtext_TLAST(grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TLAST),
    .ciphertext_and_decryptedtext_TID(grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TID),
    .ciphertext_and_decryptedtext_TDEST(grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TDEST)
);

aes_aes_Pipeline_decryptedTextLoop grp_aes_Pipeline_decryptedTextLoop_fu_431(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_start),
    .ap_done(grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_done),
    .ap_idle(grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_idle),
    .ap_ready(grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_ready),
    .ciphertext_and_decryptedtext_TREADY(grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TREADY),
    .decryptedtext_array_address0(grp_aes_Pipeline_decryptedTextLoop_fu_431_decryptedtext_array_address0),
    .decryptedtext_array_ce0(grp_aes_Pipeline_decryptedTextLoop_fu_431_decryptedtext_array_ce0),
    .decryptedtext_array_q0(decryptedtext_array_q0),
    .tmp_keep_V_reload(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_keep_V_out),
    .tmp_strb_V_reload(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_strb_V_out),
    .tmp_user_V_reload(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_user_V_out),
    .tmp_id_V_reload(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_id_V_out),
    .tmp_dest_V_reload(grp_aes_Pipeline_plaintextLoop_fu_320_tmp_dest_V_out),
    .ciphertext_and_decryptedtext_TDATA(grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TDATA),
    .ciphertext_and_decryptedtext_TVALID(grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TVALID),
    .ciphertext_and_decryptedtext_TKEEP(grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TKEEP),
    .ciphertext_and_decryptedtext_TSTRB(grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TSTRB),
    .ciphertext_and_decryptedtext_TUSER(grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TUSER),
    .ciphertext_and_decryptedtext_TLAST(grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TLAST),
    .ciphertext_and_decryptedtext_TID(grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TID),
    .ciphertext_and_decryptedtext_TDEST(grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TDEST)
);

aes_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .enable_in(enable_in),
    .power_reading_out(power_reading_out),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

aes_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mode(mode),
    .enable_out(enable_out),
    .power_reading_in(power_reading_in)
);

aes_regslice_both #(
    .DataWidth( 8 ))
regslice_both_key_and_plaintext_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(key_and_plaintext_TDATA),
    .vld_in(key_and_plaintext_TVALID),
    .ack_in(regslice_both_key_and_plaintext_V_data_V_U_ack_in),
    .data_out(key_and_plaintext_TDATA_int_regslice),
    .vld_out(key_and_plaintext_TVALID_int_regslice),
    .ack_out(key_and_plaintext_TREADY_int_regslice),
    .apdone_blk(regslice_both_key_and_plaintext_V_data_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 1 ))
regslice_both_key_and_plaintext_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(key_and_plaintext_TKEEP),
    .vld_in(key_and_plaintext_TVALID),
    .ack_in(regslice_both_key_and_plaintext_V_keep_V_U_ack_in),
    .data_out(key_and_plaintext_TKEEP_int_regslice),
    .vld_out(regslice_both_key_and_plaintext_V_keep_V_U_vld_out),
    .ack_out(key_and_plaintext_TREADY_int_regslice),
    .apdone_blk(regslice_both_key_and_plaintext_V_keep_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 1 ))
regslice_both_key_and_plaintext_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(key_and_plaintext_TSTRB),
    .vld_in(key_and_plaintext_TVALID),
    .ack_in(regslice_both_key_and_plaintext_V_strb_V_U_ack_in),
    .data_out(key_and_plaintext_TSTRB_int_regslice),
    .vld_out(regslice_both_key_and_plaintext_V_strb_V_U_vld_out),
    .ack_out(key_and_plaintext_TREADY_int_regslice),
    .apdone_blk(regslice_both_key_and_plaintext_V_strb_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 1 ))
regslice_both_key_and_plaintext_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(key_and_plaintext_TUSER),
    .vld_in(key_and_plaintext_TVALID),
    .ack_in(regslice_both_key_and_plaintext_V_user_V_U_ack_in),
    .data_out(key_and_plaintext_TUSER_int_regslice),
    .vld_out(regslice_both_key_and_plaintext_V_user_V_U_vld_out),
    .ack_out(key_and_plaintext_TREADY_int_regslice),
    .apdone_blk(regslice_both_key_and_plaintext_V_user_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 1 ))
regslice_both_key_and_plaintext_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(key_and_plaintext_TLAST),
    .vld_in(key_and_plaintext_TVALID),
    .ack_in(regslice_both_key_and_plaintext_V_last_V_U_ack_in),
    .data_out(key_and_plaintext_TLAST_int_regslice),
    .vld_out(regslice_both_key_and_plaintext_V_last_V_U_vld_out),
    .ack_out(key_and_plaintext_TREADY_int_regslice),
    .apdone_blk(regslice_both_key_and_plaintext_V_last_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 1 ))
regslice_both_key_and_plaintext_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(key_and_plaintext_TID),
    .vld_in(key_and_plaintext_TVALID),
    .ack_in(regslice_both_key_and_plaintext_V_id_V_U_ack_in),
    .data_out(key_and_plaintext_TID_int_regslice),
    .vld_out(regslice_both_key_and_plaintext_V_id_V_U_vld_out),
    .ack_out(key_and_plaintext_TREADY_int_regslice),
    .apdone_blk(regslice_both_key_and_plaintext_V_id_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 1 ))
regslice_both_key_and_plaintext_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(key_and_plaintext_TDEST),
    .vld_in(key_and_plaintext_TVALID),
    .ack_in(regslice_both_key_and_plaintext_V_dest_V_U_ack_in),
    .data_out(key_and_plaintext_TDEST_int_regslice),
    .vld_out(regslice_both_key_and_plaintext_V_dest_V_U_vld_out),
    .ack_out(key_and_plaintext_TREADY_int_regslice),
    .apdone_blk(regslice_both_key_and_plaintext_V_dest_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 8 ))
regslice_both_ciphertext_and_decryptedtext_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ciphertext_and_decryptedtext_TDATA_int_regslice),
    .vld_in(ciphertext_and_decryptedtext_TVALID_int_regslice),
    .ack_in(ciphertext_and_decryptedtext_TREADY_int_regslice),
    .data_out(ciphertext_and_decryptedtext_TDATA),
    .vld_out(regslice_both_ciphertext_and_decryptedtext_V_data_V_U_vld_out),
    .ack_out(ciphertext_and_decryptedtext_TREADY),
    .apdone_blk(regslice_both_ciphertext_and_decryptedtext_V_data_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 1 ))
regslice_both_ciphertext_and_decryptedtext_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ciphertext_and_decryptedtext_TKEEP_int_regslice),
    .vld_in(ciphertext_and_decryptedtext_TVALID_int_regslice),
    .ack_in(regslice_both_ciphertext_and_decryptedtext_V_keep_V_U_ack_in_dummy),
    .data_out(ciphertext_and_decryptedtext_TKEEP),
    .vld_out(regslice_both_ciphertext_and_decryptedtext_V_keep_V_U_vld_out),
    .ack_out(ciphertext_and_decryptedtext_TREADY),
    .apdone_blk(regslice_both_ciphertext_and_decryptedtext_V_keep_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 1 ))
regslice_both_ciphertext_and_decryptedtext_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ciphertext_and_decryptedtext_TSTRB_int_regslice),
    .vld_in(ciphertext_and_decryptedtext_TVALID_int_regslice),
    .ack_in(regslice_both_ciphertext_and_decryptedtext_V_strb_V_U_ack_in_dummy),
    .data_out(ciphertext_and_decryptedtext_TSTRB),
    .vld_out(regslice_both_ciphertext_and_decryptedtext_V_strb_V_U_vld_out),
    .ack_out(ciphertext_and_decryptedtext_TREADY),
    .apdone_blk(regslice_both_ciphertext_and_decryptedtext_V_strb_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 1 ))
regslice_both_ciphertext_and_decryptedtext_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ciphertext_and_decryptedtext_TUSER_int_regslice),
    .vld_in(ciphertext_and_decryptedtext_TVALID_int_regslice),
    .ack_in(regslice_both_ciphertext_and_decryptedtext_V_user_V_U_ack_in_dummy),
    .data_out(ciphertext_and_decryptedtext_TUSER),
    .vld_out(regslice_both_ciphertext_and_decryptedtext_V_user_V_U_vld_out),
    .ack_out(ciphertext_and_decryptedtext_TREADY),
    .apdone_blk(regslice_both_ciphertext_and_decryptedtext_V_user_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 1 ))
regslice_both_ciphertext_and_decryptedtext_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ciphertext_and_decryptedtext_TLAST_int_regslice),
    .vld_in(ciphertext_and_decryptedtext_TVALID_int_regslice),
    .ack_in(regslice_both_ciphertext_and_decryptedtext_V_last_V_U_ack_in_dummy),
    .data_out(ciphertext_and_decryptedtext_TLAST),
    .vld_out(regslice_both_ciphertext_and_decryptedtext_V_last_V_U_vld_out),
    .ack_out(ciphertext_and_decryptedtext_TREADY),
    .apdone_blk(regslice_both_ciphertext_and_decryptedtext_V_last_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 1 ))
regslice_both_ciphertext_and_decryptedtext_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ciphertext_and_decryptedtext_TID_int_regslice),
    .vld_in(ciphertext_and_decryptedtext_TVALID_int_regslice),
    .ack_in(regslice_both_ciphertext_and_decryptedtext_V_id_V_U_ack_in_dummy),
    .data_out(ciphertext_and_decryptedtext_TID),
    .vld_out(regslice_both_ciphertext_and_decryptedtext_V_id_V_U_vld_out),
    .ack_out(ciphertext_and_decryptedtext_TREADY),
    .apdone_blk(regslice_both_ciphertext_and_decryptedtext_V_id_V_U_apdone_blk)
);

aes_regslice_both #(
    .DataWidth( 1 ))
regslice_both_ciphertext_and_decryptedtext_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ciphertext_and_decryptedtext_TDEST_int_regslice),
    .vld_in(ciphertext_and_decryptedtext_TVALID_int_regslice),
    .ack_in(regslice_both_ciphertext_and_decryptedtext_V_dest_V_U_ack_in_dummy),
    .data_out(ciphertext_and_decryptedtext_TDEST),
    .vld_out(regslice_both_ciphertext_and_decryptedtext_V_dest_V_U_vld_out),
    .ack_out(ciphertext_and_decryptedtext_TREADY),
    .apdone_blk(regslice_both_ciphertext_and_decryptedtext_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_Pipeline_1_fu_281_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_aes_Pipeline_1_fu_281_ap_start_reg <= 1'b1;
        end else if ((grp_aes_Pipeline_1_fu_281_ap_ready == 1'b1)) begin
            grp_aes_Pipeline_1_fu_281_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_Pipeline_2_fu_287_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_aes_Pipeline_2_fu_287_ap_start_reg <= 1'b1;
        end else if ((grp_aes_Pipeline_2_fu_287_ap_ready == 1'b1)) begin
            grp_aes_Pipeline_2_fu_287_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_Pipeline_3_fu_292_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_aes_Pipeline_3_fu_292_ap_start_reg <= 1'b1;
        end else if ((grp_aes_Pipeline_3_fu_292_ap_ready == 1'b1)) begin
            grp_aes_Pipeline_3_fu_292_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_start_reg <= 1'b1;
        end else if ((grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_ready == 1'b1)) begin
            grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_start_reg <= 1'b1;
        end else if ((grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_ready == 1'b1)) begin
            grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state12) & ((cipherkey_size_reg_233 == 6'd16) | ((cipherkey_size_reg_233 == 6'd24) | (cipherkey_size_reg_233 == 6'd32))))) begin
            grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_start_reg <= 1'b1;
        end else if ((grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_ready == 1'b1)) begin
            grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_start_reg <= 1'b1;
        end else if ((grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_ready == 1'b1)) begin
            grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_start_reg <= 1'b1;
        end else if ((grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_ready == 1'b1)) begin
            grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_Pipeline_ciphertextLoop_fu_407_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state23_on_subcall_done) & (1'b1 == ap_CS_fsm_state23))) begin
            grp_aes_Pipeline_ciphertextLoop_fu_407_ap_start_reg <= 1'b1;
        end else if ((grp_aes_Pipeline_ciphertextLoop_fu_407_ap_ready == 1'b1)) begin
            grp_aes_Pipeline_ciphertextLoop_fu_407_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_start_reg <= 1'b1;
        end else if ((grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_ready == 1'b1)) begin
            grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_Pipeline_plaintextLoop_fu_320_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_aes_Pipeline_plaintextLoop_fu_320_ap_start_reg <= 1'b1;
        end else if ((grp_aes_Pipeline_plaintextLoop_fu_320_ap_ready == 1'b1)) begin
            grp_aes_Pipeline_plaintextLoop_fu_320_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_invMain_fu_390_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            grp_aes_invMain_fu_390_ap_start_reg <= 1'b1;
        end else if ((grp_aes_invMain_fu_390_ap_ready == 1'b1)) begin
            grp_aes_invMain_fu_390_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes_main_fu_367_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            grp_aes_main_fu_367_ap_start_reg <= 1'b1;
        end else if ((grp_aes_main_fu_367_ap_ready == 1'b1)) begin
            grp_aes_main_fu_367_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_expandKey_fu_351_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state12) & ((cipherkey_size_reg_233 == 6'd16) | ((cipherkey_size_reg_233 == 6'd24) | (cipherkey_size_reg_233 == 6'd32)))))) begin
            grp_expandKey_fu_351_ap_start_reg <= 1'b1;
        end else if ((grp_expandKey_fu_351_ap_ready == 1'b1)) begin
            grp_expandKey_fu_351_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_aes_Pipeline_3_fu_292_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        if ((mode_read_read_fu_212_p2 == 32'd128)) begin
                        cipherkey_size_reg_233[3] <= 1'b0;
            cipherkey_size_reg_233[4] <= 1'b1;
            cipherkey_size_reg_233[5] <= 1'b0;
        end else if ((mode_read_read_fu_212_p2 == 32'd192)) begin
                        cipherkey_size_reg_233[3] <= 1'b1;
            cipherkey_size_reg_233[4] <= 1'b1;
            cipherkey_size_reg_233[5] <= 1'b0;
        end else if ((mode_read_read_fu_212_p2 == 32'd256)) begin
                        cipherkey_size_reg_233[3] <= 1'b0;
            cipherkey_size_reg_233[4] <= 1'b0;
            cipherkey_size_reg_233[5] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_aes_Pipeline_3_fu_292_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        if ((mode_read_read_fu_212_p2 == 32'd128)) begin
                        key_array_reg_218[9] <= 1'b0;
            key_array_reg_218[10] <= 1'b0;
        end else if ((mode_read_read_fu_212_p2 == 32'd192)) begin
                        key_array_reg_218[9] <= 1'b1;
            key_array_reg_218[10] <= 1'b0;
        end else if ((mode_read_read_fu_212_p2 == 32'd256)) begin
                        key_array_reg_218[9] <= 1'b0;
            key_array_reg_218[10] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state17_on_subcall_done) & (1'b1 == ap_CS_fsm_state17))) begin
        if ((cipherkey_size_reg_233 == 6'd16)) begin
                        nbrRounds_1_reg_263[1] <= 1'b1;
            nbrRounds_1_reg_263[2] <= 1'b0;
        end else if ((cipherkey_size_reg_233 == 6'd24)) begin
                        nbrRounds_1_reg_263[1] <= 1'b0;
            nbrRounds_1_reg_263[2] <= 1'b1;
        end else if ((cipherkey_size_reg_233 == 6'd32)) begin
                        nbrRounds_1_reg_263[1] <= 1'b1;
            nbrRounds_1_reg_263[2] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        if ((cipherkey_size_reg_233 == 6'd16)) begin
                        nbrRounds_reg_248[1] <= 1'b1;
            nbrRounds_reg_248[2] <= 1'b0;
        end else if ((cipherkey_size_reg_233 == 6'd24)) begin
                        nbrRounds_reg_248[1] <= 1'b0;
            nbrRounds_reg_248[2] <= 1'b1;
        end else if ((cipherkey_size_reg_233 == 6'd32)) begin
                        nbrRounds_reg_248[1] <= 1'b1;
            nbrRounds_reg_248[2] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        expandedKeySize_1_reg_566[6 : 5] <= expandedKeySize_1_fu_496_p2[6 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ((cipherkey_size_reg_233 == 6'd16) | ((cipherkey_size_reg_233 == 6'd24) | (cipherkey_size_reg_233 == 6'd32))))) begin
        expandedKeySize_reg_561[7 : 5] <= expandedKeySize_fu_481_p2[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_4_0_0_0115_phi_loc_load_reg_551 <= grp_aes_Pipeline_plaintextLoop_fu_320_p_4_0_0_0115_phi_out;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((grp_aes_Pipeline_plaintextLoop_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state13_on_subcall_done)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((grp_aes_main_fu_367_ap_done == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state17_on_subcall_done)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state19_on_subcall_done)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((grp_aes_invMain_fu_390_ap_done == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

assign ap_ST_fsm_state22_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state23_on_subcall_done)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_aes_Pipeline_ciphertextLoop_fu_407_ap_done == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

always @ (*) begin
    if ((grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_done == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_ciphertext_and_decryptedtext_V_data_V_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_aes_Pipeline_1_fu_281_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_aes_Pipeline_2_fu_287_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_aes_Pipeline_3_fu_292_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_done == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((regslice_both_ciphertext_and_decryptedtext_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        if ((cipherkey_size_reg_233 == 6'd16)) begin
            ap_phi_mux_nbrRounds_phi_fu_251_p6 = 4'd10;
        end else if ((cipherkey_size_reg_233 == 6'd24)) begin
            ap_phi_mux_nbrRounds_phi_fu_251_p6 = 4'd12;
        end else if ((cipherkey_size_reg_233 == 6'd32)) begin
            ap_phi_mux_nbrRounds_phi_fu_251_p6 = 4'd14;
        end else begin
            ap_phi_mux_nbrRounds_phi_fu_251_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_nbrRounds_phi_fu_251_p6 = 'bx;
    end
end

always @ (*) begin
    if (((regslice_both_ciphertext_and_decryptedtext_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op120_call_state17 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        block_1_address0 = grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_block_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        block_1_address0 = grp_aes_main_fu_367_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        block_1_address0 = grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_block_1_address0;
    end else begin
        block_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_predicate_op120_call_state17 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        block_1_ce0 = grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_block_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        block_1_ce0 = grp_aes_main_fu_367_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        block_1_ce0 = grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_block_1_ce0;
    end else begin
        block_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        block_1_ce1 = grp_aes_main_fu_367_state_ce1;
    end else begin
        block_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        block_1_d0 = grp_aes_main_fu_367_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        block_1_d0 = grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_block_1_d0;
    end else begin
        block_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        block_1_we0 = grp_aes_main_fu_367_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        block_1_we0 = grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_block_1_we0;
    end else begin
        block_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        block_1_we1 = grp_aes_main_fu_367_state_we1;
    end else begin
        block_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & ((cipherkey_size_reg_233 == 6'd16) | ((cipherkey_size_reg_233 == 6'd24) | (cipherkey_size_reg_233 == 6'd32))))) begin
        block_address0 = grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_block_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        block_address0 = grp_aes_invMain_fu_390_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        block_address0 = grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_block_r_address0;
    end else begin
        block_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & ((cipherkey_size_reg_233 == 6'd16) | ((cipherkey_size_reg_233 == 6'd24) | (cipherkey_size_reg_233 == 6'd32))))) begin
        block_ce0 = grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_block_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        block_ce0 = grp_aes_invMain_fu_390_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        block_ce0 = grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_block_r_ce0;
    end else begin
        block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        block_ce1 = grp_aes_invMain_fu_390_state_ce1;
    end else begin
        block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        block_d0 = grp_aes_invMain_fu_390_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        block_d0 = grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_block_r_d0;
    end else begin
        block_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        block_we0 = grp_aes_invMain_fu_390_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        block_we0 = grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_block_r_we0;
    end else begin
        block_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        block_we1 = grp_aes_invMain_fu_390_state_we1;
    end else begin
        block_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        ciphertext_and_decryptedtext_TDATA_int_regslice = grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TDATA;
    end else if (((grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ciphertext_and_decryptedtext_TDATA_int_regslice = grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TDATA;
    end else begin
        ciphertext_and_decryptedtext_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        ciphertext_and_decryptedtext_TDEST_int_regslice = grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TDEST;
    end else if (((grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ciphertext_and_decryptedtext_TDEST_int_regslice = grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TDEST;
    end else begin
        ciphertext_and_decryptedtext_TDEST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        ciphertext_and_decryptedtext_TID_int_regslice = grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TID;
    end else if (((grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ciphertext_and_decryptedtext_TID_int_regslice = grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TID;
    end else begin
        ciphertext_and_decryptedtext_TID_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        ciphertext_and_decryptedtext_TKEEP_int_regslice = grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TKEEP;
    end else if (((grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ciphertext_and_decryptedtext_TKEEP_int_regslice = grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TKEEP;
    end else begin
        ciphertext_and_decryptedtext_TKEEP_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        ciphertext_and_decryptedtext_TLAST_int_regslice = grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TLAST;
    end else if (((grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ciphertext_and_decryptedtext_TLAST_int_regslice = grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TLAST;
    end else begin
        ciphertext_and_decryptedtext_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        ciphertext_and_decryptedtext_TSTRB_int_regslice = grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TSTRB;
    end else if (((grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ciphertext_and_decryptedtext_TSTRB_int_regslice = grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TSTRB;
    end else begin
        ciphertext_and_decryptedtext_TSTRB_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        ciphertext_and_decryptedtext_TUSER_int_regslice = grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TUSER;
    end else if (((grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ciphertext_and_decryptedtext_TUSER_int_regslice = grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TUSER;
    end else begin
        ciphertext_and_decryptedtext_TUSER_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ciphertext_and_decryptedtext_TVALID_int_regslice = grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        ciphertext_and_decryptedtext_TVALID_int_regslice = grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TVALID;
    end else begin
        ciphertext_and_decryptedtext_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ciphertext_array_address0 = grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_array_address0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        ciphertext_array_address0 = grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ciphertext_array_address0;
    end else if (((ap_predicate_op120_call_state17 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        ciphertext_array_address0 = grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ciphertext_array_address0;
    end else begin
        ciphertext_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ciphertext_array_ce0 = grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_array_ce0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        ciphertext_array_ce0 = grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ciphertext_array_ce0;
    end else if (((ap_predicate_op120_call_state17 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        ciphertext_array_ce0 = grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ciphertext_array_ce0;
    end else begin
        ciphertext_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op120_call_state17 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        ciphertext_array_we0 = grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ciphertext_array_we0;
    end else begin
        ciphertext_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        decryptedtext_array_address0 = grp_aes_Pipeline_decryptedTextLoop_fu_431_decryptedtext_array_address0;
    end else if (((1'b1 == ap_CS_fsm_state23) & ((cipherkey_size_reg_233 == 6'd16) | ((cipherkey_size_reg_233 == 6'd24) | (cipherkey_size_reg_233 == 6'd32))))) begin
        decryptedtext_array_address0 = grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_decryptedtext_array_address0;
    end else begin
        decryptedtext_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        decryptedtext_array_ce0 = grp_aes_Pipeline_decryptedTextLoop_fu_431_decryptedtext_array_ce0;
    end else if (((1'b1 == ap_CS_fsm_state23) & ((cipherkey_size_reg_233 == 6'd16) | ((cipherkey_size_reg_233 == 6'd24) | (cipherkey_size_reg_233 == 6'd32))))) begin
        decryptedtext_array_ce0 = grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_decryptedtext_array_ce0;
    end else begin
        decryptedtext_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & ((cipherkey_size_reg_233 == 6'd16) | ((cipherkey_size_reg_233 == 6'd24) | (cipherkey_size_reg_233 == 6'd32))))) begin
        decryptedtext_array_we0 = grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_decryptedtext_array_we0;
    end else begin
        decryptedtext_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        expandedKey_1_address0 = grp_aes_invMain_fu_390_expandedKey_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_1_address0 = grp_expandKey_fu_351_expandedKey_1_address0;
    end else begin
        expandedKey_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        expandedKey_1_address1 = grp_aes_invMain_fu_390_expandedKey_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_1_address1 = grp_expandKey_fu_351_expandedKey_1_address1;
    end else begin
        expandedKey_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        expandedKey_1_ce0 = grp_aes_invMain_fu_390_expandedKey_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_1_ce0 = grp_expandKey_fu_351_expandedKey_1_ce0;
    end else begin
        expandedKey_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        expandedKey_1_ce1 = grp_aes_invMain_fu_390_expandedKey_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_1_ce1 = grp_expandKey_fu_351_expandedKey_1_ce1;
    end else begin
        expandedKey_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_1_we0 = grp_expandKey_fu_351_expandedKey_1_we0;
    end else begin
        expandedKey_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_1_we1 = grp_expandKey_fu_351_expandedKey_1_we1;
    end else begin
        expandedKey_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_2_address0 = grp_aes_main_fu_367_expandedKey_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_2_address0 = grp_expandKey_fu_351_expandedKey_0_address0;
    end else begin
        expandedKey_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_2_address1 = grp_aes_main_fu_367_expandedKey_0_address1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_2_address1 = grp_expandKey_fu_351_expandedKey_0_address1;
    end else begin
        expandedKey_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_2_ce0 = grp_aes_main_fu_367_expandedKey_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_2_ce0 = grp_expandKey_fu_351_expandedKey_0_ce0;
    end else begin
        expandedKey_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_2_ce1 = grp_aes_main_fu_367_expandedKey_0_ce1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_2_ce1 = grp_expandKey_fu_351_expandedKey_0_ce1;
    end else begin
        expandedKey_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_2_we0 = grp_expandKey_fu_351_expandedKey_0_we0;
    end else begin
        expandedKey_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_2_we1 = grp_expandKey_fu_351_expandedKey_0_we1;
    end else begin
        expandedKey_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_3_address0 = grp_aes_main_fu_367_expandedKey_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_3_address0 = grp_expandKey_fu_351_expandedKey_1_address0;
    end else begin
        expandedKey_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_3_address1 = grp_aes_main_fu_367_expandedKey_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_3_address1 = grp_expandKey_fu_351_expandedKey_1_address1;
    end else begin
        expandedKey_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_3_ce0 = grp_aes_main_fu_367_expandedKey_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_3_ce0 = grp_expandKey_fu_351_expandedKey_1_ce0;
    end else begin
        expandedKey_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_3_ce1 = grp_aes_main_fu_367_expandedKey_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_3_ce1 = grp_expandKey_fu_351_expandedKey_1_ce1;
    end else begin
        expandedKey_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_3_we0 = grp_expandKey_fu_351_expandedKey_1_we0;
    end else begin
        expandedKey_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_3_we1 = grp_expandKey_fu_351_expandedKey_1_we1;
    end else begin
        expandedKey_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        expandedKey_address0 = grp_aes_invMain_fu_390_expandedKey_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_address0 = grp_expandKey_fu_351_expandedKey_0_address0;
    end else begin
        expandedKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        expandedKey_address1 = grp_aes_invMain_fu_390_expandedKey_0_address1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_address1 = grp_expandKey_fu_351_expandedKey_0_address1;
    end else begin
        expandedKey_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        expandedKey_ce0 = grp_aes_invMain_fu_390_expandedKey_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_ce0 = grp_expandKey_fu_351_expandedKey_0_ce0;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        expandedKey_ce1 = grp_aes_invMain_fu_390_expandedKey_0_ce1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_ce1 = grp_expandKey_fu_351_expandedKey_0_ce1;
    end else begin
        expandedKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_we0 = grp_expandKey_fu_351_expandedKey_0_we0;
    end else begin
        expandedKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_we1 = grp_expandKey_fu_351_expandedKey_0_we1;
    end else begin
        expandedKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_expandKey_fu_351_expandedKeySize = expandedKeySize_1_reg_566;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_expandKey_fu_351_expandedKeySize = expandedKeySize_reg_561;
    end else begin
        grp_expandKey_fu_351_expandedKeySize = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_expandKey_fu_351_expandedKey_0_q0 = expandedKey_q0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_expandKey_fu_351_expandedKey_0_q0 = expandedKey_2_q0;
    end else begin
        grp_expandKey_fu_351_expandedKey_0_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_expandKey_fu_351_expandedKey_0_q1 = expandedKey_q1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_expandKey_fu_351_expandedKey_0_q1 = expandedKey_2_q1;
    end else begin
        grp_expandKey_fu_351_expandedKey_0_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_expandKey_fu_351_expandedKey_1_q0 = expandedKey_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_expandKey_fu_351_expandedKey_1_q0 = expandedKey_3_q0;
    end else begin
        grp_expandKey_fu_351_expandedKey_1_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_expandKey_fu_351_expandedKey_1_q1 = expandedKey_1_q1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_expandKey_fu_351_expandedKey_1_q1 = expandedKey_3_q1;
    end else begin
        grp_expandKey_fu_351_expandedKey_1_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        key_and_plaintext_TREADY_int_regslice = grp_aes_Pipeline_plaintextLoop_fu_320_key_and_plaintext_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        key_and_plaintext_TREADY_int_regslice = grp_aes_Pipeline_cipherkeyLoop_fu_297_key_and_plaintext_TREADY;
    end else begin
        key_and_plaintext_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        key_array128_address0 = grp_expandKey_fu_351_key_array128_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        key_array128_address0 = grp_aes_Pipeline_cipherkeyLoop_fu_297_key_array128_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        key_array128_address0 = grp_aes_Pipeline_3_fu_292_key_array128_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_array128_address0 = grp_aes_Pipeline_2_fu_287_key_array128_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_array128_address0 = grp_aes_Pipeline_1_fu_281_key_array128_address0;
    end else begin
        key_array128_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        key_array128_ce0 = grp_expandKey_fu_351_key_array128_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        key_array128_ce0 = grp_aes_Pipeline_cipherkeyLoop_fu_297_key_array128_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        key_array128_ce0 = grp_aes_Pipeline_3_fu_292_key_array128_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_array128_ce0 = grp_aes_Pipeline_2_fu_287_key_array128_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_array128_ce0 = grp_aes_Pipeline_1_fu_281_key_array128_ce0;
    end else begin
        key_array128_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        key_array128_ce1 = grp_expandKey_fu_351_key_array128_ce1;
    end else begin
        key_array128_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        key_array128_ce2 = grp_expandKey_fu_351_key_array128_ce2;
    end else begin
        key_array128_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        key_array128_ce3 = grp_expandKey_fu_351_key_array128_ce3;
    end else begin
        key_array128_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        key_array128_d0 = grp_aes_Pipeline_cipherkeyLoop_fu_297_key_array128_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        key_array128_d0 = grp_aes_Pipeline_3_fu_292_key_array128_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_array128_d0 = grp_aes_Pipeline_2_fu_287_key_array128_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_array128_d0 = grp_aes_Pipeline_1_fu_281_key_array128_d0;
    end else begin
        key_array128_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        key_array128_we0 = grp_aes_Pipeline_cipherkeyLoop_fu_297_key_array128_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        key_array128_we0 = grp_aes_Pipeline_3_fu_292_key_array128_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_array128_we0 = grp_aes_Pipeline_2_fu_287_key_array128_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_array128_we0 = grp_aes_Pipeline_1_fu_281_key_array128_we0;
    end else begin
        key_array128_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        plaintext_array_address0 = grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_plaintext_array_address0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        plaintext_array_address0 = grp_aes_Pipeline_plaintextLoop_fu_320_plaintext_array_address0;
    end else begin
        plaintext_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        plaintext_array_ce0 = grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_plaintext_array_ce0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        plaintext_array_ce0 = grp_aes_Pipeline_plaintextLoop_fu_320_plaintext_array_ce0;
    end else begin
        plaintext_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        plaintext_array_we0 = grp_aes_Pipeline_plaintextLoop_fu_320_plaintext_array_we0;
    end else begin
        plaintext_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sbox_address0 = grp_aes_main_fu_367_sbox_address0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        sbox_address0 = 8'd0;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sbox_address1 = grp_aes_main_fu_367_sbox_address1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        sbox_address1 = 8'd0;
    end else begin
        sbox_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sbox_ce0 = grp_aes_main_fu_367_sbox_ce0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        sbox_ce0 = 1'b0;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sbox_ce1 = grp_aes_main_fu_367_sbox_ce1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        sbox_ce1 = 1'b0;
    end else begin
        sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_aes_Pipeline_1_fu_281_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_aes_Pipeline_2_fu_287_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_aes_Pipeline_3_fu_292_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6) & ((mode_read_read_fu_212_p2 == 32'd128) | ((mode_read_read_fu_212_p2 == 32'd192) | (mode_read_read_fu_212_p2 == 32'd256))))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~(mode_read_read_fu_212_p2 == 32'd128) & ~(mode_read_read_fu_212_p2 == 32'd192) & ~(mode_read_read_fu_212_p2 == 32'd256) & (grp_aes_Pipeline_3_fu_292_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((grp_aes_Pipeline_plaintextLoop_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if ((~(cipherkey_size_reg_233 == 6'd24) & ~(cipherkey_size_reg_233 == 6'd32) & ~(cipherkey_size_reg_233 == 6'd16) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b0 == ap_block_state13_on_subcall_done) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_aes_main_fu_367_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if ((~(cipherkey_size_reg_233 == 6'd24) & ~(cipherkey_size_reg_233 == 6'd32) & ~(cipherkey_size_reg_233 == 6'd16) & (1'b0 == ap_block_state17_on_subcall_done) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((1'b0 == ap_block_state17_on_subcall_done) & (1'b1 == ap_CS_fsm_state17) & ((cipherkey_size_reg_233 == 6'd16) | ((cipherkey_size_reg_233 == 6'd24) | (cipherkey_size_reg_233 == 6'd32))))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b0 == ap_block_state19_on_subcall_done) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_aes_invMain_fu_390_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b0 == ap_block_state23_on_subcall_done) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((grp_aes_Pipeline_ciphertextLoop_fu_407_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((p_4_0_0_0115_phi_loc_load_reg_551 == 1'd1) & (grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else if (((p_4_0_0_0115_phi_loc_load_reg_551 == 1'd0) & (grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((regslice_both_ciphertext_and_decryptedtext_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state13_on_subcall_done = ((grp_expandKey_fu_351_ap_done == 1'b0) | (grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state17_on_subcall_done = ((ap_predicate_op120_call_state17 == 1'b1) & (grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state19_on_subcall_done = ((grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_done == 1'b0) | (grp_expandKey_fu_351_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state23_on_subcall_done = ((ap_predicate_op135_call_state23 == 1'b1) & (grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_done == 1'b0));
end

always @ (*) begin
    ap_predicate_op120_call_state17 = ((cipherkey_size_reg_233 == 6'd16) | ((cipherkey_size_reg_233 == 6'd24) | (cipherkey_size_reg_233 == 6'd32)));
end

always @ (*) begin
    ap_predicate_op135_call_state23 = ((cipherkey_size_reg_233 == 6'd16) | ((cipherkey_size_reg_233 == 6'd24) | (cipherkey_size_reg_233 == 6'd32)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ciphertext_and_decryptedtext_TVALID = regslice_both_ciphertext_and_decryptedtext_V_data_V_U_vld_out;

assign expandedKeySize_1_fu_496_p2 = (shl_ln3_fu_488_p3 | 8'd16);

assign expandedKeySize_fu_481_p2 = (shl_ln_fu_473_p3 | 8'd16);

assign grp_aes_Pipeline_1_fu_281_ap_start = grp_aes_Pipeline_1_fu_281_ap_start_reg;

assign grp_aes_Pipeline_2_fu_287_ap_start = grp_aes_Pipeline_2_fu_287_ap_start_reg;

assign grp_aes_Pipeline_3_fu_292_ap_start = grp_aes_Pipeline_3_fu_292_ap_start_reg;

assign grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_start = grp_aes_Pipeline_aesDecryptLoop1_aesDecryptLoop2_fu_384_ap_start_reg;

assign grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_start = grp_aes_Pipeline_aesDecryptLoop3_aesDecryptLoop4_fu_401_ap_start_reg;

assign grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_start = grp_aes_Pipeline_aesEncryptLoop1_aesEncryptLoop2_fu_345_ap_start_reg;

assign grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_start = grp_aes_Pipeline_aesEncryptLoop3_aesEncryptLoop4_fu_378_ap_start_reg;

assign grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_start = grp_aes_Pipeline_cipherkeyLoop_fu_297_ap_start_reg;

assign grp_aes_Pipeline_ciphertextLoop_fu_407_ap_start = grp_aes_Pipeline_ciphertextLoop_fu_407_ap_start_reg;

assign grp_aes_Pipeline_ciphertextLoop_fu_407_ciphertext_and_decryptedtext_TREADY = (ciphertext_and_decryptedtext_TREADY_int_regslice & ap_CS_fsm_state24);

assign grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_start = grp_aes_Pipeline_decryptedTextLoop_fu_431_ap_start_reg;

assign grp_aes_Pipeline_decryptedTextLoop_fu_431_ciphertext_and_decryptedtext_TREADY = (ciphertext_and_decryptedtext_TREADY_int_regslice & ap_CS_fsm_state27);

assign grp_aes_Pipeline_plaintextLoop_fu_320_ap_start = grp_aes_Pipeline_plaintextLoop_fu_320_ap_start_reg;

assign grp_aes_invMain_fu_390_ap_start = grp_aes_invMain_fu_390_ap_start_reg;

assign grp_aes_main_fu_367_ap_start = grp_aes_main_fu_367_ap_start_reg;

assign grp_expandKey_fu_351_ap_start = grp_expandKey_fu_351_ap_start_reg;

assign key_and_plaintext_TREADY = regslice_both_key_and_plaintext_V_data_V_U_ack_in;

assign mode_read_read_fu_212_p2 = mode;

assign shl_ln3_fu_488_p3 = {{nbrRounds_1_reg_263}, {4'd0}};

assign shl_ln_fu_473_p3 = {{ap_phi_mux_nbrRounds_phi_fu_251_p6}, {4'd0}};

always @ (posedge ap_clk) begin
    expandedKeySize_reg_561[4:0] <= 5'b10000;
    cipherkey_size_reg_233[2:0] <= 3'b000;
    expandedKeySize_1_reg_566[4:0] <= 5'b10000;
    expandedKeySize_1_reg_566[7] <= 1'b1;
    key_array_reg_218[8:0] <= 9'b000000000;
    nbrRounds_reg_248[0] <= 1'b0;
    nbrRounds_reg_248[3] <= 1'b1;
    nbrRounds_1_reg_263[0] <= 1'b0;
    nbrRounds_1_reg_263[3] <= 1'b1;
end

endmodule //aes
