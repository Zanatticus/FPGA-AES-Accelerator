-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_aes_round is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    roundKey_ce0 : OUT STD_LOGIC;
    roundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    roundKey_ce1 : OUT STD_LOGIC;
    roundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_aes_round is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce1 : STD_LOGIC;
    signal sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_515 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_galois_multiplication_fu_497_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_521 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_galois_multiplication_fu_504_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_525 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_529 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_536 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal reg_540 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_544 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal state_addr_reg_989 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal state_addr_3_reg_1021 : STD_LOGIC_VECTOR (3 downto 0);
    signal roundKey_load_reg_1026 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_1_reg_1031 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_4_reg_1046 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_2_reg_1073 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_3_reg_1078 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_8_reg_1093 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_12_reg_1099 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_6_reg_1115 : STD_LOGIC_VECTOR (3 downto 0);
    signal roundKey_load_4_reg_1126 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_5_reg_1131 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_9_reg_1162 : STD_LOGIC_VECTOR (3 downto 0);
    signal roundKey_load_6_reg_1167 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_7_reg_1172 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_5_reg_1187 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal cpy_9_reg_1193 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_11_reg_1215 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_reg_1220 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1225 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_8_reg_1230 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_9_reg_1235 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_reg_1250 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1278 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_1284 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_10_reg_1289 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_11_reg_1294 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_6_reg_1309 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_14_reg_1325 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_reg_1336 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_1341 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_12_reg_1347 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_13_reg_1352 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_reg_1367 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_57_reg_1373 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_1389 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_1395 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_14_reg_1400 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_load_15_reg_1405 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_3_reg_1410 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1416 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_1421 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_fu_645_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_reg_1427 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal xor_ln341_4_fu_666_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_4_reg_1432 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_8_fu_687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_8_reg_1437 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_1_fu_708_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_1_reg_1442 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_12_fu_729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_12_reg_1447 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_5_fu_749_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_5_reg_1452 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_9_fu_771_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_9_reg_1457 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_13_fu_794_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_13_reg_1462 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal xor_ln341_2_fu_817_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_2_reg_1467 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_6_fu_840_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_6_reg_1472 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_10_fu_863_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_10_reg_1477 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_14_fu_886_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_14_reg_1482 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal xor_ln341_3_fu_909_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_3_reg_1487 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_7_fu_932_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_7_reg_1492 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_11_fu_955_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_11_reg_1497 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_15_fu_978_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_15_reg_1502 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_galois_multiplication_fu_497_ap_ready : STD_LOGIC;
    signal grp_galois_multiplication_fu_497_a : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplication_fu_497_b : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_galois_multiplication_fu_504_ap_ready : STD_LOGIC;
    signal grp_galois_multiplication_fu_504_a : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplication_fu_504_b : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln139_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_8_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_9_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_10_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_11_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_12_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_13_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_14_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_15_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_16_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_17_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_18_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_19_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_20_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_21_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_22_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal xor_ln341_17_fu_635_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_18_fu_639_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_16_fu_630_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_29_fu_655_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_30_fu_660_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_28_fu_651_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_41_fu_676_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_42_fu_681_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_40_fu_672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_20_fu_697_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_21_fu_702_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_19_fu_693_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_53_fu_718_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_54_fu_724_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_52_fu_714_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_32_fu_739_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_33_fu_744_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_31_fu_735_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_44_fu_760_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_45_fu_766_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_43_fu_755_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_56_fu_782_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_57_fu_788_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_55_fu_777_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_23_fu_805_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_24_fu_811_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_22_fu_800_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_35_fu_828_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_36_fu_834_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_34_fu_823_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_47_fu_851_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_48_fu_857_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_46_fu_846_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_59_fu_874_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_60_fu_880_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_58_fu_869_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_26_fu_897_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_27_fu_903_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_25_fu_892_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_38_fu_920_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_39_fu_926_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_37_fu_915_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_50_fu_943_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_51_fu_949_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_49_fu_938_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_62_fu_966_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_63_fu_972_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln341_61_fu_961_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes_galois_multiplication IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (7 downto 0);
        b : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_expandKey_Pipeline_expandKeyLoop2_sbox_ROM_2P_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component aes_expandKey_Pipeline_expandKeyLoop2_sbox_ROM_2P_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0,
        address1 => sbox_address1,
        ce1 => sbox_ce1,
        q1 => sbox_q1);

    grp_galois_multiplication_fu_497 : component aes_galois_multiplication
    port map (
        ap_ready => grp_galois_multiplication_fu_497_ap_ready,
        a => grp_galois_multiplication_fu_497_a,
        b => grp_galois_multiplication_fu_497_b,
        ap_return => grp_galois_multiplication_fu_497_ap_return);

    grp_galois_multiplication_fu_504 : component aes_galois_multiplication
    port map (
        ap_ready => grp_galois_multiplication_fu_504_ap_ready,
        a => grp_galois_multiplication_fu_504_a,
        b => grp_galois_multiplication_fu_504_b,
        ap_return => grp_galois_multiplication_fu_504_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_529 <= sbox_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_529 <= sbox_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cpy_12_reg_1099 <= sbox_q0;
                cpy_8_reg_1093 <= sbox_q1;
                roundKey_load_4_reg_1126 <= roundKey_q1;
                roundKey_load_5_reg_1131 <= roundKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                cpy_3_reg_1410 <= sbox_q0;
                tmp_13_reg_1421 <= grp_galois_multiplication_fu_504_ap_return;
                tmp_4_reg_1416 <= grp_galois_multiplication_fu_497_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                cpy_4_reg_1046 <= sbox_q0;
                roundKey_load_2_reg_1073 <= roundKey_q1;
                roundKey_load_3_reg_1078 <= roundKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                cpy_5_reg_1187 <= sbox_q1;
                cpy_9_reg_1193 <= sbox_q0;
                roundKey_load_8_reg_1230 <= roundKey_q1;
                roundKey_load_9_reg_1235 <= roundKey_q0;
                tmp_1_reg_1225 <= grp_galois_multiplication_fu_504_ap_return;
                tmp_9_reg_1220 <= grp_galois_multiplication_fu_497_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                cpy_6_reg_1309 <= sbox_q0;
                roundKey_load_12_reg_1347 <= roundKey_q1;
                roundKey_load_13_reg_1352 <= roundKey_q0;
                tmp_16_reg_1336 <= grp_galois_multiplication_fu_497_ap_return;
                tmp_17_reg_1341 <= grp_galois_multiplication_fu_504_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_515 <= sbox_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_521 <= grp_galois_multiplication_fu_497_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_525 <= grp_galois_multiplication_fu_504_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_536 <= grp_galois_multiplication_fu_497_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_540 <= grp_galois_multiplication_fu_504_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_544 <= sbox_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                roundKey_load_10_reg_1289 <= roundKey_q1;
                roundKey_load_11_reg_1294 <= roundKey_q0;
                tmp_15_reg_1284 <= grp_galois_multiplication_fu_504_ap_return;
                tmp_55_reg_1250 <= sbox_q0;
                tmp_5_reg_1278 <= grp_galois_multiplication_fu_497_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                roundKey_load_14_reg_1400 <= roundKey_q1;
                roundKey_load_15_reg_1405 <= roundKey_q0;
                tmp_3_reg_1395 <= grp_galois_multiplication_fu_504_ap_return;
                tmp_56_reg_1367 <= sbox_q1;
                tmp_57_reg_1373 <= sbox_q0;
                tmp_8_reg_1389 <= grp_galois_multiplication_fu_497_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                roundKey_load_1_reg_1031 <= roundKey_q0;
                roundKey_load_reg_1026 <= roundKey_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                roundKey_load_6_reg_1167 <= roundKey_q1;
                roundKey_load_7_reg_1172 <= roundKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                xor_ln341_10_reg_1477 <= xor_ln341_10_fu_863_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                xor_ln341_11_reg_1497 <= xor_ln341_11_fu_955_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                xor_ln341_12_reg_1447 <= xor_ln341_12_fu_729_p2;
                xor_ln341_1_reg_1442 <= xor_ln341_1_fu_708_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                xor_ln341_13_reg_1462 <= xor_ln341_13_fu_794_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                xor_ln341_14_reg_1482 <= xor_ln341_14_fu_886_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                xor_ln341_15_reg_1502 <= xor_ln341_15_fu_978_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                xor_ln341_2_reg_1467 <= xor_ln341_2_fu_817_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                xor_ln341_3_reg_1487 <= xor_ln341_3_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                xor_ln341_4_reg_1432 <= xor_ln341_4_fu_666_p2;
                xor_ln341_8_reg_1437 <= xor_ln341_8_fu_687_p2;
                xor_ln341_reg_1427 <= xor_ln341_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                xor_ln341_5_reg_1452 <= xor_ln341_5_fu_749_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                xor_ln341_6_reg_1472 <= xor_ln341_6_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                xor_ln341_7_reg_1492 <= xor_ln341_7_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                xor_ln341_9_reg_1457 <= xor_ln341_9_fu_771_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_galois_multiplication_fu_497_a_assign_proc : process(reg_515, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state25, reg_529, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state13, reg_544, ap_CS_fsm_state8, ap_CS_fsm_state10, cpy_8_reg_1093, cpy_12_reg_1099, cpy_5_reg_1187, ap_CS_fsm_state6, cpy_9_reg_1193, tmp_55_reg_1250, cpy_6_reg_1309, tmp_56_reg_1367, ap_CS_fsm_state9, tmp_57_reg_1373, cpy_3_reg_1410, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_galois_multiplication_fu_497_a <= tmp_55_reg_1250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_galois_multiplication_fu_497_a <= cpy_12_reg_1099;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_galois_multiplication_fu_497_a <= tmp_57_reg_1373;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_galois_multiplication_fu_497_a <= cpy_9_reg_1193;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_galois_multiplication_fu_497_a <= cpy_8_reg_1093;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_galois_multiplication_fu_497_a <= tmp_56_reg_1367;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_galois_multiplication_fu_497_a <= cpy_6_reg_1309;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_galois_multiplication_fu_497_a <= cpy_3_reg_1410;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_galois_multiplication_fu_497_a <= reg_544;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_galois_multiplication_fu_497_a <= cpy_5_reg_1187;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_galois_multiplication_fu_497_a <= reg_529;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_galois_multiplication_fu_497_a <= reg_515;
        else 
            grp_galois_multiplication_fu_497_a <= "XXXXXXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_497_b_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_galois_multiplication_fu_497_b <= ap_const_lv4_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_galois_multiplication_fu_497_b <= ap_const_lv4_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_galois_multiplication_fu_497_b <= ap_const_lv4_2;
        else 
            grp_galois_multiplication_fu_497_b <= "XXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_504_a_assign_proc : process(reg_515, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state25, reg_529, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state13, reg_544, ap_CS_fsm_state8, ap_CS_fsm_state10, cpy_4_reg_1046, cpy_8_reg_1093, cpy_12_reg_1099, cpy_5_reg_1187, ap_CS_fsm_state6, cpy_9_reg_1193, tmp_55_reg_1250, cpy_6_reg_1309, tmp_56_reg_1367, ap_CS_fsm_state9, tmp_57_reg_1373, cpy_3_reg_1410, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_galois_multiplication_fu_504_a <= tmp_55_reg_1250;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_galois_multiplication_fu_504_a <= cpy_12_reg_1099;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_galois_multiplication_fu_504_a <= cpy_8_reg_1093;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_galois_multiplication_fu_504_a <= cpy_9_reg_1193;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_galois_multiplication_fu_504_a <= tmp_57_reg_1373;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_galois_multiplication_fu_504_a <= cpy_6_reg_1309;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_galois_multiplication_fu_504_a <= cpy_3_reg_1410;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_galois_multiplication_fu_504_a <= tmp_56_reg_1367;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_galois_multiplication_fu_504_a <= reg_544;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_galois_multiplication_fu_504_a <= cpy_5_reg_1187;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_galois_multiplication_fu_504_a <= reg_529;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_galois_multiplication_fu_504_a <= cpy_4_reg_1046;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_galois_multiplication_fu_504_a <= reg_515;
        else 
            grp_galois_multiplication_fu_504_a <= "XXXXXXXX";
        end if; 
    end process;


    grp_galois_multiplication_fu_504_b_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_galois_multiplication_fu_504_b <= ap_const_lv4_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_galois_multiplication_fu_504_b <= ap_const_lv4_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_galois_multiplication_fu_504_b <= ap_const_lv4_1;
        else 
            grp_galois_multiplication_fu_504_b <= "XXXX";
        end if; 
    end process;


    roundKey_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            roundKey_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            roundKey_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            roundKey_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            roundKey_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            roundKey_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            roundKey_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            roundKey_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            roundKey_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            roundKey_address0 <= "XXXX";
        end if; 
    end process;


    roundKey_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            roundKey_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            roundKey_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            roundKey_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            roundKey_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            roundKey_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            roundKey_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            roundKey_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            roundKey_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            roundKey_address1 <= "XXXX";
        end if; 
    end process;


    roundKey_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            roundKey_ce0 <= ap_const_logic_1;
        else 
            roundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    roundKey_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            roundKey_ce1 <= ap_const_logic_1;
        else 
            roundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state9, zext_ln139_8_fu_555_p1, zext_ln139_10_fu_565_p1, zext_ln139_12_fu_575_p1, zext_ln139_14_fu_585_p1, zext_ln139_16_fu_595_p1, zext_ln139_18_fu_605_p1, zext_ln139_20_fu_615_p1, zext_ln139_22_fu_625_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sbox_address0 <= zext_ln139_22_fu_625_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address0 <= zext_ln139_20_fu_615_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sbox_address0 <= zext_ln139_18_fu_605_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sbox_address0 <= zext_ln139_16_fu_595_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sbox_address0 <= zext_ln139_14_fu_585_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address0 <= zext_ln139_12_fu_575_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sbox_address0 <= zext_ln139_10_fu_565_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sbox_address0 <= zext_ln139_8_fu_555_p1(8 - 1 downto 0);
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state9, zext_ln139_fu_550_p1, zext_ln139_9_fu_560_p1, zext_ln139_11_fu_570_p1, zext_ln139_13_fu_580_p1, zext_ln139_15_fu_590_p1, zext_ln139_17_fu_600_p1, zext_ln139_19_fu_610_p1, zext_ln139_21_fu_620_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sbox_address1 <= zext_ln139_21_fu_620_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address1 <= zext_ln139_19_fu_610_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sbox_address1 <= zext_ln139_17_fu_600_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sbox_address1 <= zext_ln139_15_fu_590_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sbox_address1 <= zext_ln139_13_fu_580_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address1 <= zext_ln139_11_fu_570_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sbox_address1 <= zext_ln139_9_fu_560_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sbox_address1 <= zext_ln139_fu_550_p1(8 - 1 downto 0);
        else 
            sbox_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sbox_ce1 <= ap_const_logic_1;
        else 
            sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_addr_11_reg_1215 <= ap_const_lv64_B(4 - 1 downto 0);
    state_addr_14_reg_1325 <= ap_const_lv64_E(4 - 1 downto 0);
    state_addr_3_reg_1021 <= ap_const_lv64_3(4 - 1 downto 0);
    state_addr_6_reg_1115 <= ap_const_lv64_6(4 - 1 downto 0);
    state_addr_9_reg_1162 <= ap_const_lv64_9(4 - 1 downto 0);
    state_addr_reg_989 <= ap_const_lv64_0(4 - 1 downto 0);

    state_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state13, ap_CS_fsm_state8, ap_CS_fsm_state2, state_addr_3_reg_1021, state_addr_9_reg_1162, ap_CS_fsm_state6, state_addr_11_reg_1215, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_address0 <= state_addr_11_reg_1215;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_address0 <= state_addr_3_reg_1021;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address0 <= state_addr_9_reg_1162;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state8, state_addr_reg_989, ap_CS_fsm_state2, state_addr_6_reg_1115, ap_CS_fsm_state6, state_addr_14_reg_1325, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_address1 <= state_addr_14_reg_1325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_address1 <= state_addr_6_reg_1115;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address1 <= state_addr_reg_989;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state13, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state13, xor_ln341_4_reg_1432, xor_ln341_8_reg_1437, xor_ln341_12_reg_1447, xor_ln341_9_reg_1457, ap_CS_fsm_state15, xor_ln341_2_reg_1467, xor_ln341_10_reg_1477, ap_CS_fsm_state21, xor_ln341_3_reg_1487, xor_ln341_11_reg_1497, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_d0 <= xor_ln341_11_reg_1497;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_d0 <= xor_ln341_3_reg_1487;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_d0 <= xor_ln341_10_reg_1477;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_d0 <= xor_ln341_2_reg_1467;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d0 <= xor_ln341_9_reg_1457;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d0 <= xor_ln341_12_reg_1447;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d0 <= xor_ln341_8_reg_1437;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_d0 <= xor_ln341_4_reg_1432;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state13, xor_ln341_reg_1427, xor_ln341_1_reg_1442, xor_ln341_5_reg_1452, xor_ln341_13_reg_1462, xor_ln341_6_reg_1472, xor_ln341_14_reg_1482, xor_ln341_7_reg_1492, xor_ln341_15_reg_1502, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            state_d1 <= xor_ln341_15_reg_1502;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            state_d1 <= xor_ln341_7_reg_1492;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_d1 <= xor_ln341_14_reg_1482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_d1 <= xor_ln341_6_reg_1472;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_d1 <= xor_ln341_13_reg_1462;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d1 <= xor_ln341_5_reg_1452;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d1 <= xor_ln341_1_reg_1442;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_d1 <= xor_ln341_reg_1427;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln341_10_fu_863_p2 <= (xor_ln341_48_fu_857_p2 xor xor_ln341_46_fu_846_p2);
    xor_ln341_11_fu_955_p2 <= (xor_ln341_51_fu_949_p2 xor xor_ln341_49_fu_938_p2);
    xor_ln341_12_fu_729_p2 <= (xor_ln341_54_fu_724_p2 xor xor_ln341_52_fu_714_p2);
    xor_ln341_13_fu_794_p2 <= (xor_ln341_57_fu_788_p2 xor xor_ln341_55_fu_777_p2);
    xor_ln341_14_fu_886_p2 <= (xor_ln341_60_fu_880_p2 xor xor_ln341_58_fu_869_p2);
    xor_ln341_15_fu_978_p2 <= (xor_ln341_63_fu_972_p2 xor xor_ln341_61_fu_961_p2);
    xor_ln341_16_fu_630_p2 <= (roundKey_load_reg_1026 xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_17_fu_635_p2 <= (tmp_9_reg_1220 xor tmp_8_reg_1389);
    xor_ln341_18_fu_639_p2 <= (xor_ln341_17_fu_635_p2 xor reg_521);
    xor_ln341_19_fu_693_p2 <= (tmp_13_reg_1421 xor roundKey_load_1_reg_1031);
    xor_ln341_1_fu_708_p2 <= (xor_ln341_21_fu_702_p2 xor xor_ln341_19_fu_693_p2);
    xor_ln341_20_fu_697_p2 <= (tmp_15_reg_1284 xor grp_galois_multiplication_fu_504_ap_return);
    xor_ln341_21_fu_702_p2 <= (xor_ln341_20_fu_697_p2 xor reg_540);
    xor_ln341_22_fu_800_p2 <= (roundKey_load_2_reg_1073 xor reg_525);
    xor_ln341_23_fu_805_p2 <= (grp_galois_multiplication_fu_504_ap_return xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_24_fu_811_p2 <= (xor_ln341_23_fu_805_p2 xor reg_521);
    xor_ln341_25_fu_892_p2 <= (roundKey_load_3_reg_1078 xor reg_525);
    xor_ln341_26_fu_897_p2 <= (grp_galois_multiplication_fu_504_ap_return xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_27_fu_903_p2 <= (xor_ln341_26_fu_897_p2 xor reg_521);
    xor_ln341_28_fu_651_p2 <= (tmp_1_reg_1225 xor roundKey_load_4_reg_1126);
    xor_ln341_29_fu_655_p2 <= (tmp_3_reg_1395 xor reg_525);
    xor_ln341_2_fu_817_p2 <= (xor_ln341_24_fu_811_p2 xor xor_ln341_22_fu_800_p2);
    xor_ln341_30_fu_660_p2 <= (xor_ln341_29_fu_655_p2 xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_31_fu_735_p2 <= (tmp_16_reg_1336 xor roundKey_load_5_reg_1131);
    xor_ln341_32_fu_739_p2 <= (tmp_17_reg_1341 xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_33_fu_744_p2 <= (xor_ln341_32_fu_739_p2 xor tmp_13_reg_1421);
    xor_ln341_34_fu_823_p2 <= (roundKey_load_6_reg_1167 xor reg_536);
    xor_ln341_35_fu_828_p2 <= (reg_540 xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_36_fu_834_p2 <= (xor_ln341_35_fu_828_p2 xor reg_525);
    xor_ln341_37_fu_915_p2 <= (roundKey_load_7_reg_1172 xor reg_536);
    xor_ln341_38_fu_920_p2 <= (reg_540 xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_39_fu_926_p2 <= (xor_ln341_38_fu_920_p2 xor reg_525);
    xor_ln341_3_fu_909_p2 <= (xor_ln341_27_fu_903_p2 xor xor_ln341_25_fu_892_p2);
    xor_ln341_40_fu_672_p2 <= (tmp_4_reg_1416 xor roundKey_load_8_reg_1230);
    xor_ln341_41_fu_676_p2 <= (tmp_5_reg_1278 xor grp_galois_multiplication_fu_504_ap_return);
    xor_ln341_42_fu_681_p2 <= (xor_ln341_41_fu_676_p2 xor reg_525);
    xor_ln341_43_fu_755_p2 <= (roundKey_load_9_reg_1235 xor reg_540);
    xor_ln341_44_fu_760_p2 <= (grp_galois_multiplication_fu_504_ap_return xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_45_fu_766_p2 <= (xor_ln341_44_fu_760_p2 xor tmp_17_reg_1341);
    xor_ln341_46_fu_846_p2 <= (roundKey_load_10_reg_1289 xor reg_525);
    xor_ln341_47_fu_851_p2 <= (grp_galois_multiplication_fu_504_ap_return xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_48_fu_857_p2 <= (xor_ln341_47_fu_851_p2 xor reg_540);
    xor_ln341_49_fu_938_p2 <= (roundKey_load_11_reg_1294 xor reg_525);
    xor_ln341_4_fu_666_p2 <= (xor_ln341_30_fu_660_p2 xor xor_ln341_28_fu_651_p2);
    xor_ln341_50_fu_943_p2 <= (grp_galois_multiplication_fu_504_ap_return xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_51_fu_949_p2 <= (xor_ln341_50_fu_943_p2 xor reg_540);
    xor_ln341_52_fu_714_p2 <= (tmp_5_reg_1278 xor roundKey_load_12_reg_1347);
    xor_ln341_53_fu_718_p2 <= (reg_536 xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_54_fu_724_p2 <= (xor_ln341_53_fu_718_p2 xor tmp_8_reg_1389);
    xor_ln341_55_fu_777_p2 <= (roundKey_load_13_reg_1352 xor reg_521);
    xor_ln341_56_fu_782_p2 <= (grp_galois_multiplication_fu_504_ap_return xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_57_fu_788_p2 <= (xor_ln341_56_fu_782_p2 xor reg_525);
    xor_ln341_58_fu_869_p2 <= (roundKey_load_14_reg_1400 xor reg_536);
    xor_ln341_59_fu_874_p2 <= (grp_galois_multiplication_fu_504_ap_return xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_5_fu_749_p2 <= (xor_ln341_33_fu_744_p2 xor xor_ln341_31_fu_735_p2);
    xor_ln341_60_fu_880_p2 <= (xor_ln341_59_fu_874_p2 xor reg_521);
    xor_ln341_61_fu_961_p2 <= (roundKey_load_15_reg_1405 xor reg_536);
    xor_ln341_62_fu_966_p2 <= (grp_galois_multiplication_fu_504_ap_return xor grp_galois_multiplication_fu_497_ap_return);
    xor_ln341_63_fu_972_p2 <= (xor_ln341_62_fu_966_p2 xor reg_521);
    xor_ln341_6_fu_840_p2 <= (xor_ln341_36_fu_834_p2 xor xor_ln341_34_fu_823_p2);
    xor_ln341_7_fu_932_p2 <= (xor_ln341_39_fu_926_p2 xor xor_ln341_37_fu_915_p2);
    xor_ln341_8_fu_687_p2 <= (xor_ln341_42_fu_681_p2 xor xor_ln341_40_fu_672_p2);
    xor_ln341_9_fu_771_p2 <= (xor_ln341_45_fu_766_p2 xor xor_ln341_43_fu_755_p2);
    xor_ln341_fu_645_p2 <= (xor_ln341_18_fu_639_p2 xor xor_ln341_16_fu_630_p2);
    zext_ln139_10_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    zext_ln139_11_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q1),64));
    zext_ln139_12_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    zext_ln139_13_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q1),64));
    zext_ln139_14_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    zext_ln139_15_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q1),64));
    zext_ln139_16_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    zext_ln139_17_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q1),64));
    zext_ln139_18_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    zext_ln139_19_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q1),64));
    zext_ln139_20_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    zext_ln139_21_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q1),64));
    zext_ln139_22_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    zext_ln139_8_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    zext_ln139_9_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q1),64));
    zext_ln139_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q1),64));
end behav;
