// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_expandKey_Pipeline_expandKeyLoop1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln241,
        key,
        key_array128_address0,
        key_array128_ce0,
        key_array128_q0,
        key_array128_address1,
        key_array128_ce1,
        key_array128_q1,
        key_array128_address2,
        key_array128_ce2,
        key_array128_q2,
        key_array128_address3,
        key_array128_ce3,
        key_array128_q3,
        expandedKey_1_address0,
        expandedKey_1_ce0,
        expandedKey_1_we0,
        expandedKey_1_d0,
        expandedKey_1_address1,
        expandedKey_1_ce1,
        expandedKey_1_we1,
        expandedKey_1_d1,
        expandedKey_0_address0,
        expandedKey_0_ce0,
        expandedKey_0_we0,
        expandedKey_0_d0,
        expandedKey_0_address1,
        expandedKey_0_ce1,
        expandedKey_0_we1,
        expandedKey_0_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] zext_ln241;
input  [10:0] key;
output  [10:0] key_array128_address0;
output   key_array128_ce0;
input  [7:0] key_array128_q0;
output  [10:0] key_array128_address1;
output   key_array128_ce1;
input  [7:0] key_array128_q1;
output  [10:0] key_array128_address2;
output   key_array128_ce2;
input  [7:0] key_array128_q2;
output  [10:0] key_array128_address3;
output   key_array128_ce3;
input  [7:0] key_array128_q3;
output  [6:0] expandedKey_1_address0;
output   expandedKey_1_ce0;
output   expandedKey_1_we0;
output  [7:0] expandedKey_1_d0;
output  [6:0] expandedKey_1_address1;
output   expandedKey_1_ce1;
output   expandedKey_1_we1;
output  [7:0] expandedKey_1_d1;
output  [6:0] expandedKey_0_address0;
output   expandedKey_0_ce0;
output   expandedKey_0_we0;
output  [7:0] expandedKey_0_d0;
output  [6:0] expandedKey_0_address1;
output   expandedKey_0_ce1;
output   expandedKey_0_we1;
output  [7:0] expandedKey_0_d1;

reg ap_idle;
reg key_array128_ce0;
reg key_array128_ce1;
reg key_array128_ce2;
reg key_array128_ce3;
reg expandedKey_1_ce0;
reg expandedKey_1_we0;
reg expandedKey_1_ce1;
reg expandedKey_1_we1;
reg expandedKey_0_ce0;
reg expandedKey_0_we0;
reg expandedKey_0_ce1;
reg expandedKey_0_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln241_3_fu_280_p2;
wire   [0:0] icmp_ln241_2_fu_253_p2;
wire   [0:0] icmp_ln241_1_fu_226_p2;
wire   [0:0] icmp_ln241_fu_185_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln241_cast_fu_173_p1;
reg   [63:0] zext_ln241_cast_reg_337;
reg   [0:0] icmp_ln241_reg_345;
reg   [6:0] lshr_ln_reg_354;
reg   [0:0] icmp_ln241_1_reg_360;
reg   [0:0] icmp_ln241_2_reg_369;
reg   [0:0] icmp_ln241_3_reg_378;
wire   [63:0] zext_ln244_fu_199_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln244_2_fu_236_p1;
wire   [63:0] zext_ln244_3_fu_263_p1;
wire   [63:0] zext_ln244_5_fu_290_p1;
wire   [63:0] zext_ln244_1_fu_306_p1;
wire   [63:0] zext_ln244_4_fu_316_p1;
reg   [63:0] i_0_fu_54;
wire   [63:0] add_ln241_fu_295_p2;
wire    ap_loop_init;
wire   [10:0] empty_fu_190_p1;
wire   [10:0] add_ln244_fu_194_p2;
wire   [63:0] or_ln241_fu_214_p2;
wire   [10:0] or_ln241_3_fu_220_p2;
wire   [10:0] add_ln244_1_fu_231_p2;
wire   [63:0] or_ln241_1_fu_241_p2;
wire   [10:0] or_ln241_4_fu_247_p2;
wire   [10:0] add_ln244_2_fu_258_p2;
wire   [63:0] or_ln241_2_fu_268_p2;
wire   [10:0] or_ln241_5_fu_274_p2;
wire   [10:0] add_ln244_3_fu_285_p2;
wire   [6:0] or_ln244_fu_311_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_327;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

aes_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_0_fu_54 <= 64'd0;
        end else if ((1'b1 == ap_condition_327)) begin
            i_0_fu_54 <= add_ln241_fu_295_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln241_1_reg_360 <= icmp_ln241_1_fu_226_p2;
        lshr_ln_reg_354 <= {{i_0_fu_54[7:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_fu_185_p2 == 1'd0) & (icmp_ln241_1_fu_226_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln241_2_reg_369 <= icmp_ln241_2_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_fu_185_p2 == 1'd0) & (icmp_ln241_1_fu_226_p2 == 1'd0) & (icmp_ln241_2_fu_253_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln241_3_reg_378 <= icmp_ln241_3_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln241_reg_345 <= icmp_ln241_fu_185_p2;
        zext_ln241_cast_reg_337[5 : 0] <= zext_ln241_cast_fu_173_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln241_fu_185_p2 == 1'd1) | ((icmp_ln241_1_fu_226_p2 == 1'd1) | ((icmp_ln241_2_fu_253_p2 == 1'd1) | (icmp_ln241_3_fu_280_p2 == 1'd1)))))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        expandedKey_0_ce0 = 1'b1;
    end else begin
        expandedKey_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        expandedKey_0_ce1 = 1'b1;
    end else begin
        expandedKey_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln241_2_reg_369 == 1'd0) & (icmp_ln241_1_reg_360 == 1'd0) & (icmp_ln241_reg_345 == 1'd0))) begin
        expandedKey_0_we0 = 1'b1;
    end else begin
        expandedKey_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln241_reg_345 == 1'd0))) begin
        expandedKey_0_we1 = 1'b1;
    end else begin
        expandedKey_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        expandedKey_1_ce0 = 1'b1;
    end else begin
        expandedKey_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        expandedKey_1_ce1 = 1'b1;
    end else begin
        expandedKey_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln241_3_reg_378 == 1'd0) & (icmp_ln241_2_reg_369 == 1'd0) & (icmp_ln241_1_reg_360 == 1'd0) & (icmp_ln241_reg_345 == 1'd0))) begin
        expandedKey_1_we0 = 1'b1;
    end else begin
        expandedKey_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln241_1_reg_360 == 1'd0) & (icmp_ln241_reg_345 == 1'd0))) begin
        expandedKey_1_we1 = 1'b1;
    end else begin
        expandedKey_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        key_array128_ce0 = 1'b1;
    end else begin
        key_array128_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        key_array128_ce1 = 1'b1;
    end else begin
        key_array128_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        key_array128_ce2 = 1'b1;
    end else begin
        key_array128_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        key_array128_ce3 = 1'b1;
    end else begin
        key_array128_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln241_fu_295_p2 = (i_0_fu_54 + 64'd4);

assign add_ln244_1_fu_231_p2 = (or_ln241_3_fu_220_p2 + key);

assign add_ln244_2_fu_258_p2 = (or_ln241_4_fu_247_p2 + key);

assign add_ln244_3_fu_285_p2 = (or_ln241_5_fu_274_p2 + key);

assign add_ln244_fu_194_p2 = (empty_fu_190_p1 + key);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_327 = ((icmp_ln241_fu_185_p2 == 1'd0) & (icmp_ln241_1_fu_226_p2 == 1'd0) & (icmp_ln241_2_fu_253_p2 == 1'd0) & (icmp_ln241_3_fu_280_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_fu_190_p1 = i_0_fu_54[10:0];

assign expandedKey_0_address0 = zext_ln244_4_fu_316_p1;

assign expandedKey_0_address1 = zext_ln244_1_fu_306_p1;

assign expandedKey_0_d0 = key_array128_q1;

assign expandedKey_0_d1 = key_array128_q3;

assign expandedKey_1_address0 = zext_ln244_4_fu_316_p1;

assign expandedKey_1_address1 = zext_ln244_1_fu_306_p1;

assign expandedKey_1_d0 = key_array128_q0;

assign expandedKey_1_d1 = key_array128_q2;

assign icmp_ln241_1_fu_226_p2 = ((or_ln241_fu_214_p2 == zext_ln241_cast_reg_337) ? 1'b1 : 1'b0);

assign icmp_ln241_2_fu_253_p2 = ((or_ln241_1_fu_241_p2 == zext_ln241_cast_reg_337) ? 1'b1 : 1'b0);

assign icmp_ln241_3_fu_280_p2 = ((or_ln241_2_fu_268_p2 == zext_ln241_cast_reg_337) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_185_p2 = ((i_0_fu_54 == zext_ln241_cast_reg_337) ? 1'b1 : 1'b0);

assign key_array128_address0 = zext_ln244_5_fu_290_p1;

assign key_array128_address1 = zext_ln244_3_fu_263_p1;

assign key_array128_address2 = zext_ln244_2_fu_236_p1;

assign key_array128_address3 = zext_ln244_fu_199_p1;

assign or_ln241_1_fu_241_p2 = (i_0_fu_54 | 64'd2);

assign or_ln241_2_fu_268_p2 = (i_0_fu_54 | 64'd3);

assign or_ln241_3_fu_220_p2 = (empty_fu_190_p1 | 11'd1);

assign or_ln241_4_fu_247_p2 = (empty_fu_190_p1 | 11'd2);

assign or_ln241_5_fu_274_p2 = (empty_fu_190_p1 | 11'd3);

assign or_ln241_fu_214_p2 = (i_0_fu_54 | 64'd1);

assign or_ln244_fu_311_p2 = (lshr_ln_reg_354 | 7'd1);

assign zext_ln241_cast_fu_173_p1 = zext_ln241;

assign zext_ln244_1_fu_306_p1 = lshr_ln_reg_354;

assign zext_ln244_2_fu_236_p1 = add_ln244_1_fu_231_p2;

assign zext_ln244_3_fu_263_p1 = add_ln244_2_fu_258_p2;

assign zext_ln244_4_fu_316_p1 = or_ln244_fu_311_p2;

assign zext_ln244_5_fu_290_p1 = add_ln244_3_fu_285_p2;

assign zext_ln244_fu_199_p1 = add_ln244_fu_194_p2;

always @ (posedge ap_clk) begin
    zext_ln241_cast_reg_337[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //aes_expandKey_Pipeline_expandKeyLoop1
