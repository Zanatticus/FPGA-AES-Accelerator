// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_aes_round (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        roundKey_address0,
        roundKey_ce0,
        roundKey_q0,
        roundKey_address1,
        roundKey_ce1,
        roundKey_q1
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [3:0] roundKey_address0;
output   roundKey_ce0;
input  [7:0] roundKey_q0;
output  [3:0] roundKey_address1;
output   roundKey_ce1;
input  [7:0] roundKey_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;
reg[3:0] roundKey_address0;
reg roundKey_ce0;
reg[3:0] roundKey_address1;
reg roundKey_ce1;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
reg   [7:0] sbox_address1;
reg    sbox_ce1;
wire   [7:0] sbox_q1;
reg   [7:0] reg_515;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire   [7:0] grp_galois_multiplication_fu_497_ap_return;
reg   [7:0] reg_521;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire   [7:0] grp_galois_multiplication_fu_504_ap_return;
reg   [7:0] reg_525;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state25;
reg   [7:0] reg_529;
wire    ap_CS_fsm_state7;
reg   [7:0] reg_536;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
reg   [7:0] reg_540;
wire    ap_CS_fsm_state13;
reg   [7:0] reg_544;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire   [3:0] state_addr_reg_989;
wire    ap_CS_fsm_state2;
wire   [3:0] state_addr_3_reg_1021;
reg   [7:0] roundKey_load_reg_1026;
reg   [7:0] roundKey_load_1_reg_1031;
reg   [7:0] cpy_4_reg_1046;
reg   [7:0] roundKey_load_2_reg_1073;
reg   [7:0] roundKey_load_3_reg_1078;
reg   [7:0] cpy_8_reg_1093;
reg   [7:0] cpy_12_reg_1099;
wire   [3:0] state_addr_6_reg_1115;
reg   [7:0] roundKey_load_4_reg_1126;
reg   [7:0] roundKey_load_5_reg_1131;
wire   [3:0] state_addr_9_reg_1162;
reg   [7:0] roundKey_load_6_reg_1167;
reg   [7:0] roundKey_load_7_reg_1172;
reg   [7:0] cpy_5_reg_1187;
wire    ap_CS_fsm_state6;
reg   [7:0] cpy_9_reg_1193;
wire   [3:0] state_addr_11_reg_1215;
reg   [7:0] tmp_9_reg_1220;
reg   [7:0] tmp_1_reg_1225;
reg   [7:0] roundKey_load_8_reg_1230;
reg   [7:0] roundKey_load_9_reg_1235;
reg   [7:0] tmp_55_reg_1250;
reg   [7:0] tmp_5_reg_1278;
reg   [7:0] tmp_15_reg_1284;
reg   [7:0] roundKey_load_10_reg_1289;
reg   [7:0] roundKey_load_11_reg_1294;
reg   [7:0] cpy_6_reg_1309;
wire   [3:0] state_addr_14_reg_1325;
reg   [7:0] tmp_16_reg_1336;
reg   [7:0] tmp_17_reg_1341;
reg   [7:0] roundKey_load_12_reg_1347;
reg   [7:0] roundKey_load_13_reg_1352;
reg   [7:0] tmp_56_reg_1367;
wire    ap_CS_fsm_state9;
reg   [7:0] tmp_57_reg_1373;
reg   [7:0] tmp_8_reg_1389;
reg   [7:0] tmp_3_reg_1395;
reg   [7:0] roundKey_load_14_reg_1400;
reg   [7:0] roundKey_load_15_reg_1405;
reg   [7:0] cpy_3_reg_1410;
reg   [7:0] tmp_4_reg_1416;
reg   [7:0] tmp_13_reg_1421;
wire   [7:0] xor_ln341_fu_645_p2;
reg   [7:0] xor_ln341_reg_1427;
wire    ap_CS_fsm_state11;
wire   [7:0] xor_ln341_4_fu_666_p2;
reg   [7:0] xor_ln341_4_reg_1432;
wire   [7:0] xor_ln341_8_fu_687_p2;
reg   [7:0] xor_ln341_8_reg_1437;
wire   [7:0] xor_ln341_1_fu_708_p2;
reg   [7:0] xor_ln341_1_reg_1442;
wire   [7:0] xor_ln341_12_fu_729_p2;
reg   [7:0] xor_ln341_12_reg_1447;
wire   [7:0] xor_ln341_5_fu_749_p2;
reg   [7:0] xor_ln341_5_reg_1452;
wire   [7:0] xor_ln341_9_fu_771_p2;
reg   [7:0] xor_ln341_9_reg_1457;
wire   [7:0] xor_ln341_13_fu_794_p2;
reg   [7:0] xor_ln341_13_reg_1462;
wire    ap_CS_fsm_state15;
wire   [7:0] xor_ln341_2_fu_817_p2;
reg   [7:0] xor_ln341_2_reg_1467;
wire   [7:0] xor_ln341_6_fu_840_p2;
reg   [7:0] xor_ln341_6_reg_1472;
wire   [7:0] xor_ln341_10_fu_863_p2;
reg   [7:0] xor_ln341_10_reg_1477;
wire   [7:0] xor_ln341_14_fu_886_p2;
reg   [7:0] xor_ln341_14_reg_1482;
wire    ap_CS_fsm_state21;
wire   [7:0] xor_ln341_3_fu_909_p2;
reg   [7:0] xor_ln341_3_reg_1487;
wire   [7:0] xor_ln341_7_fu_932_p2;
reg   [7:0] xor_ln341_7_reg_1492;
wire   [7:0] xor_ln341_11_fu_955_p2;
reg   [7:0] xor_ln341_11_reg_1497;
wire   [7:0] xor_ln341_15_fu_978_p2;
reg   [7:0] xor_ln341_15_reg_1502;
wire    ap_CS_fsm_state27;
wire    grp_galois_multiplication_fu_497_ap_ready;
reg   [7:0] grp_galois_multiplication_fu_497_a;
reg   [3:0] grp_galois_multiplication_fu_497_b;
wire    grp_galois_multiplication_fu_504_ap_ready;
reg   [7:0] grp_galois_multiplication_fu_504_a;
reg   [3:0] grp_galois_multiplication_fu_504_b;
wire   [63:0] zext_ln139_fu_550_p1;
wire   [63:0] zext_ln139_8_fu_555_p1;
wire   [63:0] zext_ln139_9_fu_560_p1;
wire   [63:0] zext_ln139_10_fu_565_p1;
wire   [63:0] zext_ln139_11_fu_570_p1;
wire   [63:0] zext_ln139_12_fu_575_p1;
wire   [63:0] zext_ln139_13_fu_580_p1;
wire   [63:0] zext_ln139_14_fu_585_p1;
wire   [63:0] zext_ln139_15_fu_590_p1;
wire   [63:0] zext_ln139_16_fu_595_p1;
wire   [63:0] zext_ln139_17_fu_600_p1;
wire   [63:0] zext_ln139_18_fu_605_p1;
wire   [63:0] zext_ln139_19_fu_610_p1;
wire   [63:0] zext_ln139_20_fu_615_p1;
wire   [63:0] zext_ln139_21_fu_620_p1;
wire   [63:0] zext_ln139_22_fu_625_p1;
wire    ap_CS_fsm_state28;
wire   [7:0] xor_ln341_17_fu_635_p2;
wire   [7:0] xor_ln341_18_fu_639_p2;
wire   [7:0] xor_ln341_16_fu_630_p2;
wire   [7:0] xor_ln341_29_fu_655_p2;
wire   [7:0] xor_ln341_30_fu_660_p2;
wire   [7:0] xor_ln341_28_fu_651_p2;
wire   [7:0] xor_ln341_41_fu_676_p2;
wire   [7:0] xor_ln341_42_fu_681_p2;
wire   [7:0] xor_ln341_40_fu_672_p2;
wire   [7:0] xor_ln341_20_fu_697_p2;
wire   [7:0] xor_ln341_21_fu_702_p2;
wire   [7:0] xor_ln341_19_fu_693_p2;
wire   [7:0] xor_ln341_53_fu_718_p2;
wire   [7:0] xor_ln341_54_fu_724_p2;
wire   [7:0] xor_ln341_52_fu_714_p2;
wire   [7:0] xor_ln341_32_fu_739_p2;
wire   [7:0] xor_ln341_33_fu_744_p2;
wire   [7:0] xor_ln341_31_fu_735_p2;
wire   [7:0] xor_ln341_44_fu_760_p2;
wire   [7:0] xor_ln341_45_fu_766_p2;
wire   [7:0] xor_ln341_43_fu_755_p2;
wire   [7:0] xor_ln341_56_fu_782_p2;
wire   [7:0] xor_ln341_57_fu_788_p2;
wire   [7:0] xor_ln341_55_fu_777_p2;
wire   [7:0] xor_ln341_23_fu_805_p2;
wire   [7:0] xor_ln341_24_fu_811_p2;
wire   [7:0] xor_ln341_22_fu_800_p2;
wire   [7:0] xor_ln341_35_fu_828_p2;
wire   [7:0] xor_ln341_36_fu_834_p2;
wire   [7:0] xor_ln341_34_fu_823_p2;
wire   [7:0] xor_ln341_47_fu_851_p2;
wire   [7:0] xor_ln341_48_fu_857_p2;
wire   [7:0] xor_ln341_46_fu_846_p2;
wire   [7:0] xor_ln341_59_fu_874_p2;
wire   [7:0] xor_ln341_60_fu_880_p2;
wire   [7:0] xor_ln341_58_fu_869_p2;
wire   [7:0] xor_ln341_26_fu_897_p2;
wire   [7:0] xor_ln341_27_fu_903_p2;
wire   [7:0] xor_ln341_25_fu_892_p2;
wire   [7:0] xor_ln341_38_fu_920_p2;
wire   [7:0] xor_ln341_39_fu_926_p2;
wire   [7:0] xor_ln341_37_fu_915_p2;
wire   [7:0] xor_ln341_50_fu_943_p2;
wire   [7:0] xor_ln341_51_fu_949_p2;
wire   [7:0] xor_ln341_49_fu_938_p2;
wire   [7:0] xor_ln341_62_fu_966_p2;
wire   [7:0] xor_ln341_63_fu_972_p2;
wire   [7:0] xor_ln341_61_fu_961_p2;
reg   [27:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
end

aes_expandKey_Pipeline_expandKeyLoop2_sbox_ROM_2P_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(sbox_address1),
    .ce1(sbox_ce1),
    .q1(sbox_q1)
);

aes_galois_multiplication grp_galois_multiplication_fu_497(
    .ap_ready(grp_galois_multiplication_fu_497_ap_ready),
    .a(grp_galois_multiplication_fu_497_a),
    .b(grp_galois_multiplication_fu_497_b),
    .ap_return(grp_galois_multiplication_fu_497_ap_return)
);

aes_galois_multiplication grp_galois_multiplication_fu_504(
    .ap_ready(grp_galois_multiplication_fu_504_ap_ready),
    .a(grp_galois_multiplication_fu_504_a),
    .b(grp_galois_multiplication_fu_504_b),
    .ap_return(grp_galois_multiplication_fu_504_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reg_529 <= sbox_q1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_529 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cpy_12_reg_1099 <= sbox_q0;
        cpy_8_reg_1093 <= sbox_q1;
        roundKey_load_4_reg_1126 <= roundKey_q1;
        roundKey_load_5_reg_1131 <= roundKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        cpy_3_reg_1410 <= sbox_q0;
        tmp_13_reg_1421 <= grp_galois_multiplication_fu_504_ap_return;
        tmp_4_reg_1416 <= grp_galois_multiplication_fu_497_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cpy_4_reg_1046 <= sbox_q0;
        roundKey_load_2_reg_1073 <= roundKey_q1;
        roundKey_load_3_reg_1078 <= roundKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cpy_5_reg_1187 <= sbox_q1;
        cpy_9_reg_1193 <= sbox_q0;
        roundKey_load_8_reg_1230 <= roundKey_q1;
        roundKey_load_9_reg_1235 <= roundKey_q0;
        tmp_1_reg_1225 <= grp_galois_multiplication_fu_504_ap_return;
        tmp_9_reg_1220 <= grp_galois_multiplication_fu_497_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cpy_6_reg_1309 <= sbox_q0;
        roundKey_load_12_reg_1347 <= roundKey_q1;
        roundKey_load_13_reg_1352 <= roundKey_q0;
        tmp_16_reg_1336 <= grp_galois_multiplication_fu_497_ap_return;
        tmp_17_reg_1341 <= grp_galois_multiplication_fu_504_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_515 <= sbox_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_521 <= grp_galois_multiplication_fu_497_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_525 <= grp_galois_multiplication_fu_504_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_536 <= grp_galois_multiplication_fu_497_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_540 <= grp_galois_multiplication_fu_504_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_544 <= sbox_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        roundKey_load_10_reg_1289 <= roundKey_q1;
        roundKey_load_11_reg_1294 <= roundKey_q0;
        tmp_15_reg_1284 <= grp_galois_multiplication_fu_504_ap_return;
        tmp_55_reg_1250 <= sbox_q0;
        tmp_5_reg_1278 <= grp_galois_multiplication_fu_497_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        roundKey_load_14_reg_1400 <= roundKey_q1;
        roundKey_load_15_reg_1405 <= roundKey_q0;
        tmp_3_reg_1395 <= grp_galois_multiplication_fu_504_ap_return;
        tmp_56_reg_1367 <= sbox_q1;
        tmp_57_reg_1373 <= sbox_q0;
        tmp_8_reg_1389 <= grp_galois_multiplication_fu_497_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        roundKey_load_1_reg_1031 <= roundKey_q0;
        roundKey_load_reg_1026 <= roundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        roundKey_load_6_reg_1167 <= roundKey_q1;
        roundKey_load_7_reg_1172 <= roundKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        xor_ln341_10_reg_1477 <= xor_ln341_10_fu_863_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        xor_ln341_11_reg_1497 <= xor_ln341_11_fu_955_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        xor_ln341_12_reg_1447 <= xor_ln341_12_fu_729_p2;
        xor_ln341_1_reg_1442 <= xor_ln341_1_fu_708_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        xor_ln341_13_reg_1462 <= xor_ln341_13_fu_794_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        xor_ln341_14_reg_1482 <= xor_ln341_14_fu_886_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        xor_ln341_15_reg_1502 <= xor_ln341_15_fu_978_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        xor_ln341_2_reg_1467 <= xor_ln341_2_fu_817_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        xor_ln341_3_reg_1487 <= xor_ln341_3_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        xor_ln341_4_reg_1432 <= xor_ln341_4_fu_666_p2;
        xor_ln341_8_reg_1437 <= xor_ln341_8_fu_687_p2;
        xor_ln341_reg_1427 <= xor_ln341_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        xor_ln341_5_reg_1452 <= xor_ln341_5_fu_749_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        xor_ln341_6_reg_1472 <= xor_ln341_6_fu_840_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        xor_ln341_7_reg_1492 <= xor_ln341_7_fu_932_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        xor_ln341_9_reg_1457 <= xor_ln341_9_fu_771_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_galois_multiplication_fu_497_a = tmp_55_reg_1250;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_galois_multiplication_fu_497_a = cpy_12_reg_1099;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_galois_multiplication_fu_497_a = tmp_57_reg_1373;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_galois_multiplication_fu_497_a = cpy_9_reg_1193;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_galois_multiplication_fu_497_a = cpy_8_reg_1093;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_galois_multiplication_fu_497_a = tmp_56_reg_1367;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_galois_multiplication_fu_497_a = cpy_6_reg_1309;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_galois_multiplication_fu_497_a = cpy_3_reg_1410;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_galois_multiplication_fu_497_a = reg_544;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_galois_multiplication_fu_497_a = cpy_5_reg_1187;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_galois_multiplication_fu_497_a = reg_529;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_galois_multiplication_fu_497_a = reg_515;
    end else begin
        grp_galois_multiplication_fu_497_a = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_galois_multiplication_fu_497_b = 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_galois_multiplication_fu_497_b = 4'd3;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_galois_multiplication_fu_497_b = 4'd2;
    end else begin
        grp_galois_multiplication_fu_497_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_galois_multiplication_fu_504_a = tmp_55_reg_1250;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_galois_multiplication_fu_504_a = cpy_12_reg_1099;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_galois_multiplication_fu_504_a = cpy_8_reg_1093;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_galois_multiplication_fu_504_a = cpy_9_reg_1193;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_galois_multiplication_fu_504_a = tmp_57_reg_1373;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_galois_multiplication_fu_504_a = cpy_6_reg_1309;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_galois_multiplication_fu_504_a = cpy_3_reg_1410;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_galois_multiplication_fu_504_a = tmp_56_reg_1367;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_galois_multiplication_fu_504_a = reg_544;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_galois_multiplication_fu_504_a = cpy_5_reg_1187;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_galois_multiplication_fu_504_a = reg_529;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_galois_multiplication_fu_504_a = cpy_4_reg_1046;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_galois_multiplication_fu_504_a = reg_515;
    end else begin
        grp_galois_multiplication_fu_504_a = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_galois_multiplication_fu_504_b = 4'd3;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_galois_multiplication_fu_504_b = 4'd2;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_galois_multiplication_fu_504_b = 4'd1;
    end else begin
        grp_galois_multiplication_fu_504_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        roundKey_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        roundKey_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        roundKey_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        roundKey_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        roundKey_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        roundKey_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        roundKey_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        roundKey_address0 = 64'd1;
    end else begin
        roundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        roundKey_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        roundKey_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        roundKey_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        roundKey_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        roundKey_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        roundKey_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        roundKey_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        roundKey_address1 = 64'd0;
    end else begin
        roundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        roundKey_ce0 = 1'b1;
    end else begin
        roundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        roundKey_ce1 = 1'b1;
    end else begin
        roundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sbox_address0 = zext_ln139_22_fu_625_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address0 = zext_ln139_20_fu_615_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_address0 = zext_ln139_18_fu_605_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_address0 = zext_ln139_16_fu_595_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_address0 = zext_ln139_14_fu_585_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_address0 = zext_ln139_12_fu_575_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_address0 = zext_ln139_10_fu_565_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sbox_address0 = zext_ln139_8_fu_555_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sbox_address1 = zext_ln139_21_fu_620_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address1 = zext_ln139_19_fu_610_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_address1 = zext_ln139_17_fu_600_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_address1 = zext_ln139_15_fu_590_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_address1 = zext_ln139_13_fu_580_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_address1 = zext_ln139_11_fu_570_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_address1 = zext_ln139_9_fu_560_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sbox_address1 = zext_ln139_fu_550_p1;
    end else begin
        sbox_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        sbox_ce1 = 1'b1;
    end else begin
        sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        state_address0 = state_addr_11_reg_1215;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        state_address0 = state_addr_3_reg_1021;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address0 = state_addr_9_reg_1162;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd1;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_address1 = state_addr_14_reg_1325;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        state_address1 = state_addr_6_reg_1115;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address1 = state_addr_reg_989;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address1 = 64'd0;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        state_d0 = xor_ln341_11_reg_1497;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        state_d0 = xor_ln341_3_reg_1487;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_d0 = xor_ln341_10_reg_1477;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_d0 = xor_ln341_2_reg_1467;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d0 = xor_ln341_9_reg_1457;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d0 = xor_ln341_12_reg_1447;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d0 = xor_ln341_8_reg_1437;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d0 = xor_ln341_4_reg_1432;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        state_d1 = xor_ln341_15_reg_1502;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        state_d1 = xor_ln341_7_reg_1492;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_d1 = xor_ln341_14_reg_1482;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        state_d1 = xor_ln341_6_reg_1472;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d1 = xor_ln341_13_reg_1462;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d1 = xor_ln341_5_reg_1452;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d1 = xor_ln341_1_reg_1442;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d1 = xor_ln341_reg_1427;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign state_addr_11_reg_1215 = 64'd11;

assign state_addr_14_reg_1325 = 64'd14;

assign state_addr_3_reg_1021 = 64'd3;

assign state_addr_6_reg_1115 = 64'd6;

assign state_addr_9_reg_1162 = 64'd9;

assign state_addr_reg_989 = 64'd0;

assign xor_ln341_10_fu_863_p2 = (xor_ln341_48_fu_857_p2 ^ xor_ln341_46_fu_846_p2);

assign xor_ln341_11_fu_955_p2 = (xor_ln341_51_fu_949_p2 ^ xor_ln341_49_fu_938_p2);

assign xor_ln341_12_fu_729_p2 = (xor_ln341_54_fu_724_p2 ^ xor_ln341_52_fu_714_p2);

assign xor_ln341_13_fu_794_p2 = (xor_ln341_57_fu_788_p2 ^ xor_ln341_55_fu_777_p2);

assign xor_ln341_14_fu_886_p2 = (xor_ln341_60_fu_880_p2 ^ xor_ln341_58_fu_869_p2);

assign xor_ln341_15_fu_978_p2 = (xor_ln341_63_fu_972_p2 ^ xor_ln341_61_fu_961_p2);

assign xor_ln341_16_fu_630_p2 = (roundKey_load_reg_1026 ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_17_fu_635_p2 = (tmp_9_reg_1220 ^ tmp_8_reg_1389);

assign xor_ln341_18_fu_639_p2 = (xor_ln341_17_fu_635_p2 ^ reg_521);

assign xor_ln341_19_fu_693_p2 = (tmp_13_reg_1421 ^ roundKey_load_1_reg_1031);

assign xor_ln341_1_fu_708_p2 = (xor_ln341_21_fu_702_p2 ^ xor_ln341_19_fu_693_p2);

assign xor_ln341_20_fu_697_p2 = (tmp_15_reg_1284 ^ grp_galois_multiplication_fu_504_ap_return);

assign xor_ln341_21_fu_702_p2 = (xor_ln341_20_fu_697_p2 ^ reg_540);

assign xor_ln341_22_fu_800_p2 = (roundKey_load_2_reg_1073 ^ reg_525);

assign xor_ln341_23_fu_805_p2 = (grp_galois_multiplication_fu_504_ap_return ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_24_fu_811_p2 = (xor_ln341_23_fu_805_p2 ^ reg_521);

assign xor_ln341_25_fu_892_p2 = (roundKey_load_3_reg_1078 ^ reg_525);

assign xor_ln341_26_fu_897_p2 = (grp_galois_multiplication_fu_504_ap_return ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_27_fu_903_p2 = (xor_ln341_26_fu_897_p2 ^ reg_521);

assign xor_ln341_28_fu_651_p2 = (tmp_1_reg_1225 ^ roundKey_load_4_reg_1126);

assign xor_ln341_29_fu_655_p2 = (tmp_3_reg_1395 ^ reg_525);

assign xor_ln341_2_fu_817_p2 = (xor_ln341_24_fu_811_p2 ^ xor_ln341_22_fu_800_p2);

assign xor_ln341_30_fu_660_p2 = (xor_ln341_29_fu_655_p2 ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_31_fu_735_p2 = (tmp_16_reg_1336 ^ roundKey_load_5_reg_1131);

assign xor_ln341_32_fu_739_p2 = (tmp_17_reg_1341 ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_33_fu_744_p2 = (xor_ln341_32_fu_739_p2 ^ tmp_13_reg_1421);

assign xor_ln341_34_fu_823_p2 = (roundKey_load_6_reg_1167 ^ reg_536);

assign xor_ln341_35_fu_828_p2 = (reg_540 ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_36_fu_834_p2 = (xor_ln341_35_fu_828_p2 ^ reg_525);

assign xor_ln341_37_fu_915_p2 = (roundKey_load_7_reg_1172 ^ reg_536);

assign xor_ln341_38_fu_920_p2 = (reg_540 ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_39_fu_926_p2 = (xor_ln341_38_fu_920_p2 ^ reg_525);

assign xor_ln341_3_fu_909_p2 = (xor_ln341_27_fu_903_p2 ^ xor_ln341_25_fu_892_p2);

assign xor_ln341_40_fu_672_p2 = (tmp_4_reg_1416 ^ roundKey_load_8_reg_1230);

assign xor_ln341_41_fu_676_p2 = (tmp_5_reg_1278 ^ grp_galois_multiplication_fu_504_ap_return);

assign xor_ln341_42_fu_681_p2 = (xor_ln341_41_fu_676_p2 ^ reg_525);

assign xor_ln341_43_fu_755_p2 = (roundKey_load_9_reg_1235 ^ reg_540);

assign xor_ln341_44_fu_760_p2 = (grp_galois_multiplication_fu_504_ap_return ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_45_fu_766_p2 = (xor_ln341_44_fu_760_p2 ^ tmp_17_reg_1341);

assign xor_ln341_46_fu_846_p2 = (roundKey_load_10_reg_1289 ^ reg_525);

assign xor_ln341_47_fu_851_p2 = (grp_galois_multiplication_fu_504_ap_return ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_48_fu_857_p2 = (xor_ln341_47_fu_851_p2 ^ reg_540);

assign xor_ln341_49_fu_938_p2 = (roundKey_load_11_reg_1294 ^ reg_525);

assign xor_ln341_4_fu_666_p2 = (xor_ln341_30_fu_660_p2 ^ xor_ln341_28_fu_651_p2);

assign xor_ln341_50_fu_943_p2 = (grp_galois_multiplication_fu_504_ap_return ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_51_fu_949_p2 = (xor_ln341_50_fu_943_p2 ^ reg_540);

assign xor_ln341_52_fu_714_p2 = (tmp_5_reg_1278 ^ roundKey_load_12_reg_1347);

assign xor_ln341_53_fu_718_p2 = (reg_536 ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_54_fu_724_p2 = (xor_ln341_53_fu_718_p2 ^ tmp_8_reg_1389);

assign xor_ln341_55_fu_777_p2 = (roundKey_load_13_reg_1352 ^ reg_521);

assign xor_ln341_56_fu_782_p2 = (grp_galois_multiplication_fu_504_ap_return ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_57_fu_788_p2 = (xor_ln341_56_fu_782_p2 ^ reg_525);

assign xor_ln341_58_fu_869_p2 = (roundKey_load_14_reg_1400 ^ reg_536);

assign xor_ln341_59_fu_874_p2 = (grp_galois_multiplication_fu_504_ap_return ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_5_fu_749_p2 = (xor_ln341_33_fu_744_p2 ^ xor_ln341_31_fu_735_p2);

assign xor_ln341_60_fu_880_p2 = (xor_ln341_59_fu_874_p2 ^ reg_521);

assign xor_ln341_61_fu_961_p2 = (roundKey_load_15_reg_1405 ^ reg_536);

assign xor_ln341_62_fu_966_p2 = (grp_galois_multiplication_fu_504_ap_return ^ grp_galois_multiplication_fu_497_ap_return);

assign xor_ln341_63_fu_972_p2 = (xor_ln341_62_fu_966_p2 ^ reg_521);

assign xor_ln341_6_fu_840_p2 = (xor_ln341_36_fu_834_p2 ^ xor_ln341_34_fu_823_p2);

assign xor_ln341_7_fu_932_p2 = (xor_ln341_39_fu_926_p2 ^ xor_ln341_37_fu_915_p2);

assign xor_ln341_8_fu_687_p2 = (xor_ln341_42_fu_681_p2 ^ xor_ln341_40_fu_672_p2);

assign xor_ln341_9_fu_771_p2 = (xor_ln341_45_fu_766_p2 ^ xor_ln341_43_fu_755_p2);

assign xor_ln341_fu_645_p2 = (xor_ln341_18_fu_639_p2 ^ xor_ln341_16_fu_630_p2);

assign zext_ln139_10_fu_565_p1 = state_q0;

assign zext_ln139_11_fu_570_p1 = state_q1;

assign zext_ln139_12_fu_575_p1 = state_q0;

assign zext_ln139_13_fu_580_p1 = state_q1;

assign zext_ln139_14_fu_585_p1 = state_q0;

assign zext_ln139_15_fu_590_p1 = state_q1;

assign zext_ln139_16_fu_595_p1 = state_q0;

assign zext_ln139_17_fu_600_p1 = state_q1;

assign zext_ln139_18_fu_605_p1 = state_q0;

assign zext_ln139_19_fu_610_p1 = state_q1;

assign zext_ln139_20_fu_615_p1 = state_q0;

assign zext_ln139_21_fu_620_p1 = state_q1;

assign zext_ln139_22_fu_625_p1 = state_q0;

assign zext_ln139_8_fu_555_p1 = state_q0;

assign zext_ln139_9_fu_560_p1 = state_q1;

assign zext_ln139_fu_550_p1 = state_q1;

endmodule //aes_aes_round
