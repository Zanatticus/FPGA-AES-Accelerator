// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_aes_invMain_Pipeline_aesInvMainLoop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln442,
        roundKey_address0,
        roundKey_ce0,
        roundKey_we0,
        roundKey_d0,
        roundKey_q0,
        roundKey_address1,
        roundKey_ce1,
        roundKey_we1,
        roundKey_d1,
        roundKey_q1,
        expandedKey_0_address0,
        expandedKey_0_ce0,
        expandedKey_0_q0,
        expandedKey_0_address1,
        expandedKey_0_ce1,
        expandedKey_0_q1,
        expandedKey_1_address0,
        expandedKey_1_ce0,
        expandedKey_1_q0,
        expandedKey_1_address1,
        expandedKey_1_ce1,
        expandedKey_1_q1,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1
);

parameter    ap_ST_fsm_state1 = 46'd1;
parameter    ap_ST_fsm_state2 = 46'd2;
parameter    ap_ST_fsm_state3 = 46'd4;
parameter    ap_ST_fsm_state4 = 46'd8;
parameter    ap_ST_fsm_state5 = 46'd16;
parameter    ap_ST_fsm_state6 = 46'd32;
parameter    ap_ST_fsm_state7 = 46'd64;
parameter    ap_ST_fsm_state8 = 46'd128;
parameter    ap_ST_fsm_state9 = 46'd256;
parameter    ap_ST_fsm_state10 = 46'd512;
parameter    ap_ST_fsm_state11 = 46'd1024;
parameter    ap_ST_fsm_state12 = 46'd2048;
parameter    ap_ST_fsm_state13 = 46'd4096;
parameter    ap_ST_fsm_state14 = 46'd8192;
parameter    ap_ST_fsm_state15 = 46'd16384;
parameter    ap_ST_fsm_state16 = 46'd32768;
parameter    ap_ST_fsm_state17 = 46'd65536;
parameter    ap_ST_fsm_state18 = 46'd131072;
parameter    ap_ST_fsm_state19 = 46'd262144;
parameter    ap_ST_fsm_state20 = 46'd524288;
parameter    ap_ST_fsm_state21 = 46'd1048576;
parameter    ap_ST_fsm_state22 = 46'd2097152;
parameter    ap_ST_fsm_state23 = 46'd4194304;
parameter    ap_ST_fsm_state24 = 46'd8388608;
parameter    ap_ST_fsm_state25 = 46'd16777216;
parameter    ap_ST_fsm_state26 = 46'd33554432;
parameter    ap_ST_fsm_state27 = 46'd67108864;
parameter    ap_ST_fsm_state28 = 46'd134217728;
parameter    ap_ST_fsm_state29 = 46'd268435456;
parameter    ap_ST_fsm_state30 = 46'd536870912;
parameter    ap_ST_fsm_state31 = 46'd1073741824;
parameter    ap_ST_fsm_state32 = 46'd2147483648;
parameter    ap_ST_fsm_state33 = 46'd4294967296;
parameter    ap_ST_fsm_state34 = 46'd8589934592;
parameter    ap_ST_fsm_state35 = 46'd17179869184;
parameter    ap_ST_fsm_state36 = 46'd34359738368;
parameter    ap_ST_fsm_state37 = 46'd68719476736;
parameter    ap_ST_fsm_state38 = 46'd137438953472;
parameter    ap_ST_fsm_state39 = 46'd274877906944;
parameter    ap_ST_fsm_state40 = 46'd549755813888;
parameter    ap_ST_fsm_state41 = 46'd1099511627776;
parameter    ap_ST_fsm_state42 = 46'd2199023255552;
parameter    ap_ST_fsm_state43 = 46'd4398046511104;
parameter    ap_ST_fsm_state44 = 46'd8796093022208;
parameter    ap_ST_fsm_state45 = 46'd17592186044416;
parameter    ap_ST_fsm_state46 = 46'd35184372088832;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] zext_ln442;
output  [3:0] roundKey_address0;
output   roundKey_ce0;
output   roundKey_we0;
output  [7:0] roundKey_d0;
input  [7:0] roundKey_q0;
output  [3:0] roundKey_address1;
output   roundKey_ce1;
output   roundKey_we1;
output  [7:0] roundKey_d1;
input  [7:0] roundKey_q1;
output  [6:0] expandedKey_0_address0;
output   expandedKey_0_ce0;
input  [7:0] expandedKey_0_q0;
output  [6:0] expandedKey_0_address1;
output   expandedKey_0_ce1;
input  [7:0] expandedKey_0_q1;
output  [6:0] expandedKey_1_address0;
output   expandedKey_1_ce0;
input  [7:0] expandedKey_1_q0;
output  [6:0] expandedKey_1_address1;
output   expandedKey_1_ce1;
input  [7:0] expandedKey_1_q1;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;

reg ap_idle;
reg[3:0] roundKey_address0;
reg roundKey_ce0;
reg roundKey_we0;
reg[7:0] roundKey_d0;
reg[3:0] roundKey_address1;
reg roundKey_ce1;
reg roundKey_we1;
reg[7:0] roundKey_d1;
reg[6:0] expandedKey_0_address0;
reg expandedKey_0_ce0;
reg[6:0] expandedKey_0_address1;
reg expandedKey_0_ce1;
reg[6:0] expandedKey_1_address0;
reg expandedKey_1_ce0;
reg[6:0] expandedKey_1_address1;
reg expandedKey_1_ce1;

(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln660_fu_427_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state46;
wire    ap_block_state46_pp0_stage45_iter0;
reg   [7:0] reg_391;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [7:0] reg_397;
reg   [7:0] reg_403;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
reg   [7:0] reg_409;
wire   [6:0] shl_ln_fu_437_p3;
reg   [6:0] shl_ln_reg_630;
reg   [7:0] expandedKey_0_load_17_reg_700;
reg   [7:0] expandedKey_1_load_17_reg_705;
reg   [7:0] expandedKey_0_load_19_reg_730;
reg   [7:0] expandedKey_1_load_19_reg_735;
wire    grp_aes_invRound_fu_381_ap_start;
wire    grp_aes_invRound_fu_381_ap_done;
wire    grp_aes_invRound_fu_381_ap_idle;
wire    grp_aes_invRound_fu_381_ap_ready;
wire   [3:0] grp_aes_invRound_fu_381_state_address0;
wire    grp_aes_invRound_fu_381_state_ce0;
wire    grp_aes_invRound_fu_381_state_we0;
wire   [7:0] grp_aes_invRound_fu_381_state_d0;
wire   [3:0] grp_aes_invRound_fu_381_state_address1;
wire    grp_aes_invRound_fu_381_state_ce1;
wire    grp_aes_invRound_fu_381_state_we1;
wire   [7:0] grp_aes_invRound_fu_381_state_d1;
wire   [3:0] grp_aes_invRound_fu_381_roundKey_address0;
wire    grp_aes_invRound_fu_381_roundKey_ce0;
wire   [3:0] grp_aes_invRound_fu_381_roundKey_address1;
wire    grp_aes_invRound_fu_381_roundKey_ce1;
reg    grp_aes_invRound_fu_381_ap_start_reg;
wire    ap_CS_fsm_state9;
reg   [45:0] ap_NS_fsm;
wire    ap_NS_fsm_state10;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state44;
wire   [63:0] zext_ln442_12_fu_445_p1;
wire   [63:0] zext_ln442_13_fu_457_p1;
wire   [63:0] zext_ln442_14_fu_479_p1;
wire   [63:0] zext_ln442_15_fu_490_p1;
wire   [63:0] zext_ln442_16_fu_501_p1;
wire   [63:0] zext_ln442_17_fu_512_p1;
wire   [63:0] zext_ln442_18_fu_523_p1;
wire   [63:0] zext_ln442_19_fu_534_p1;
reg   [4:0] i_fu_86;
wire   [4:0] zext_ln442_cast_fu_415_p1;
wire   [4:0] add_ln660_fu_463_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_10;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state9_pp0_stage8_iter0;
wire   [3:0] trunc_ln442_fu_433_p1;
wire   [6:0] or_ln442_fu_451_p2;
wire   [6:0] or_ln442_7_fu_474_p2;
wire   [6:0] or_ln442_8_fu_485_p2;
wire   [6:0] or_ln442_9_fu_496_p2;
wire   [6:0] or_ln442_10_fu_507_p2;
wire   [6:0] or_ln442_11_fu_518_p2;
wire   [6:0] or_ln442_12_fu_529_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_ST_fsm_state10_blk;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_ST_fsm_state11_blk;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_ST_fsm_state12_blk;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_ST_fsm_state13_blk;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_ST_fsm_state14_blk;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_ST_fsm_state15_blk;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_ST_fsm_state16_blk;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_ST_fsm_state17_blk;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_ST_fsm_state18_blk;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_ST_fsm_state19_blk;
wire    ap_block_state20_pp0_stage19_iter0;
wire    ap_ST_fsm_state20_blk;
wire    ap_block_state21_pp0_stage20_iter0;
wire    ap_ST_fsm_state21_blk;
wire    ap_block_state22_pp0_stage21_iter0;
wire    ap_ST_fsm_state22_blk;
wire    ap_block_state23_pp0_stage22_iter0;
wire    ap_ST_fsm_state23_blk;
wire    ap_block_state24_pp0_stage23_iter0;
wire    ap_ST_fsm_state24_blk;
wire    ap_block_state25_pp0_stage24_iter0;
wire    ap_ST_fsm_state25_blk;
wire    ap_block_state26_pp0_stage25_iter0;
wire    ap_ST_fsm_state26_blk;
wire    ap_block_state27_pp0_stage26_iter0;
wire    ap_ST_fsm_state27_blk;
wire    ap_block_state28_pp0_stage27_iter0;
wire    ap_ST_fsm_state28_blk;
wire    ap_block_state29_pp0_stage28_iter0;
wire    ap_ST_fsm_state29_blk;
wire    ap_block_state30_pp0_stage29_iter0;
wire    ap_ST_fsm_state30_blk;
wire    ap_block_state31_pp0_stage30_iter0;
wire    ap_ST_fsm_state31_blk;
wire    ap_block_state32_pp0_stage31_iter0;
wire    ap_ST_fsm_state32_blk;
wire    ap_block_state33_pp0_stage32_iter0;
wire    ap_ST_fsm_state33_blk;
wire    ap_block_state34_pp0_stage33_iter0;
wire    ap_ST_fsm_state34_blk;
wire    ap_block_state35_pp0_stage34_iter0;
wire    ap_ST_fsm_state35_blk;
wire    ap_block_state36_pp0_stage35_iter0;
wire    ap_ST_fsm_state36_blk;
wire    ap_block_state37_pp0_stage36_iter0;
wire    ap_ST_fsm_state37_blk;
wire    ap_block_state38_pp0_stage37_iter0;
wire    ap_ST_fsm_state38_blk;
wire    ap_block_state39_pp0_stage38_iter0;
wire    ap_ST_fsm_state39_blk;
wire    ap_block_state40_pp0_stage39_iter0;
wire    ap_ST_fsm_state40_blk;
wire    ap_block_state41_pp0_stage40_iter0;
wire    ap_ST_fsm_state41_blk;
wire    ap_block_state42_pp0_stage41_iter0;
wire    ap_ST_fsm_state42_blk;
wire    ap_block_state43_pp0_stage42_iter0;
wire    ap_ST_fsm_state43_blk;
wire    ap_block_state44_pp0_stage43_iter0;
wire    ap_ST_fsm_state44_blk;
wire    ap_block_state45_pp0_stage44_iter0;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 46'd1;
#0 grp_aes_invRound_fu_381_ap_start_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

aes_aes_invRound grp_aes_invRound_fu_381(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_invRound_fu_381_ap_start),
    .ap_done(grp_aes_invRound_fu_381_ap_done),
    .ap_idle(grp_aes_invRound_fu_381_ap_idle),
    .ap_ready(grp_aes_invRound_fu_381_ap_ready),
    .state_address0(grp_aes_invRound_fu_381_state_address0),
    .state_ce0(grp_aes_invRound_fu_381_state_ce0),
    .state_we0(grp_aes_invRound_fu_381_state_we0),
    .state_d0(grp_aes_invRound_fu_381_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_aes_invRound_fu_381_state_address1),
    .state_ce1(grp_aes_invRound_fu_381_state_ce1),
    .state_we1(grp_aes_invRound_fu_381_state_we1),
    .state_d1(grp_aes_invRound_fu_381_state_d1),
    .state_q1(state_q1),
    .roundKey_address0(grp_aes_invRound_fu_381_roundKey_address0),
    .roundKey_ce0(grp_aes_invRound_fu_381_roundKey_ce0),
    .roundKey_q0(roundKey_q0),
    .roundKey_address1(grp_aes_invRound_fu_381_roundKey_address1),
    .roundKey_ce1(grp_aes_invRound_fu_381_roundKey_ce1),
    .roundKey_q1(roundKey_q1)
);

aes_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes_invRound_fu_381_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state10) & (1'b1 == ap_CS_fsm_state9))) begin
            grp_aes_invRound_fu_381_ap_start_reg <= 1'b1;
        end else if ((grp_aes_invRound_fu_381_ap_ready == 1'b1)) begin
            grp_aes_invRound_fu_381_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln660_fu_427_p2 == 1'd0)) begin
            i_fu_86 <= add_ln660_fu_463_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_86 <= zext_ln442_cast_fu_415_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_391 <= expandedKey_0_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_391 <= expandedKey_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_397 <= expandedKey_1_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_397 <= expandedKey_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_403 <= expandedKey_0_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_403 <= expandedKey_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_409 <= expandedKey_1_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_409 <= expandedKey_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_0_load_17_reg_700 <= expandedKey_0_q0;
        expandedKey_1_load_17_reg_705 <= expandedKey_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        expandedKey_0_load_19_reg_730 <= expandedKey_0_q0;
        expandedKey_1_load_19_reg_735 <= expandedKey_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln660_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        shl_ln_reg_630[6 : 3] <= shl_ln_fu_437_p3[6 : 3];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln660_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_10 = zext_ln442_cast_fu_415_p1;
    end else begin
        ap_sig_allocacmp_i_10 = i_fu_86;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_0_address0 = zext_ln442_19_fu_534_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        expandedKey_0_address0 = zext_ln442_17_fu_512_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_0_address0 = zext_ln442_15_fu_490_p1;
    end else if (((icmp_ln660_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_0_address0 = zext_ln442_13_fu_457_p1;
    end else begin
        expandedKey_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_0_address1 = zext_ln442_18_fu_523_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        expandedKey_0_address1 = zext_ln442_16_fu_501_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_0_address1 = zext_ln442_14_fu_479_p1;
    end else if (((icmp_ln660_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_0_address1 = zext_ln442_12_fu_445_p1;
    end else begin
        expandedKey_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln660_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        expandedKey_0_ce0 = 1'b1;
    end else begin
        expandedKey_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln660_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        expandedKey_0_ce1 = 1'b1;
    end else begin
        expandedKey_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_1_address0 = zext_ln442_19_fu_534_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        expandedKey_1_address0 = zext_ln442_17_fu_512_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_1_address0 = zext_ln442_15_fu_490_p1;
    end else if (((icmp_ln660_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_1_address0 = zext_ln442_13_fu_457_p1;
    end else begin
        expandedKey_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_1_address1 = zext_ln442_18_fu_523_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        expandedKey_1_address1 = zext_ln442_16_fu_501_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_1_address1 = zext_ln442_14_fu_479_p1;
    end else if (((icmp_ln660_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_1_address1 = zext_ln442_12_fu_445_p1;
    end else begin
        expandedKey_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln660_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        expandedKey_1_ce0 = 1'b1;
    end else begin
        expandedKey_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln660_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        expandedKey_1_ce1 = 1'b1;
    end else begin
        expandedKey_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        roundKey_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        roundKey_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        roundKey_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        roundKey_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        roundKey_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        roundKey_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        roundKey_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        roundKey_address0 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        roundKey_address0 = grp_aes_invRound_fu_381_roundKey_address0;
    end else begin
        roundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        roundKey_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        roundKey_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        roundKey_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        roundKey_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        roundKey_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        roundKey_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        roundKey_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        roundKey_address1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        roundKey_address1 = grp_aes_invRound_fu_381_roundKey_address1;
    end else begin
        roundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        roundKey_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        roundKey_ce0 = grp_aes_invRound_fu_381_roundKey_ce0;
    end else begin
        roundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        roundKey_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        roundKey_ce1 = grp_aes_invRound_fu_381_roundKey_ce1;
    end else begin
        roundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        roundKey_d0 = expandedKey_1_load_19_reg_735;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        roundKey_d0 = expandedKey_1_load_17_reg_705;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        roundKey_d0 = reg_409;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        roundKey_d0 = reg_397;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        roundKey_d0 = expandedKey_1_q1;
    end else begin
        roundKey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        roundKey_d1 = expandedKey_0_load_19_reg_730;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        roundKey_d1 = expandedKey_0_load_17_reg_700;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        roundKey_d1 = reg_403;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        roundKey_d1 = reg_391;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        roundKey_d1 = expandedKey_0_q1;
    end else begin
        roundKey_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        roundKey_we0 = 1'b1;
    end else begin
        roundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        roundKey_we1 = 1'b1;
    end else begin
        roundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln660_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln660_fu_463_p2 = ($signed(ap_sig_allocacmp_i_10) + $signed(5'd31));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state10 = ap_NS_fsm[32'd9];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage33_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage35_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage36_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage37_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage38_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage39_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage40_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage41_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage42_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage43_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage44_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage45_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_aes_invRound_fu_381_ap_start = grp_aes_invRound_fu_381_ap_start_reg;

assign icmp_ln660_fu_427_p2 = ((ap_sig_allocacmp_i_10 == 5'd0) ? 1'b1 : 1'b0);

assign or_ln442_10_fu_507_p2 = (shl_ln_reg_630 | 7'd5);

assign or_ln442_11_fu_518_p2 = (shl_ln_reg_630 | 7'd6);

assign or_ln442_12_fu_529_p2 = (shl_ln_reg_630 | 7'd7);

assign or_ln442_7_fu_474_p2 = (shl_ln_reg_630 | 7'd2);

assign or_ln442_8_fu_485_p2 = (shl_ln_reg_630 | 7'd3);

assign or_ln442_9_fu_496_p2 = (shl_ln_reg_630 | 7'd4);

assign or_ln442_fu_451_p2 = (shl_ln_fu_437_p3 | 7'd1);

assign shl_ln_fu_437_p3 = {{trunc_ln442_fu_433_p1}, {3'd0}};

assign state_address0 = grp_aes_invRound_fu_381_state_address0;

assign state_address1 = grp_aes_invRound_fu_381_state_address1;

assign state_ce0 = grp_aes_invRound_fu_381_state_ce0;

assign state_ce1 = grp_aes_invRound_fu_381_state_ce1;

assign state_d0 = grp_aes_invRound_fu_381_state_d0;

assign state_d1 = grp_aes_invRound_fu_381_state_d1;

assign state_we0 = grp_aes_invRound_fu_381_state_we0;

assign state_we1 = grp_aes_invRound_fu_381_state_we1;

assign trunc_ln442_fu_433_p1 = ap_sig_allocacmp_i_10[3:0];

assign zext_ln442_12_fu_445_p1 = shl_ln_fu_437_p3;

assign zext_ln442_13_fu_457_p1 = or_ln442_fu_451_p2;

assign zext_ln442_14_fu_479_p1 = or_ln442_7_fu_474_p2;

assign zext_ln442_15_fu_490_p1 = or_ln442_8_fu_485_p2;

assign zext_ln442_16_fu_501_p1 = or_ln442_9_fu_496_p2;

assign zext_ln442_17_fu_512_p1 = or_ln442_10_fu_507_p2;

assign zext_ln442_18_fu_523_p1 = or_ln442_11_fu_518_p2;

assign zext_ln442_19_fu_534_p1 = or_ln442_12_fu_529_p2;

assign zext_ln442_cast_fu_415_p1 = zext_ln442;

always @ (posedge ap_clk) begin
    shl_ln_reg_630[2:0] <= 3'b000;
end

endmodule //aes_aes_invMain_Pipeline_aesInvMainLoop
