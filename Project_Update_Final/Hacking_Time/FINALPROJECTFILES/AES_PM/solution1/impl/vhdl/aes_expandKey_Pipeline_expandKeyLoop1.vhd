-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_expandKey_Pipeline_expandKeyLoop1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln241 : IN STD_LOGIC_VECTOR (5 downto 0);
    key : IN STD_LOGIC_VECTOR (10 downto 0);
    key_array128_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    key_array128_ce0 : OUT STD_LOGIC;
    key_array128_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_array128_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    key_array128_ce1 : OUT STD_LOGIC;
    key_array128_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_array128_address2 : OUT STD_LOGIC_VECTOR (10 downto 0);
    key_array128_ce2 : OUT STD_LOGIC;
    key_array128_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_array128_address3 : OUT STD_LOGIC_VECTOR (10 downto 0);
    key_array128_ce3 : OUT STD_LOGIC;
    key_array128_q3 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    expandedKey_1_ce0 : OUT STD_LOGIC;
    expandedKey_1_we0 : OUT STD_LOGIC;
    expandedKey_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    expandedKey_1_ce1 : OUT STD_LOGIC;
    expandedKey_1_we1 : OUT STD_LOGIC;
    expandedKey_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    expandedKey_0_ce0 : OUT STD_LOGIC;
    expandedKey_0_we0 : OUT STD_LOGIC;
    expandedKey_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    expandedKey_0_ce1 : OUT STD_LOGIC;
    expandedKey_0_we1 : OUT STD_LOGIC;
    expandedKey_0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_expandKey_Pipeline_expandKeyLoop1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln241_3_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_2_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_1_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln241_cast_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln241_cast_reg_337 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln241_reg_345 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_reg_354 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln241_1_reg_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_2_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_3_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln244_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln244_2_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln244_3_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln244_5_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln244_1_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln244_4_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_fu_54 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln241_fu_295_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal empty_fu_190_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln244_fu_194_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln241_fu_214_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln241_3_fu_220_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln244_1_fu_231_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln241_1_fu_241_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln241_4_fu_247_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln244_2_fu_258_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln241_2_fu_268_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln241_5_fu_274_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln244_3_fu_285_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln244_fu_311_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_327 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component aes_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component aes_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_0_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_0_fu_54 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_327)) then 
                    i_0_fu_54 <= add_ln241_fu_295_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln241_fu_185_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln241_1_reg_360 <= icmp_ln241_1_fu_226_p2;
                lshr_ln_reg_354 <= i_0_fu_54(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln241_fu_185_p2 = ap_const_lv1_0) and (icmp_ln241_1_fu_226_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln241_2_reg_369 <= icmp_ln241_2_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln241_fu_185_p2 = ap_const_lv1_0) and (icmp_ln241_1_fu_226_p2 = ap_const_lv1_0) and (icmp_ln241_2_fu_253_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln241_3_reg_378 <= icmp_ln241_3_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln241_reg_345 <= icmp_ln241_fu_185_p2;
                    zext_ln241_cast_reg_337(5 downto 0) <= zext_ln241_cast_fu_173_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln241_cast_reg_337(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln241_fu_295_p2 <= std_logic_vector(unsigned(i_0_fu_54) + unsigned(ap_const_lv64_4));
    add_ln244_1_fu_231_p2 <= std_logic_vector(unsigned(or_ln241_3_fu_220_p2) + unsigned(key));
    add_ln244_2_fu_258_p2 <= std_logic_vector(unsigned(or_ln241_4_fu_247_p2) + unsigned(key));
    add_ln244_3_fu_285_p2 <= std_logic_vector(unsigned(or_ln241_5_fu_274_p2) + unsigned(key));
    add_ln244_fu_194_p2 <= std_logic_vector(unsigned(empty_fu_190_p1) + unsigned(key));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_327_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_3_fu_280_p2, icmp_ln241_2_fu_253_p2, icmp_ln241_1_fu_226_p2, icmp_ln241_fu_185_p2)
    begin
                ap_condition_327 <= ((icmp_ln241_fu_185_p2 = ap_const_lv1_0) and (icmp_ln241_1_fu_226_p2 = ap_const_lv1_0) and (icmp_ln241_2_fu_253_p2 = ap_const_lv1_0) and (icmp_ln241_3_fu_280_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln241_3_fu_280_p2, icmp_ln241_2_fu_253_p2, icmp_ln241_1_fu_226_p2, icmp_ln241_fu_185_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln241_fu_185_p2 = ap_const_lv1_1) or ((icmp_ln241_1_fu_226_p2 = ap_const_lv1_1) or ((icmp_ln241_2_fu_253_p2 = ap_const_lv1_1) or (icmp_ln241_3_fu_280_p2 = ap_const_lv1_1)))))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_190_p1 <= i_0_fu_54(11 - 1 downto 0);
    expandedKey_0_address0 <= zext_ln244_4_fu_316_p1(7 - 1 downto 0);
    expandedKey_0_address1 <= zext_ln244_1_fu_306_p1(7 - 1 downto 0);

    expandedKey_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            expandedKey_0_ce0 <= ap_const_logic_1;
        else 
            expandedKey_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            expandedKey_0_ce1 <= ap_const_logic_1;
        else 
            expandedKey_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    expandedKey_0_d0 <= key_array128_q1;
    expandedKey_0_d1 <= key_array128_q3;

    expandedKey_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_345, icmp_ln241_1_reg_360, icmp_ln241_2_reg_369)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln241_2_reg_369 = ap_const_lv1_0) and (icmp_ln241_1_reg_360 = ap_const_lv1_0) and (icmp_ln241_reg_345 = ap_const_lv1_0))) then 
            expandedKey_0_we0 <= ap_const_logic_1;
        else 
            expandedKey_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_0_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_345)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln241_reg_345 = ap_const_lv1_0))) then 
            expandedKey_0_we1 <= ap_const_logic_1;
        else 
            expandedKey_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    expandedKey_1_address0 <= zext_ln244_4_fu_316_p1(7 - 1 downto 0);
    expandedKey_1_address1 <= zext_ln244_1_fu_306_p1(7 - 1 downto 0);

    expandedKey_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            expandedKey_1_ce0 <= ap_const_logic_1;
        else 
            expandedKey_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            expandedKey_1_ce1 <= ap_const_logic_1;
        else 
            expandedKey_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    expandedKey_1_d0 <= key_array128_q0;
    expandedKey_1_d1 <= key_array128_q2;

    expandedKey_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_345, icmp_ln241_1_reg_360, icmp_ln241_2_reg_369, icmp_ln241_3_reg_378)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln241_3_reg_378 = ap_const_lv1_0) and (icmp_ln241_2_reg_369 = ap_const_lv1_0) and (icmp_ln241_1_reg_360 = ap_const_lv1_0) and (icmp_ln241_reg_345 = ap_const_lv1_0))) then 
            expandedKey_1_we0 <= ap_const_logic_1;
        else 
            expandedKey_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_345, icmp_ln241_1_reg_360)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln241_1_reg_360 = ap_const_lv1_0) and (icmp_ln241_reg_345 = ap_const_lv1_0))) then 
            expandedKey_1_we1 <= ap_const_logic_1;
        else 
            expandedKey_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln241_1_fu_226_p2 <= "1" when (or_ln241_fu_214_p2 = zext_ln241_cast_reg_337) else "0";
    icmp_ln241_2_fu_253_p2 <= "1" when (or_ln241_1_fu_241_p2 = zext_ln241_cast_reg_337) else "0";
    icmp_ln241_3_fu_280_p2 <= "1" when (or_ln241_2_fu_268_p2 = zext_ln241_cast_reg_337) else "0";
    icmp_ln241_fu_185_p2 <= "1" when (i_0_fu_54 = zext_ln241_cast_reg_337) else "0";
    key_array128_address0 <= zext_ln244_5_fu_290_p1(11 - 1 downto 0);
    key_array128_address1 <= zext_ln244_3_fu_263_p1(11 - 1 downto 0);
    key_array128_address2 <= zext_ln244_2_fu_236_p1(11 - 1 downto 0);
    key_array128_address3 <= zext_ln244_fu_199_p1(11 - 1 downto 0);

    key_array128_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            key_array128_ce0 <= ap_const_logic_1;
        else 
            key_array128_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_array128_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            key_array128_ce1 <= ap_const_logic_1;
        else 
            key_array128_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    key_array128_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            key_array128_ce2 <= ap_const_logic_1;
        else 
            key_array128_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    key_array128_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            key_array128_ce3 <= ap_const_logic_1;
        else 
            key_array128_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln241_1_fu_241_p2 <= (i_0_fu_54 or ap_const_lv64_2);
    or_ln241_2_fu_268_p2 <= (i_0_fu_54 or ap_const_lv64_3);
    or_ln241_3_fu_220_p2 <= (empty_fu_190_p1 or ap_const_lv11_1);
    or_ln241_4_fu_247_p2 <= (empty_fu_190_p1 or ap_const_lv11_2);
    or_ln241_5_fu_274_p2 <= (empty_fu_190_p1 or ap_const_lv11_3);
    or_ln241_fu_214_p2 <= (i_0_fu_54 or ap_const_lv64_1);
    or_ln244_fu_311_p2 <= (lshr_ln_reg_354 or ap_const_lv7_1);
    zext_ln241_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln241),64));
    zext_ln244_1_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_354),64));
    zext_ln244_2_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln244_1_fu_231_p2),64));
    zext_ln244_3_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln244_2_fu_258_p2),64));
    zext_ln244_4_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln244_fu_311_p2),64));
    zext_ln244_5_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln244_3_fu_285_p2),64));
    zext_ln244_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln244_fu_194_p2),64));
end behav;
