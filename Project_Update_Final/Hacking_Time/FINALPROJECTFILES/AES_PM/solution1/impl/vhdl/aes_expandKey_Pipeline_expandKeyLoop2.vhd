-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_expandKey_Pipeline_expandKeyLoop2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln241 : IN STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    expandedKey_1_ce0 : OUT STD_LOGIC;
    expandedKey_1_we0 : OUT STD_LOGIC;
    expandedKey_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    expandedKey_1_ce1 : OUT STD_LOGIC;
    expandedKey_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    expandedKey_0_ce0 : OUT STD_LOGIC;
    expandedKey_0_we0 : OUT STD_LOGIC;
    expandedKey_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    expandedKey_0_ce1 : OUT STD_LOGIC;
    expandedKey_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKeySize_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln241_1 : IN STD_LOGIC_VECTOR (5 downto 0);
    size_cast7 : IN STD_LOGIC_VECTOR (5 downto 0);
    cmp17 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of aes_expandKey_Pipeline_expandKeyLoop2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage11_iter1 : BOOLEAN;
    signal ap_block_state36_pp0_stage11_iter2 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal icmp_ln249_reg_1013 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage11 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce1 : STD_LOGIC;
    signal sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_ce0 : STD_LOGIC;
    signal Rcon_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal size_cast7_cast_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal size_cast7_cast_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln241_1_cast_fu_402_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln241_1_cast_reg_1000 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKeySize_cast_cast_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal expandedKeySize_cast_cast_reg_1008 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln249_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln249_reg_1013_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln249_reg_1013_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln233_fu_432_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln233_reg_1017 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln233_reg_1017_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln233_reg_1017_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln233_reg_1017_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln233_1_fu_436_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln233_1_reg_1025 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln233_1_reg_1025_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln233_1_reg_1025_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln233_1_reg_1025_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln272_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln272_reg_1042 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln272_reg_1042_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln272_reg_1042_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln272_reg_1042_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln289_1_reg_1050 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln289_1_reg_1050_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln289_1_reg_1050_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln289_1_reg_1050_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal rconIteration_1_load_reg_1055 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state39_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal Rcon_load_reg_1066 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state28_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state40_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage9_iter1 : BOOLEAN;
    signal ap_block_state34_pp0_stage9_iter2 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal num_assign_3_fu_583_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal num_assign_3_reg_1091 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage10_iter1 : BOOLEAN;
    signal ap_block_state35_pp0_stage10_iter2 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal num_assign_fu_592_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal num_assign_reg_1096 : STD_LOGIC_VECTOR (7 downto 0);
    signal num_assign_1_fu_653_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal num_assign_1_reg_1131 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal num_assign_2_fu_662_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal num_assign_2_reg_1136 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_load_reg_1141 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_load_3_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln266_fu_719_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln266_reg_1166 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln266_1_fu_725_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln266_1_reg_1172 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln266_2_fu_732_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln266_2_reg_1178 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln266_3_fu_739_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln266_3_reg_1184 : STD_LOGIC_VECTOR (7 downto 0);
    signal rconIteration_fu_746_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rconIteration_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal expandedKey_0_load_4_reg_1195 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln272_2_fu_773_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln272_2_reg_1220 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln272_fu_797_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln272_reg_1225 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln272_1_fu_803_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln272_1_reg_1230 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln289_1_fu_814_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln289_1_reg_1235 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln289_3_reg_1245 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state30_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_state42_pp0_stage5_iter3 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal lshr_ln289_5_reg_1255 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln289_3_fu_921_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln289_3_reg_1260 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_state32_pp0_stage7_iter2 : BOOLEAN;
    signal ap_block_state44_pp0_stage7_iter3 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal lshr_ln289_7_reg_1270 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_state33_pp0_stage8_iter2 : BOOLEAN;
    signal ap_block_state45_pp0_stage8_iter3 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal zext_ln198_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln260_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal zext_ln260_1_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln260_2_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal zext_ln260_3_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_3_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_1_fu_671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal zext_ln139_2_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln289_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_4_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln139_5_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_6_fu_765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_7_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln289_1_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln289_2_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln289_3_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln289_4_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln289_5_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln289_6_fu_936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln289_7_fu_971_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal rconIteration_1_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal currentSize_fu_100 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln290_3_fu_518_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln241_cast_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln289_fu_785_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state29_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state41_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal xor_ln289_1_fu_857_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state31_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_state43_pp0_stage6_iter3 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal xor_ln289_2_fu_904_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal xor_ln289_3_fu_964_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_448_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_448_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln266_1_fu_444_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln272_fu_461_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_and_t_fu_467_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_453_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln272_1_fu_475_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_481_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln272_4_fu_489_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln272_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln217_fu_532_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_541_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_fu_546_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln260_fu_562_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln260_1_fu_567_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln260_1_fu_601_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln260_2_fu_606_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln260_2_fu_622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln260_3_fu_627_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln289_fu_681_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln2_fu_685_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln266_2_fu_700_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln266_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln217_fu_715_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rconIteration_2_fu_710_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln272_3_fu_779_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln290_fu_809_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln289_2_fu_819_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_847_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_847_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln290_1_fu_869_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln289_2_fu_874_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln289_4_fu_879_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln290_2_fu_916_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln289_6_fu_926_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_954_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_954_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage8 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes_srem_32ns_7ns_6_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component aes_mux_21_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_expandKey_Pipeline_expandKeyLoop2_sbox_ROM_2P_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_expandKey_Pipeline_expandKeyLoop2_Rcon_ROM_2P_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sbox_U : component aes_expandKey_Pipeline_expandKeyLoop2_sbox_ROM_2P_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0,
        address1 => sbox_address1,
        ce1 => sbox_ce1,
        q1 => sbox_q1);

    Rcon_U : component aes_expandKey_Pipeline_expandKeyLoop2_Rcon_ROM_2P_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rcon_address0,
        ce0 => Rcon_ce0,
        q0 => Rcon_q0);

    srem_32ns_7ns_6_36_1_U35 : component aes_srem_32ns_7ns_6_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_448_p0,
        din1 => grp_fu_448_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_448_p2);

    mux_21_8_1_1_U36 : component aes_mux_21_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 1,
        dout_WIDTH => 8)
    port map (
        din0 => expandedKey_0_q1,
        din1 => expandedKey_1_q1,
        din2 => trunc_ln233_reg_1017_pp0_iter2_reg,
        dout => num_assign_3_fu_583_p4);

    mux_21_8_1_1_U37 : component aes_mux_21_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 1,
        dout_WIDTH => 8)
    port map (
        din0 => expandedKey_1_q0,
        din1 => expandedKey_0_q0,
        din2 => trunc_ln233_reg_1017_pp0_iter2_reg,
        dout => num_assign_fu_592_p4);

    mux_21_8_1_1_U38 : component aes_mux_21_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 1,
        dout_WIDTH => 8)
    port map (
        din0 => expandedKey_0_q0,
        din1 => expandedKey_1_q0,
        din2 => trunc_ln233_reg_1017_pp0_iter2_reg,
        dout => num_assign_1_fu_653_p4);

    mux_21_8_1_1_U39 : component aes_mux_21_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 1,
        dout_WIDTH => 8)
    port map (
        din0 => expandedKey_1_q1,
        din1 => expandedKey_0_q1,
        din2 => trunc_ln233_reg_1017_pp0_iter2_reg,
        dout => num_assign_2_fu_662_p4);

    mux_21_8_1_1_U40 : component aes_mux_21_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 1,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => expandedKey_1_q0,
        din2 => tmp_4_fu_847_p3,
        dout => tmp_4_fu_847_p4);

    mux_21_8_1_1_U41 : component aes_mux_21_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 1,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => expandedKey_1_q0,
        din2 => tmp_6_fu_954_p3,
        dout => tmp_6_fu_954_p4);

    flow_control_loop_pipe_sequential_init_U : component aes_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage11,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage11)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage8))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage8))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    currentSize_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                currentSize_fu_100 <= zext_ln241_cast_fu_410_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln249_fu_427_p2 = ap_const_lv1_1))) then 
                currentSize_fu_100 <= add_ln290_3_fu_518_p2;
            end if; 
        end if;
    end process;

    rconIteration_1_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rconIteration_1_fu_96 <= ap_const_lv32_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                rconIteration_1_fu_96 <= rconIteration_reg_1190;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                Rcon_load_reg_1066 <= Rcon_q0;
                lshr_ln289_3_reg_1245 <= add_ln290_fu_809_p2(7 downto 1);
                select_ln272_1_reg_1230 <= select_ln272_1_fu_803_p3;
                select_ln272_reg_1225 <= select_ln272_fu_797_p3;
                sub_ln289_1_reg_1235 <= sub_ln289_1_fu_814_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln249_fu_427_p2 = ap_const_lv1_1))) then
                and_ln272_reg_1042 <= and_ln272_fu_503_p2;
                lshr_ln289_1_reg_1050 <= currentSize_fu_100(7 downto 1);
                trunc_ln233_1_reg_1025 <= trunc_ln233_1_fu_436_p1;
                trunc_ln233_reg_1017 <= trunc_ln233_fu_432_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                and_ln272_reg_1042_pp0_iter1_reg <= and_ln272_reg_1042;
                and_ln272_reg_1042_pp0_iter2_reg <= and_ln272_reg_1042_pp0_iter1_reg;
                and_ln272_reg_1042_pp0_iter3_reg <= and_ln272_reg_1042_pp0_iter2_reg;
                icmp_ln249_reg_1013 <= icmp_ln249_fu_427_p2;
                icmp_ln249_reg_1013_pp0_iter1_reg <= icmp_ln249_reg_1013;
                icmp_ln249_reg_1013_pp0_iter2_reg <= icmp_ln249_reg_1013_pp0_iter1_reg;
                lshr_ln289_1_reg_1050_pp0_iter1_reg <= lshr_ln289_1_reg_1050;
                lshr_ln289_1_reg_1050_pp0_iter2_reg <= lshr_ln289_1_reg_1050_pp0_iter1_reg;
                lshr_ln289_1_reg_1050_pp0_iter3_reg <= lshr_ln289_1_reg_1050_pp0_iter2_reg;
                trunc_ln233_1_reg_1025_pp0_iter1_reg <= trunc_ln233_1_reg_1025;
                trunc_ln233_1_reg_1025_pp0_iter2_reg <= trunc_ln233_1_reg_1025_pp0_iter1_reg;
                trunc_ln233_1_reg_1025_pp0_iter3_reg <= trunc_ln233_1_reg_1025_pp0_iter2_reg;
                trunc_ln233_reg_1017_pp0_iter1_reg <= trunc_ln233_reg_1017;
                trunc_ln233_reg_1017_pp0_iter2_reg <= trunc_ln233_reg_1017_pp0_iter1_reg;
                trunc_ln233_reg_1017_pp0_iter3_reg <= trunc_ln233_reg_1017_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    expandedKeySize_cast_cast_reg_1008(7 downto 0) <= expandedKeySize_cast_cast_fu_406_p1(7 downto 0);
                rconIteration_reg_1190 <= rconIteration_fu_746_p3;
                select_ln266_1_reg_1172 <= select_ln266_1_fu_725_p3;
                select_ln266_2_reg_1178 <= select_ln266_2_fu_732_p3;
                select_ln266_3_reg_1184 <= select_ln266_3_fu_739_p3;
                select_ln266_reg_1166 <= select_ln266_fu_719_p3;
                    size_cast7_cast_reg_995(5 downto 0) <= size_cast7_cast_fu_398_p1(5 downto 0);
                    zext_ln241_1_cast_reg_1000(5 downto 0) <= zext_ln241_1_cast_fu_402_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                expandedKey_0_load_4_reg_1195 <= expandedKey_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                lshr_ln289_5_reg_1255 <= add_ln290_1_fu_869_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                lshr_ln289_7_reg_1270 <= add_ln290_2_fu_916_p2(7 downto 1);
                sub_ln289_3_reg_1260 <= sub_ln289_3_fu_921_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                num_assign_1_reg_1131 <= num_assign_1_fu_653_p4;
                num_assign_2_reg_1136 <= num_assign_2_fu_662_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                num_assign_3_reg_1091 <= num_assign_3_fu_583_p4;
                num_assign_reg_1096 <= num_assign_fu_592_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                rconIteration_1_load_reg_1055 <= rconIteration_1_fu_96;
                select_ln272_2_reg_1220 <= select_ln272_2_fu_773_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                sbox_load_3_reg_1156 <= sbox_q0;
                sbox_load_reg_1141 <= sbox_q1;
            end if;
        end if;
    end process;
    size_cast7_cast_reg_995(31 downto 6) <= "00000000000000000000000000";
    zext_ln241_1_cast_reg_1000(7 downto 6) <= "00";
    expandedKeySize_cast_cast_reg_1008(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage11_subdone, ap_block_pp0_stage8_subdone, ap_condition_exit_pp0_iter2_stage8, ap_idle_pp0_0to1, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_done_pending_pp0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    Rcon_address0 <= zext_ln198_fu_536_p1(8 - 1 downto 0);

    Rcon_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            Rcon_ce0 <= ap_const_logic_1;
        else 
            Rcon_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln260_1_fu_601_p2 <= std_logic_vector(unsigned(trunc_ln233_1_reg_1025_pp0_iter2_reg) + unsigned(ap_const_lv8_FE));
    add_ln260_2_fu_622_p2 <= std_logic_vector(unsigned(trunc_ln233_1_reg_1025_pp0_iter2_reg) + unsigned(ap_const_lv8_FF));
    add_ln260_fu_562_p2 <= std_logic_vector(unsigned(trunc_ln233_1_reg_1025_pp0_iter2_reg) + unsigned(ap_const_lv8_FD));
    add_ln290_1_fu_869_p2 <= std_logic_vector(unsigned(trunc_ln233_1_reg_1025_pp0_iter3_reg) + unsigned(ap_const_lv8_2));
    add_ln290_2_fu_916_p2 <= std_logic_vector(unsigned(trunc_ln233_1_reg_1025_pp0_iter3_reg) + unsigned(ap_const_lv8_3));
    add_ln290_3_fu_518_p2 <= std_logic_vector(unsigned(currentSize_fu_100) + unsigned(ap_const_lv64_4));
    add_ln290_fu_809_p2 <= std_logic_vector(unsigned(trunc_ln233_1_reg_1025_pp0_iter3_reg) + unsigned(ap_const_lv8_1));
    and_ln272_fu_503_p2 <= (icmp_ln272_fu_497_p2 and cmp17);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage9_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage10_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage11_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage7_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage8_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage9_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage10_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage11_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage6_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage7_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage8_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage11_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_subdone, icmp_ln249_reg_1013)
    begin
        if (((icmp_ln249_reg_1013 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            ap_condition_exit_pp0_iter0_stage11 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage8_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln249_reg_1013_pp0_iter2_reg, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln249_reg_1013_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter2_stage8 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage11;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_541_p2 <= std_logic_vector(unsigned(trunc_ln233_1_reg_1025_pp0_iter2_reg) + unsigned(ap_const_lv8_FC));
    expandedKeySize_cast_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(expandedKeySize_cast),64));

    expandedKey_0_address0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage2, ap_block_pp0_stage9, zext_ln260_1_fu_577_p1, zext_ln260_2_fu_616_p1, ap_block_pp0_stage10, zext_ln289_1_fu_792_p1, zext_ln289_3_fu_864_p1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, zext_ln289_4_fu_889_p1, ap_block_pp0_stage5, zext_ln289_5_fu_911_p1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, zext_ln289_7_fu_971_p1, ap_block_pp0_stage8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            expandedKey_0_address0 <= zext_ln289_7_fu_971_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            expandedKey_0_address0 <= zext_ln289_5_fu_911_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            expandedKey_0_address0 <= zext_ln289_4_fu_889_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            expandedKey_0_address0 <= zext_ln289_3_fu_864_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            expandedKey_0_address0 <= zext_ln289_1_fu_792_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            expandedKey_0_address0 <= zext_ln260_2_fu_616_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            expandedKey_0_address0 <= zext_ln260_1_fu_577_p1(7 - 1 downto 0);
        else 
            expandedKey_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    expandedKey_0_address1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, zext_ln260_fu_556_p1, ap_block_pp0_stage9, ap_block_pp0_stage10, zext_ln260_3_fu_637_p1, ap_block_pp0_stage11, zext_ln289_fu_695_p1)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                expandedKey_0_address1 <= zext_ln289_fu_695_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                expandedKey_0_address1 <= zext_ln260_3_fu_637_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                expandedKey_0_address1 <= zext_ln260_fu_556_p1(7 - 1 downto 0);
            else 
                expandedKey_0_address1 <= "XXXXXXX";
            end if;
        else 
            expandedKey_0_address1 <= "XXXXXXX";
        end if; 
    end process;


    expandedKey_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage4_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            expandedKey_0_ce0 <= ap_const_logic_1;
        else 
            expandedKey_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then 
            expandedKey_0_ce1 <= ap_const_logic_1;
        else 
            expandedKey_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_0_d0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_block_pp0_stage8, xor_ln289_fu_785_p2, xor_ln289_1_fu_857_p2, xor_ln289_2_fu_904_p2, xor_ln289_3_fu_964_p2)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                expandedKey_0_d0 <= xor_ln289_3_fu_964_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                expandedKey_0_d0 <= xor_ln289_2_fu_904_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                expandedKey_0_d0 <= xor_ln289_1_fu_857_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                expandedKey_0_d0 <= xor_ln289_fu_785_p2;
            else 
                expandedKey_0_d0 <= "XXXXXXXX";
            end if;
        else 
            expandedKey_0_d0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_0_we0_assign_proc : process(ap_enable_reg_pp0_iter3, trunc_ln233_reg_1017_pp0_iter3_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage4_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (trunc_ln233_reg_1017_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (trunc_ln233_reg_1017_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (trunc_ln233_reg_1017_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln233_reg_1017_pp0_iter3_reg = ap_const_lv1_0)))) then 
            expandedKey_0_we0 <= ap_const_logic_1;
        else 
            expandedKey_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_address0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage2, ap_block_pp0_stage9, zext_ln260_1_fu_577_p1, zext_ln260_2_fu_616_p1, ap_block_pp0_stage10, zext_ln289_1_fu_792_p1, zext_ln289_2_fu_829_p1, ap_block_pp0_stage3, zext_ln289_3_fu_864_p1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, zext_ln289_5_fu_911_p1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, zext_ln289_6_fu_936_p1, ap_block_pp0_stage7, zext_ln289_7_fu_971_p1, ap_block_pp0_stage8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            expandedKey_1_address0 <= zext_ln289_7_fu_971_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            expandedKey_1_address0 <= zext_ln289_6_fu_936_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            expandedKey_1_address0 <= zext_ln289_5_fu_911_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            expandedKey_1_address0 <= zext_ln289_3_fu_864_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            expandedKey_1_address0 <= zext_ln289_2_fu_829_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            expandedKey_1_address0 <= zext_ln289_1_fu_792_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            expandedKey_1_address0 <= zext_ln260_2_fu_616_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            expandedKey_1_address0 <= zext_ln260_1_fu_577_p1(7 - 1 downto 0);
        else 
            expandedKey_1_address0 <= "XXXXXXX";
        end if; 
    end process;


    expandedKey_1_address1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, zext_ln260_fu_556_p1, ap_block_pp0_stage9, ap_block_pp0_stage10, zext_ln260_3_fu_637_p1)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                expandedKey_1_address1 <= zext_ln260_3_fu_637_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                expandedKey_1_address1 <= zext_ln260_fu_556_p1(7 - 1 downto 0);
            else 
                expandedKey_1_address1 <= "XXXXXXX";
            end if;
        else 
            expandedKey_1_address1 <= "XXXXXXX";
        end if; 
    end process;


    expandedKey_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage4_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            expandedKey_1_ce0 <= ap_const_logic_1;
        else 
            expandedKey_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then 
            expandedKey_1_ce1 <= ap_const_logic_1;
        else 
            expandedKey_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_d0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_block_pp0_stage8, xor_ln289_fu_785_p2, xor_ln289_1_fu_857_p2, xor_ln289_2_fu_904_p2, xor_ln289_3_fu_964_p2)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                expandedKey_1_d0 <= xor_ln289_3_fu_964_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                expandedKey_1_d0 <= xor_ln289_2_fu_904_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                expandedKey_1_d0 <= xor_ln289_1_fu_857_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                expandedKey_1_d0 <= xor_ln289_fu_785_p2;
            else 
                expandedKey_1_d0 <= "XXXXXXXX";
            end if;
        else 
            expandedKey_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, trunc_ln233_reg_1017_pp0_iter3_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage4_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (trunc_ln233_reg_1017_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (trunc_ln233_reg_1017_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (trunc_ln233_reg_1017_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln233_reg_1017_pp0_iter3_reg = ap_const_lv1_1)))) then 
            expandedKey_1_we0 <= ap_const_logic_1;
        else 
            expandedKey_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_448_p0 <= currentSize_fu_100(32 - 1 downto 0);
    grp_fu_448_p1 <= size_cast7_cast_reg_995(7 - 1 downto 0);
    icmp_ln249_fu_427_p2 <= "1" when (unsigned(currentSize_fu_100) < unsigned(expandedKeySize_cast_cast_reg_1008)) else "0";
    icmp_ln266_fu_704_p2 <= "1" when (trunc_ln266_2_fu_700_p1 = ap_const_lv6_0) else "0";
    icmp_ln272_fu_497_p2 <= "1" when (select_ln272_4_fu_489_p3 = ap_const_lv6_10) else "0";
    lshr_ln1_fu_546_p4 <= empty_fu_541_p2(7 downto 1);
    lshr_ln260_1_fu_567_p4 <= add_ln260_fu_562_p2(7 downto 1);
    lshr_ln260_2_fu_606_p4 <= add_ln260_1_fu_601_p2(7 downto 1);
    lshr_ln260_3_fu_627_p4 <= add_ln260_2_fu_622_p2(7 downto 1);
    lshr_ln289_2_fu_819_p4 <= sub_ln289_1_fu_814_p2(7 downto 1);
    lshr_ln289_4_fu_879_p4 <= sub_ln289_2_fu_874_p2(7 downto 1);
    lshr_ln289_6_fu_926_p4 <= sub_ln289_3_fu_921_p2(7 downto 1);
    lshr_ln2_fu_685_p4 <= sub_ln289_fu_681_p2(7 downto 1);
    p_and_t_fu_467_p3 <= (ap_const_lv1_0 & sub_ln272_fu_461_p2);
    rconIteration_2_fu_710_p2 <= std_logic_vector(unsigned(rconIteration_1_load_reg_1055) + unsigned(ap_const_lv32_1));
    rconIteration_fu_746_p3 <= 
        rconIteration_2_fu_710_p2 when (icmp_ln266_fu_704_p2(0) = '1') else 
        rconIteration_1_load_reg_1055;

    sbox_address0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage2, ap_block_pp0_stage10, zext_ln139_3_fu_648_p1, ap_block_pp0_stage11, zext_ln139_2_fu_676_p1, ap_block_pp0_stage1, zext_ln139_5_fu_757_p1, zext_ln139_7_fu_769_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            sbox_address0 <= zext_ln139_7_fu_769_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sbox_address0 <= zext_ln139_5_fu_757_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            sbox_address0 <= zext_ln139_2_fu_676_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            sbox_address0 <= zext_ln139_3_fu_648_p1(8 - 1 downto 0);
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage2, ap_block_pp0_stage10, zext_ln139_fu_643_p1, zext_ln139_1_fu_671_p1, ap_block_pp0_stage11, zext_ln139_4_fu_753_p1, ap_block_pp0_stage1, zext_ln139_6_fu_765_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            sbox_address1 <= zext_ln139_6_fu_765_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sbox_address1 <= zext_ln139_4_fu_753_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            sbox_address1 <= zext_ln139_1_fu_671_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            sbox_address1 <= zext_ln139_fu_643_p1(8 - 1 downto 0);
        else 
            sbox_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sbox_ce1 <= ap_const_logic_1;
        else 
            sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln266_1_fu_725_p3 <= 
        sbox_q0 when (icmp_ln266_fu_704_p2(0) = '1') else 
        num_assign_1_reg_1131;
    select_ln266_2_fu_732_p3 <= 
        sbox_q1 when (icmp_ln266_fu_704_p2(0) = '1') else 
        num_assign_reg_1096;
    select_ln266_3_fu_739_p3 <= 
        xor_ln217_fu_715_p2 when (icmp_ln266_fu_704_p2(0) = '1') else 
        num_assign_3_reg_1091;
    select_ln266_fu_719_p3 <= 
        sbox_load_3_reg_1156 when (icmp_ln266_fu_704_p2(0) = '1') else 
        num_assign_2_reg_1136;
    select_ln272_1_fu_803_p3 <= 
        sbox_q1 when (and_ln272_reg_1042_pp0_iter3_reg(0) = '1') else 
        select_ln266_1_reg_1172;
    select_ln272_2_fu_773_p3 <= 
        sbox_q0 when (and_ln272_reg_1042_pp0_iter3_reg(0) = '1') else 
        select_ln266_2_reg_1178;
    select_ln272_3_fu_779_p3 <= 
        sbox_q1 when (and_ln272_reg_1042_pp0_iter3_reg(0) = '1') else 
        select_ln266_3_reg_1184;
    select_ln272_4_fu_489_p3 <= 
        sub_ln272_1_fu_475_p2 when (tmp_fu_453_p3(0) = '1') else 
        tmp_7_fu_481_p3;
    select_ln272_fu_797_p3 <= 
        sbox_q0 when (and_ln272_reg_1042_pp0_iter3_reg(0) = '1') else 
        select_ln266_reg_1166;
    size_cast7_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_cast7),32));
    sub_ln272_1_fu_475_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(p_and_t_fu_467_p3));
    sub_ln272_fu_461_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(trunc_ln266_1_fu_444_p1));
    sub_ln289_1_fu_814_p2 <= std_logic_vector(unsigned(add_ln290_fu_809_p2) - unsigned(zext_ln241_1_cast_reg_1000));
    sub_ln289_2_fu_874_p2 <= std_logic_vector(unsigned(add_ln290_1_fu_869_p2) - unsigned(zext_ln241_1_cast_reg_1000));
    sub_ln289_3_fu_921_p2 <= std_logic_vector(unsigned(add_ln290_2_fu_916_p2) - unsigned(zext_ln241_1_cast_reg_1000));
    sub_ln289_fu_681_p2 <= std_logic_vector(unsigned(trunc_ln233_1_reg_1025_pp0_iter2_reg) - unsigned(zext_ln241_1_cast_reg_1000));
    tmp_4_fu_847_p3 <= sub_ln289_1_reg_1235(1 - 1 downto 0);
    tmp_6_fu_954_p3 <= sub_ln289_3_reg_1260(1 - 1 downto 0);
    tmp_7_fu_481_p3 <= (ap_const_lv1_0 & trunc_ln266_1_fu_444_p1);
    tmp_fu_453_p3 <= currentSize_fu_100(31 downto 31);
    trunc_ln217_fu_532_p1 <= rconIteration_1_fu_96(8 - 1 downto 0);
    trunc_ln233_1_fu_436_p1 <= currentSize_fu_100(8 - 1 downto 0);
    trunc_ln233_fu_432_p1 <= currentSize_fu_100(1 - 1 downto 0);
    trunc_ln266_1_fu_444_p1 <= currentSize_fu_100(5 - 1 downto 0);
    trunc_ln266_2_fu_700_p1 <= grp_fu_448_p2(6 - 1 downto 0);
    xor_ln217_fu_715_p2 <= (sbox_load_reg_1141 xor Rcon_load_reg_1066);
    xor_ln289_1_fu_857_p2 <= (tmp_4_fu_847_p4 xor select_ln272_2_reg_1220);
    xor_ln289_2_fu_904_p2 <= (select_ln272_1_reg_1230 xor expandedKey_0_q0);
    xor_ln289_3_fu_964_p2 <= (tmp_6_fu_954_p4 xor select_ln272_reg_1225);
    xor_ln289_fu_785_p2 <= (select_ln272_3_fu_779_p3 xor expandedKey_0_load_4_reg_1195);
    zext_ln139_1_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_assign_1_fu_653_p4),64));
    zext_ln139_2_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_assign_2_fu_662_p4),64));
    zext_ln139_3_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_assign_3_fu_583_p4),64));
    zext_ln139_4_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln266_3_reg_1184),64));
    zext_ln139_5_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln266_2_reg_1178),64));
    zext_ln139_6_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln266_1_reg_1172),64));
    zext_ln139_7_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln266_reg_1166),64));
    zext_ln139_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_assign_fu_592_p4),64));
    zext_ln198_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln217_fu_532_p1),64));
    zext_ln241_1_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln241_1),8));
    zext_ln241_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln241),64));
    zext_ln260_1_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln260_1_fu_567_p4),64));
    zext_ln260_2_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln260_2_fu_606_p4),64));
    zext_ln260_3_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln260_3_fu_627_p4),64));
    zext_ln260_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_546_p4),64));
    zext_ln289_1_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln289_1_reg_1050_pp0_iter3_reg),64));
    zext_ln289_2_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln289_2_fu_819_p4),64));
    zext_ln289_3_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln289_3_reg_1245),64));
    zext_ln289_4_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln289_4_fu_879_p4),64));
    zext_ln289_5_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln289_5_reg_1255),64));
    zext_ln289_6_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln289_6_fu_926_p4),64));
    zext_ln289_7_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln289_7_reg_1270),64));
    zext_ln289_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_685_p4),64));
end behav;
