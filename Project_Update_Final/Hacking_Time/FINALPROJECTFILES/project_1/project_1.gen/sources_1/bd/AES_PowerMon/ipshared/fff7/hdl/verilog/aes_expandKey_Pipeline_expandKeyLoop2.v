// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_expandKey_Pipeline_expandKeyLoop2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln241,
        expandedKey_1_address0,
        expandedKey_1_ce0,
        expandedKey_1_we0,
        expandedKey_1_d0,
        expandedKey_1_q0,
        expandedKey_1_address1,
        expandedKey_1_ce1,
        expandedKey_1_q1,
        expandedKey_0_address0,
        expandedKey_0_ce0,
        expandedKey_0_we0,
        expandedKey_0_d0,
        expandedKey_0_q0,
        expandedKey_0_address1,
        expandedKey_0_ce1,
        expandedKey_0_q1,
        expandedKeySize_cast,
        zext_ln241_1,
        size_cast7,
        cmp17
);

parameter    ap_ST_fsm_pp0_stage0 = 12'd1;
parameter    ap_ST_fsm_pp0_stage1 = 12'd2;
parameter    ap_ST_fsm_pp0_stage2 = 12'd4;
parameter    ap_ST_fsm_pp0_stage3 = 12'd8;
parameter    ap_ST_fsm_pp0_stage4 = 12'd16;
parameter    ap_ST_fsm_pp0_stage5 = 12'd32;
parameter    ap_ST_fsm_pp0_stage6 = 12'd64;
parameter    ap_ST_fsm_pp0_stage7 = 12'd128;
parameter    ap_ST_fsm_pp0_stage8 = 12'd256;
parameter    ap_ST_fsm_pp0_stage9 = 12'd512;
parameter    ap_ST_fsm_pp0_stage10 = 12'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] zext_ln241;
output  [6:0] expandedKey_1_address0;
output   expandedKey_1_ce0;
output   expandedKey_1_we0;
output  [7:0] expandedKey_1_d0;
input  [7:0] expandedKey_1_q0;
output  [6:0] expandedKey_1_address1;
output   expandedKey_1_ce1;
input  [7:0] expandedKey_1_q1;
output  [6:0] expandedKey_0_address0;
output   expandedKey_0_ce0;
output   expandedKey_0_we0;
output  [7:0] expandedKey_0_d0;
input  [7:0] expandedKey_0_q0;
output  [6:0] expandedKey_0_address1;
output   expandedKey_0_ce1;
input  [7:0] expandedKey_0_q1;
input  [7:0] expandedKeySize_cast;
input  [5:0] zext_ln241_1;
input  [5:0] size_cast7;
input  [0:0] cmp17;

reg ap_idle;
reg[6:0] expandedKey_1_address0;
reg expandedKey_1_ce0;
reg expandedKey_1_we0;
reg[7:0] expandedKey_1_d0;
reg[6:0] expandedKey_1_address1;
reg expandedKey_1_ce1;
reg[6:0] expandedKey_0_address0;
reg expandedKey_0_ce0;
reg expandedKey_0_we0;
reg[7:0] expandedKey_0_d0;
reg[6:0] expandedKey_0_address1;
reg expandedKey_0_ce1;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_state24_pp0_stage11_iter1;
wire    ap_block_state36_pp0_stage11_iter2;
wire    ap_block_pp0_stage11_subdone;
reg   [0:0] icmp_ln249_reg_1013;
reg    ap_condition_exit_pp0_iter0_stage11;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
reg   [7:0] sbox_address1;
reg    sbox_ce1;
wire   [7:0] sbox_q1;
wire   [7:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state25_pp0_stage0_iter2;
wire    ap_block_state37_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] size_cast7_cast_fu_398_p1;
reg   [31:0] size_cast7_cast_reg_995;
wire   [7:0] zext_ln241_1_cast_fu_402_p1;
reg   [7:0] zext_ln241_1_cast_reg_1000;
wire   [63:0] expandedKeySize_cast_cast_fu_406_p1;
reg   [63:0] expandedKeySize_cast_cast_reg_1008;
wire   [0:0] icmp_ln249_fu_427_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state14_pp0_stage1_iter1;
wire    ap_block_state26_pp0_stage1_iter2;
wire    ap_block_state38_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln249_reg_1013_pp0_iter1_reg;
reg   [0:0] icmp_ln249_reg_1013_pp0_iter2_reg;
wire   [0:0] trunc_ln233_fu_432_p1;
reg   [0:0] trunc_ln233_reg_1017;
reg   [0:0] trunc_ln233_reg_1017_pp0_iter1_reg;
reg   [0:0] trunc_ln233_reg_1017_pp0_iter2_reg;
reg   [0:0] trunc_ln233_reg_1017_pp0_iter3_reg;
wire   [7:0] trunc_ln233_1_fu_436_p1;
reg   [7:0] trunc_ln233_1_reg_1025;
reg   [7:0] trunc_ln233_1_reg_1025_pp0_iter1_reg;
reg   [7:0] trunc_ln233_1_reg_1025_pp0_iter2_reg;
reg   [7:0] trunc_ln233_1_reg_1025_pp0_iter3_reg;
wire   [0:0] and_ln272_fu_503_p2;
reg   [0:0] and_ln272_reg_1042;
reg   [0:0] and_ln272_reg_1042_pp0_iter1_reg;
reg   [0:0] and_ln272_reg_1042_pp0_iter2_reg;
reg   [0:0] and_ln272_reg_1042_pp0_iter3_reg;
reg   [6:0] lshr_ln289_1_reg_1050;
reg   [6:0] lshr_ln289_1_reg_1050_pp0_iter1_reg;
reg   [6:0] lshr_ln289_1_reg_1050_pp0_iter2_reg;
reg   [6:0] lshr_ln289_1_reg_1050_pp0_iter3_reg;
reg   [31:0] rconIteration_1_load_reg_1055;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state15_pp0_stage2_iter1;
wire    ap_block_state27_pp0_stage2_iter2;
wire    ap_block_state39_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] Rcon_load_reg_1066;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state16_pp0_stage3_iter1;
wire    ap_block_state28_pp0_stage3_iter2;
wire    ap_block_state40_pp0_stage3_iter3;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_state22_pp0_stage9_iter1;
wire    ap_block_state34_pp0_stage9_iter2;
wire    ap_block_pp0_stage9_11001;
wire   [7:0] num_assign_3_fu_583_p4;
reg   [7:0] num_assign_3_reg_1091;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_state23_pp0_stage10_iter1;
wire    ap_block_state35_pp0_stage10_iter2;
wire    ap_block_pp0_stage10_11001;
wire   [7:0] num_assign_fu_592_p4;
reg   [7:0] num_assign_reg_1096;
wire   [7:0] num_assign_1_fu_653_p4;
reg   [7:0] num_assign_1_reg_1131;
wire    ap_block_pp0_stage11_11001;
wire   [7:0] num_assign_2_fu_662_p4;
reg   [7:0] num_assign_2_reg_1136;
reg   [7:0] sbox_load_reg_1141;
reg   [7:0] sbox_load_3_reg_1156;
wire   [7:0] select_ln266_fu_719_p3;
reg   [7:0] select_ln266_reg_1166;
wire   [7:0] select_ln266_1_fu_725_p3;
reg   [7:0] select_ln266_1_reg_1172;
wire   [7:0] select_ln266_2_fu_732_p3;
reg   [7:0] select_ln266_2_reg_1178;
wire   [7:0] select_ln266_3_fu_739_p3;
reg   [7:0] select_ln266_3_reg_1184;
wire   [31:0] rconIteration_fu_746_p3;
reg   [31:0] rconIteration_reg_1190;
reg   [7:0] expandedKey_0_load_4_reg_1195;
wire   [7:0] select_ln272_2_fu_773_p3;
reg   [7:0] select_ln272_2_reg_1220;
wire   [7:0] select_ln272_fu_797_p3;
reg   [7:0] select_ln272_reg_1225;
wire   [7:0] select_ln272_1_fu_803_p3;
reg   [7:0] select_ln272_1_reg_1230;
wire   [7:0] sub_ln289_1_fu_814_p2;
reg   [7:0] sub_ln289_1_reg_1235;
reg   [6:0] lshr_ln289_3_reg_1245;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state18_pp0_stage5_iter1;
wire    ap_block_state30_pp0_stage5_iter2;
wire    ap_block_state42_pp0_stage5_iter3;
wire    ap_block_pp0_stage5_11001;
reg   [6:0] lshr_ln289_5_reg_1255;
wire   [7:0] sub_ln289_3_fu_921_p2;
reg   [7:0] sub_ln289_3_reg_1260;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state20_pp0_stage7_iter1;
wire    ap_block_state32_pp0_stage7_iter2;
wire    ap_block_state44_pp0_stage7_iter3;
wire    ap_block_pp0_stage7_11001;
reg   [6:0] lshr_ln289_7_reg_1270;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state21_pp0_stage8_iter1;
wire    ap_block_state33_pp0_stage8_iter2;
wire    ap_block_state45_pp0_stage8_iter3;
wire    ap_block_pp0_stage8_subdone;
wire   [63:0] zext_ln198_fu_536_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln260_fu_556_p1;
wire    ap_block_pp0_stage9;
wire   [63:0] zext_ln260_1_fu_577_p1;
wire   [63:0] zext_ln260_2_fu_616_p1;
wire    ap_block_pp0_stage10;
wire   [63:0] zext_ln260_3_fu_637_p1;
wire   [63:0] zext_ln139_fu_643_p1;
wire   [63:0] zext_ln139_3_fu_648_p1;
wire   [63:0] zext_ln139_1_fu_671_p1;
wire    ap_block_pp0_stage11;
wire   [63:0] zext_ln139_2_fu_676_p1;
wire   [63:0] zext_ln289_fu_695_p1;
wire   [63:0] zext_ln139_4_fu_753_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln139_5_fu_757_p1;
wire   [63:0] zext_ln139_6_fu_765_p1;
wire   [63:0] zext_ln139_7_fu_769_p1;
wire   [63:0] zext_ln289_1_fu_792_p1;
wire   [63:0] zext_ln289_2_fu_829_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln289_3_fu_864_p1;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln289_4_fu_889_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln289_5_fu_911_p1;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln289_6_fu_936_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln289_7_fu_971_p1;
wire    ap_block_pp0_stage8;
reg   [31:0] rconIteration_1_fu_96;
wire    ap_loop_init;
reg   [63:0] currentSize_fu_100;
wire   [63:0] add_ln290_3_fu_518_p2;
wire   [63:0] zext_ln241_cast_fu_410_p1;
wire   [7:0] xor_ln289_fu_785_p2;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state17_pp0_stage4_iter1;
wire    ap_block_state29_pp0_stage4_iter2;
wire    ap_block_state41_pp0_stage4_iter3;
wire    ap_block_pp0_stage4_11001;
wire   [7:0] xor_ln289_1_fu_857_p2;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state19_pp0_stage6_iter1;
wire    ap_block_state31_pp0_stage6_iter2;
wire    ap_block_state43_pp0_stage6_iter3;
wire    ap_block_pp0_stage6_11001;
wire   [7:0] xor_ln289_2_fu_904_p2;
wire    ap_block_pp0_stage8_11001;
wire   [7:0] xor_ln289_3_fu_964_p2;
wire    ap_block_pp0_stage0;
wire   [31:0] grp_fu_448_p0;
wire   [6:0] grp_fu_448_p1;
wire   [4:0] trunc_ln266_1_fu_444_p1;
wire   [4:0] sub_ln272_fu_461_p2;
wire   [5:0] p_and_t_fu_467_p3;
wire   [0:0] tmp_fu_453_p3;
wire   [5:0] sub_ln272_1_fu_475_p2;
wire   [5:0] tmp_7_fu_481_p3;
wire   [5:0] select_ln272_4_fu_489_p3;
wire   [0:0] icmp_ln272_fu_497_p2;
wire   [7:0] trunc_ln217_fu_532_p1;
wire   [7:0] empty_fu_541_p2;
wire   [6:0] lshr_ln1_fu_546_p4;
wire   [7:0] add_ln260_fu_562_p2;
wire   [6:0] lshr_ln260_1_fu_567_p4;
wire   [7:0] add_ln260_1_fu_601_p2;
wire   [6:0] lshr_ln260_2_fu_606_p4;
wire   [7:0] add_ln260_2_fu_622_p2;
wire   [6:0] lshr_ln260_3_fu_627_p4;
wire   [7:0] sub_ln289_fu_681_p2;
wire   [6:0] lshr_ln2_fu_685_p4;
wire   [5:0] grp_fu_448_p2;
wire   [5:0] trunc_ln266_2_fu_700_p1;
wire   [0:0] icmp_ln266_fu_704_p2;
wire   [7:0] xor_ln217_fu_715_p2;
wire   [31:0] rconIteration_2_fu_710_p2;
wire   [7:0] select_ln272_3_fu_779_p3;
wire   [7:0] add_ln290_fu_809_p2;
wire   [6:0] lshr_ln289_2_fu_819_p4;
wire   [0:0] tmp_4_fu_847_p3;
wire   [7:0] tmp_4_fu_847_p4;
wire   [7:0] add_ln290_1_fu_869_p2;
wire   [7:0] sub_ln289_2_fu_874_p2;
wire   [6:0] lshr_ln289_4_fu_879_p4;
wire   [7:0] add_ln290_2_fu_916_p2;
wire   [6:0] lshr_ln289_6_fu_926_p4;
wire   [0:0] tmp_6_fu_954_p3;
wire   [7:0] tmp_6_fu_954_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage8;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [11:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
reg    ap_done_pending_pp0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

aes_expandKey_Pipeline_expandKeyLoop2_sbox_ROM_2P_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(sbox_address1),
    .ce1(sbox_ce1),
    .q1(sbox_q1)
);

aes_expandKey_Pipeline_expandKeyLoop2_Rcon_ROM_2P_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 255 ),
    .AddressWidth( 8 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

aes_srem_32ns_7ns_6_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 6 ))
srem_32ns_7ns_6_36_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_448_p0),
    .din1(grp_fu_448_p1),
    .ce(1'b1),
    .dout(grp_fu_448_p2)
);

aes_mux_21_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 8 ))
mux_21_8_1_1_U36(
    .din0(expandedKey_0_q1),
    .din1(expandedKey_1_q1),
    .din2(trunc_ln233_reg_1017_pp0_iter2_reg),
    .dout(num_assign_3_fu_583_p4)
);

aes_mux_21_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 8 ))
mux_21_8_1_1_U37(
    .din0(expandedKey_1_q0),
    .din1(expandedKey_0_q0),
    .din2(trunc_ln233_reg_1017_pp0_iter2_reg),
    .dout(num_assign_fu_592_p4)
);

aes_mux_21_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 8 ))
mux_21_8_1_1_U38(
    .din0(expandedKey_0_q0),
    .din1(expandedKey_1_q0),
    .din2(trunc_ln233_reg_1017_pp0_iter2_reg),
    .dout(num_assign_1_fu_653_p4)
);

aes_mux_21_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 8 ))
mux_21_8_1_1_U39(
    .din0(expandedKey_1_q1),
    .din1(expandedKey_0_q1),
    .din2(trunc_ln233_reg_1017_pp0_iter2_reg),
    .dout(num_assign_2_fu_662_p4)
);

aes_mux_21_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 8 ))
mux_21_8_1_1_U40(
    .din0(8'd0),
    .din1(expandedKey_1_q0),
    .din2(tmp_4_fu_847_p3),
    .dout(tmp_4_fu_847_p4)
);

aes_mux_21_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 8 ))
mux_21_8_1_1_U41(
    .din0(8'd0),
    .din1(expandedKey_1_q0),
    .din2(tmp_6_fu_954_p3),
    .dout(tmp_6_fu_954_p4)
);

aes_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage11),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage11)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage11_subdone) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage11_subdone) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage11_subdone) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage8))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage8))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        currentSize_fu_100 <= zext_ln241_cast_fu_410_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln249_fu_427_p2 == 1'd1))) begin
        currentSize_fu_100 <= add_ln290_3_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rconIteration_1_fu_96 <= 32'd1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        rconIteration_1_fu_96 <= rconIteration_reg_1190;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        Rcon_load_reg_1066 <= Rcon_q0;
        lshr_ln289_3_reg_1245 <= {{add_ln290_fu_809_p2[7:1]}};
        select_ln272_1_reg_1230 <= select_ln272_1_fu_803_p3;
        select_ln272_reg_1225 <= select_ln272_fu_797_p3;
        sub_ln289_1_reg_1235 <= sub_ln289_1_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln249_fu_427_p2 == 1'd1))) begin
        and_ln272_reg_1042 <= and_ln272_fu_503_p2;
        lshr_ln289_1_reg_1050 <= {{currentSize_fu_100[7:1]}};
        trunc_ln233_1_reg_1025 <= trunc_ln233_1_fu_436_p1;
        trunc_ln233_reg_1017 <= trunc_ln233_fu_432_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        and_ln272_reg_1042_pp0_iter1_reg <= and_ln272_reg_1042;
        and_ln272_reg_1042_pp0_iter2_reg <= and_ln272_reg_1042_pp0_iter1_reg;
        and_ln272_reg_1042_pp0_iter3_reg <= and_ln272_reg_1042_pp0_iter2_reg;
        icmp_ln249_reg_1013 <= icmp_ln249_fu_427_p2;
        icmp_ln249_reg_1013_pp0_iter1_reg <= icmp_ln249_reg_1013;
        icmp_ln249_reg_1013_pp0_iter2_reg <= icmp_ln249_reg_1013_pp0_iter1_reg;
        lshr_ln289_1_reg_1050_pp0_iter1_reg <= lshr_ln289_1_reg_1050;
        lshr_ln289_1_reg_1050_pp0_iter2_reg <= lshr_ln289_1_reg_1050_pp0_iter1_reg;
        lshr_ln289_1_reg_1050_pp0_iter3_reg <= lshr_ln289_1_reg_1050_pp0_iter2_reg;
        trunc_ln233_1_reg_1025_pp0_iter1_reg <= trunc_ln233_1_reg_1025;
        trunc_ln233_1_reg_1025_pp0_iter2_reg <= trunc_ln233_1_reg_1025_pp0_iter1_reg;
        trunc_ln233_1_reg_1025_pp0_iter3_reg <= trunc_ln233_1_reg_1025_pp0_iter2_reg;
        trunc_ln233_reg_1017_pp0_iter1_reg <= trunc_ln233_reg_1017;
        trunc_ln233_reg_1017_pp0_iter2_reg <= trunc_ln233_reg_1017_pp0_iter1_reg;
        trunc_ln233_reg_1017_pp0_iter3_reg <= trunc_ln233_reg_1017_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        expandedKeySize_cast_cast_reg_1008[7 : 0] <= expandedKeySize_cast_cast_fu_406_p1[7 : 0];
        rconIteration_reg_1190 <= rconIteration_fu_746_p3;
        select_ln266_1_reg_1172 <= select_ln266_1_fu_725_p3;
        select_ln266_2_reg_1178 <= select_ln266_2_fu_732_p3;
        select_ln266_3_reg_1184 <= select_ln266_3_fu_739_p3;
        select_ln266_reg_1166 <= select_ln266_fu_719_p3;
        size_cast7_cast_reg_995[5 : 0] <= size_cast7_cast_fu_398_p1[5 : 0];
        zext_ln241_1_cast_reg_1000[5 : 0] <= zext_ln241_1_cast_fu_402_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        expandedKey_0_load_4_reg_1195 <= expandedKey_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        lshr_ln289_5_reg_1255 <= {{add_ln290_1_fu_869_p2[7:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        lshr_ln289_7_reg_1270 <= {{add_ln290_2_fu_916_p2[7:1]}};
        sub_ln289_3_reg_1260 <= sub_ln289_3_fu_921_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        num_assign_1_reg_1131 <= num_assign_1_fu_653_p4;
        num_assign_2_reg_1136 <= num_assign_2_fu_662_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        num_assign_3_reg_1091 <= num_assign_3_fu_583_p4;
        num_assign_reg_1096 <= num_assign_fu_592_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        rconIteration_1_load_reg_1055 <= rconIteration_1_fu_96;
        select_ln272_2_reg_1220 <= select_ln272_2_fu_773_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        sbox_load_3_reg_1156 <= sbox_q0;
        sbox_load_reg_1141 <= sbox_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln249_reg_1013 == 1'd0) & (1'b0 == ap_block_pp0_stage11_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        ap_condition_exit_pp0_iter0_stage11 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln249_reg_1013_pp0_iter2_reg == 1'd0))) begin
        ap_condition_exit_pp0_iter2_stage8 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage11_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        expandedKey_0_address0 = zext_ln289_7_fu_971_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        expandedKey_0_address0 = zext_ln289_5_fu_911_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        expandedKey_0_address0 = zext_ln289_4_fu_889_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        expandedKey_0_address0 = zext_ln289_3_fu_864_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        expandedKey_0_address0 = zext_ln289_1_fu_792_p1;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        expandedKey_0_address0 = zext_ln260_2_fu_616_p1;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        expandedKey_0_address0 = zext_ln260_1_fu_577_p1;
    end else begin
        expandedKey_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            expandedKey_0_address1 = zext_ln289_fu_695_p1;
        end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            expandedKey_0_address1 = zext_ln260_3_fu_637_p1;
        end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            expandedKey_0_address1 = zext_ln260_fu_556_p1;
        end else begin
            expandedKey_0_address1 = 'bx;
        end
    end else begin
        expandedKey_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        expandedKey_0_ce0 = 1'b1;
    end else begin
        expandedKey_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        expandedKey_0_ce1 = 1'b1;
    end else begin
        expandedKey_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            expandedKey_0_d0 = xor_ln289_3_fu_964_p2;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            expandedKey_0_d0 = xor_ln289_2_fu_904_p2;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            expandedKey_0_d0 = xor_ln289_1_fu_857_p2;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            expandedKey_0_d0 = xor_ln289_fu_785_p2;
        end else begin
            expandedKey_0_d0 = 'bx;
        end
    end else begin
        expandedKey_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (trunc_ln233_reg_1017_pp0_iter3_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (trunc_ln233_reg_1017_pp0_iter3_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (trunc_ln233_reg_1017_pp0_iter3_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln233_reg_1017_pp0_iter3_reg == 1'd0)))) begin
        expandedKey_0_we0 = 1'b1;
    end else begin
        expandedKey_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        expandedKey_1_address0 = zext_ln289_7_fu_971_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        expandedKey_1_address0 = zext_ln289_6_fu_936_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        expandedKey_1_address0 = zext_ln289_5_fu_911_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        expandedKey_1_address0 = zext_ln289_3_fu_864_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        expandedKey_1_address0 = zext_ln289_2_fu_829_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        expandedKey_1_address0 = zext_ln289_1_fu_792_p1;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        expandedKey_1_address0 = zext_ln260_2_fu_616_p1;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        expandedKey_1_address0 = zext_ln260_1_fu_577_p1;
    end else begin
        expandedKey_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            expandedKey_1_address1 = zext_ln260_3_fu_637_p1;
        end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            expandedKey_1_address1 = zext_ln260_fu_556_p1;
        end else begin
            expandedKey_1_address1 = 'bx;
        end
    end else begin
        expandedKey_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        expandedKey_1_ce0 = 1'b1;
    end else begin
        expandedKey_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        expandedKey_1_ce1 = 1'b1;
    end else begin
        expandedKey_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            expandedKey_1_d0 = xor_ln289_3_fu_964_p2;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            expandedKey_1_d0 = xor_ln289_2_fu_904_p2;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            expandedKey_1_d0 = xor_ln289_1_fu_857_p2;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            expandedKey_1_d0 = xor_ln289_fu_785_p2;
        end else begin
            expandedKey_1_d0 = 'bx;
        end
    end else begin
        expandedKey_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (trunc_ln233_reg_1017_pp0_iter3_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (trunc_ln233_reg_1017_pp0_iter3_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (trunc_ln233_reg_1017_pp0_iter3_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln233_reg_1017_pp0_iter3_reg == 1'd1)))) begin
        expandedKey_1_we0 = 1'b1;
    end else begin
        expandedKey_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sbox_address0 = zext_ln139_7_fu_769_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sbox_address0 = zext_ln139_5_fu_757_p1;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        sbox_address0 = zext_ln139_2_fu_676_p1;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        sbox_address0 = zext_ln139_3_fu_648_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sbox_address1 = zext_ln139_6_fu_765_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sbox_address1 = zext_ln139_4_fu_753_p1;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        sbox_address1 = zext_ln139_1_fu_671_p1;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        sbox_address1 = zext_ln139_fu_643_p1;
    end else begin
        sbox_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        sbox_ce1 = 1'b1;
    end else begin
        sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage8))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon_address0 = zext_ln198_fu_536_p1;

assign add_ln260_1_fu_601_p2 = ($signed(trunc_ln233_1_reg_1025_pp0_iter2_reg) + $signed(8'd254));

assign add_ln260_2_fu_622_p2 = ($signed(trunc_ln233_1_reg_1025_pp0_iter2_reg) + $signed(8'd255));

assign add_ln260_fu_562_p2 = ($signed(trunc_ln233_1_reg_1025_pp0_iter2_reg) + $signed(8'd253));

assign add_ln290_1_fu_869_p2 = (trunc_ln233_1_reg_1025_pp0_iter3_reg + 8'd2);

assign add_ln290_2_fu_916_p2 = (trunc_ln233_1_reg_1025_pp0_iter3_reg + 8'd3);

assign add_ln290_3_fu_518_p2 = (currentSize_fu_100 + 64'd4);

assign add_ln290_fu_809_p2 = (trunc_ln233_1_reg_1025_pp0_iter3_reg + 8'd1);

assign and_ln272_fu_503_p2 = (icmp_ln272_fu_497_p2 & cmp17);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage10_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage11_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage7_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage8_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage11;

assign empty_fu_541_p2 = ($signed(trunc_ln233_1_reg_1025_pp0_iter2_reg) + $signed(8'd252));

assign expandedKeySize_cast_cast_fu_406_p1 = expandedKeySize_cast;

assign grp_fu_448_p0 = currentSize_fu_100[31:0];

assign grp_fu_448_p1 = size_cast7_cast_reg_995;

assign icmp_ln249_fu_427_p2 = ((currentSize_fu_100 < expandedKeySize_cast_cast_reg_1008) ? 1'b1 : 1'b0);

assign icmp_ln266_fu_704_p2 = ((trunc_ln266_2_fu_700_p1 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln272_fu_497_p2 = ((select_ln272_4_fu_489_p3 == 6'd16) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_546_p4 = {{empty_fu_541_p2[7:1]}};

assign lshr_ln260_1_fu_567_p4 = {{add_ln260_fu_562_p2[7:1]}};

assign lshr_ln260_2_fu_606_p4 = {{add_ln260_1_fu_601_p2[7:1]}};

assign lshr_ln260_3_fu_627_p4 = {{add_ln260_2_fu_622_p2[7:1]}};

assign lshr_ln289_2_fu_819_p4 = {{sub_ln289_1_fu_814_p2[7:1]}};

assign lshr_ln289_4_fu_879_p4 = {{sub_ln289_2_fu_874_p2[7:1]}};

assign lshr_ln289_6_fu_926_p4 = {{sub_ln289_3_fu_921_p2[7:1]}};

assign lshr_ln2_fu_685_p4 = {{sub_ln289_fu_681_p2[7:1]}};

assign p_and_t_fu_467_p3 = {{1'd0}, {sub_ln272_fu_461_p2}};

assign rconIteration_2_fu_710_p2 = (rconIteration_1_load_reg_1055 + 32'd1);

assign rconIteration_fu_746_p3 = ((icmp_ln266_fu_704_p2[0:0] == 1'b1) ? rconIteration_2_fu_710_p2 : rconIteration_1_load_reg_1055);

assign select_ln266_1_fu_725_p3 = ((icmp_ln266_fu_704_p2[0:0] == 1'b1) ? sbox_q0 : num_assign_1_reg_1131);

assign select_ln266_2_fu_732_p3 = ((icmp_ln266_fu_704_p2[0:0] == 1'b1) ? sbox_q1 : num_assign_reg_1096);

assign select_ln266_3_fu_739_p3 = ((icmp_ln266_fu_704_p2[0:0] == 1'b1) ? xor_ln217_fu_715_p2 : num_assign_3_reg_1091);

assign select_ln266_fu_719_p3 = ((icmp_ln266_fu_704_p2[0:0] == 1'b1) ? sbox_load_3_reg_1156 : num_assign_2_reg_1136);

assign select_ln272_1_fu_803_p3 = ((and_ln272_reg_1042_pp0_iter3_reg[0:0] == 1'b1) ? sbox_q1 : select_ln266_1_reg_1172);

assign select_ln272_2_fu_773_p3 = ((and_ln272_reg_1042_pp0_iter3_reg[0:0] == 1'b1) ? sbox_q0 : select_ln266_2_reg_1178);

assign select_ln272_3_fu_779_p3 = ((and_ln272_reg_1042_pp0_iter3_reg[0:0] == 1'b1) ? sbox_q1 : select_ln266_3_reg_1184);

assign select_ln272_4_fu_489_p3 = ((tmp_fu_453_p3[0:0] == 1'b1) ? sub_ln272_1_fu_475_p2 : tmp_7_fu_481_p3);

assign select_ln272_fu_797_p3 = ((and_ln272_reg_1042_pp0_iter3_reg[0:0] == 1'b1) ? sbox_q0 : select_ln266_reg_1166);

assign size_cast7_cast_fu_398_p1 = size_cast7;

assign sub_ln272_1_fu_475_p2 = (6'd0 - p_and_t_fu_467_p3);

assign sub_ln272_fu_461_p2 = (5'd0 - trunc_ln266_1_fu_444_p1);

assign sub_ln289_1_fu_814_p2 = (add_ln290_fu_809_p2 - zext_ln241_1_cast_reg_1000);

assign sub_ln289_2_fu_874_p2 = (add_ln290_1_fu_869_p2 - zext_ln241_1_cast_reg_1000);

assign sub_ln289_3_fu_921_p2 = (add_ln290_2_fu_916_p2 - zext_ln241_1_cast_reg_1000);

assign sub_ln289_fu_681_p2 = (trunc_ln233_1_reg_1025_pp0_iter2_reg - zext_ln241_1_cast_reg_1000);

assign tmp_4_fu_847_p3 = sub_ln289_1_reg_1235[0:0];

assign tmp_6_fu_954_p3 = sub_ln289_3_reg_1260[0:0];

assign tmp_7_fu_481_p3 = {{1'd0}, {trunc_ln266_1_fu_444_p1}};

assign tmp_fu_453_p3 = currentSize_fu_100[32'd31];

assign trunc_ln217_fu_532_p1 = rconIteration_1_fu_96[7:0];

assign trunc_ln233_1_fu_436_p1 = currentSize_fu_100[7:0];

assign trunc_ln233_fu_432_p1 = currentSize_fu_100[0:0];

assign trunc_ln266_1_fu_444_p1 = currentSize_fu_100[4:0];

assign trunc_ln266_2_fu_700_p1 = grp_fu_448_p2[5:0];

assign xor_ln217_fu_715_p2 = (sbox_load_reg_1141 ^ Rcon_load_reg_1066);

assign xor_ln289_1_fu_857_p2 = (tmp_4_fu_847_p4 ^ select_ln272_2_reg_1220);

assign xor_ln289_2_fu_904_p2 = (select_ln272_1_reg_1230 ^ expandedKey_0_q0);

assign xor_ln289_3_fu_964_p2 = (tmp_6_fu_954_p4 ^ select_ln272_reg_1225);

assign xor_ln289_fu_785_p2 = (select_ln272_3_fu_779_p3 ^ expandedKey_0_load_4_reg_1195);

assign zext_ln139_1_fu_671_p1 = num_assign_1_fu_653_p4;

assign zext_ln139_2_fu_676_p1 = num_assign_2_fu_662_p4;

assign zext_ln139_3_fu_648_p1 = num_assign_3_fu_583_p4;

assign zext_ln139_4_fu_753_p1 = select_ln266_3_reg_1184;

assign zext_ln139_5_fu_757_p1 = select_ln266_2_reg_1178;

assign zext_ln139_6_fu_765_p1 = select_ln266_1_reg_1172;

assign zext_ln139_7_fu_769_p1 = select_ln266_reg_1166;

assign zext_ln139_fu_643_p1 = num_assign_fu_592_p4;

assign zext_ln198_fu_536_p1 = trunc_ln217_fu_532_p1;

assign zext_ln241_1_cast_fu_402_p1 = zext_ln241_1;

assign zext_ln241_cast_fu_410_p1 = zext_ln241;

assign zext_ln260_1_fu_577_p1 = lshr_ln260_1_fu_567_p4;

assign zext_ln260_2_fu_616_p1 = lshr_ln260_2_fu_606_p4;

assign zext_ln260_3_fu_637_p1 = lshr_ln260_3_fu_627_p4;

assign zext_ln260_fu_556_p1 = lshr_ln1_fu_546_p4;

assign zext_ln289_1_fu_792_p1 = lshr_ln289_1_reg_1050_pp0_iter3_reg;

assign zext_ln289_2_fu_829_p1 = lshr_ln289_2_fu_819_p4;

assign zext_ln289_3_fu_864_p1 = lshr_ln289_3_reg_1245;

assign zext_ln289_4_fu_889_p1 = lshr_ln289_4_fu_879_p4;

assign zext_ln289_5_fu_911_p1 = lshr_ln289_5_reg_1255;

assign zext_ln289_6_fu_936_p1 = lshr_ln289_6_fu_926_p4;

assign zext_ln289_7_fu_971_p1 = lshr_ln289_7_reg_1270;

assign zext_ln289_fu_695_p1 = lshr_ln2_fu_685_p4;

always @ (posedge ap_clk) begin
    size_cast7_cast_reg_995[31:6] <= 26'b00000000000000000000000000;
    zext_ln241_1_cast_reg_1000[7:6] <= 2'b00;
    expandedKeySize_cast_cast_reg_1008[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //aes_expandKey_Pipeline_expandKeyLoop2
