// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_aes_invRound (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        roundKey_address0,
        roundKey_ce0,
        roundKey_q0,
        roundKey_address1,
        roundKey_ce1,
        roundKey_q1
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_state17 = 37'd65536;
parameter    ap_ST_fsm_state18 = 37'd131072;
parameter    ap_ST_fsm_state19 = 37'd262144;
parameter    ap_ST_fsm_state20 = 37'd524288;
parameter    ap_ST_fsm_state21 = 37'd1048576;
parameter    ap_ST_fsm_state22 = 37'd2097152;
parameter    ap_ST_fsm_state23 = 37'd4194304;
parameter    ap_ST_fsm_state24 = 37'd8388608;
parameter    ap_ST_fsm_state25 = 37'd16777216;
parameter    ap_ST_fsm_state26 = 37'd33554432;
parameter    ap_ST_fsm_state27 = 37'd67108864;
parameter    ap_ST_fsm_state28 = 37'd134217728;
parameter    ap_ST_fsm_state29 = 37'd268435456;
parameter    ap_ST_fsm_state30 = 37'd536870912;
parameter    ap_ST_fsm_state31 = 37'd1073741824;
parameter    ap_ST_fsm_state32 = 37'd2147483648;
parameter    ap_ST_fsm_state33 = 37'd4294967296;
parameter    ap_ST_fsm_state34 = 37'd8589934592;
parameter    ap_ST_fsm_state35 = 37'd17179869184;
parameter    ap_ST_fsm_state36 = 37'd34359738368;
parameter    ap_ST_fsm_state37 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [3:0] roundKey_address0;
output   roundKey_ce0;
input  [7:0] roundKey_q0;
output  [3:0] roundKey_address1;
output   roundKey_ce1;
input  [7:0] roundKey_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;
reg[3:0] roundKey_address0;
reg roundKey_ce0;
reg[3:0] roundKey_address1;
reg roundKey_ce1;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] rsbox_address0;
reg    rsbox_ce0;
wire   [7:0] rsbox_q0;
reg   [7:0] rsbox_address1;
reg    rsbox_ce1;
wire   [7:0] rsbox_q1;
reg   [7:0] reg_519;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [7:0] reg_524;
wire   [7:0] grp_galois_multiplication_fu_499_ap_return;
reg   [7:0] reg_528;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state35;
wire   [7:0] grp_galois_multiplication_fu_506_ap_return;
reg   [7:0] reg_532;
wire   [7:0] grp_fu_536_p2;
reg   [7:0] reg_554;
wire   [3:0] state_addr_32_reg_963;
wire   [3:0] state_addr_31_reg_979;
wire    ap_CS_fsm_state2;
wire   [3:0] state_addr_34_reg_984;
reg   [7:0] roundKey_load_reg_999;
reg   [7:0] roundKey_load_16_reg_1004;
wire   [3:0] state_addr_37_reg_1025;
reg   [7:0] roundKey_load_17_reg_1040;
reg   [7:0] roundKey_load_18_reg_1045;
wire   [3:0] state_addr_35_reg_1060;
wire   [7:0] cpy_20_fu_590_p2;
reg   [7:0] cpy_20_reg_1081;
wire   [3:0] state_addr_40_reg_1097;
reg   [7:0] cpy_24_reg_1118;
wire   [7:0] grp_fu_542_p2;
reg   [7:0] cpy_28_reg_1124;
wire   [3:0] state_addr_42_reg_1146;
reg   [7:0] cpy_21_reg_1161;
reg   [7:0] tmp_54_reg_1177;
reg   [7:0] tmp_59_reg_1182;
wire   [3:0] state_addr_reg_1187;
wire   [3:0] state_addr_43_reg_1192;
reg   [7:0] cpy_25_reg_1207;
reg   [7:0] cpy_29_reg_1213;
reg   [7:0] tmp_47_reg_1229;
reg   [7:0] tmp_52_reg_1234;
wire   [3:0] state_addr_45_reg_1255;
wire   [7:0] cpy_18_fu_636_p2;
reg   [7:0] cpy_18_reg_1260;
wire   [7:0] grp_fu_548_p2;
reg   [7:0] cpy_22_reg_1266;
reg   [7:0] tmp_53_reg_1282;
reg   [7:0] tmp_58_reg_1287;
wire    ap_CS_fsm_state9;
wire   [7:0] cpy_fu_652_p2;
reg   [7:0] cpy_reg_1302;
wire   [7:0] cpy_19_fu_657_p2;
reg   [7:0] cpy_19_reg_1308;
wire   [7:0] cpy_26_fu_662_p2;
reg   [7:0] cpy_26_reg_1314;
reg   [7:0] cpy_30_reg_1320;
reg   [7:0] tmp_s_reg_1326;
reg   [7:0] tmp_51_reg_1331;
wire   [7:0] cpy_23_fu_668_p2;
reg   [7:0] cpy_23_reg_1336;
wire    ap_CS_fsm_state10;
wire   [7:0] cpy_27_fu_673_p2;
reg   [7:0] cpy_27_reg_1342;
wire   [7:0] xor_ln628_fu_688_p2;
reg   [7:0] xor_ln628_reg_1348;
wire   [7:0] xor_ln632_fu_704_p2;
reg   [7:0] xor_ln632_reg_1353;
wire   [7:0] xor_ln636_fu_720_p2;
reg   [7:0] xor_ln636_reg_1358;
wire    ap_CS_fsm_state11;
wire   [7:0] xor_ln640_fu_736_p2;
reg   [7:0] xor_ln640_reg_1363;
wire    ap_CS_fsm_state12;
wire   [7:0] xor_ln628_1_fu_754_p2;
reg   [7:0] xor_ln628_1_reg_1368;
wire    ap_CS_fsm_state14;
wire   [7:0] xor_ln632_1_fu_772_p2;
reg   [7:0] xor_ln632_1_reg_1373;
wire    ap_CS_fsm_state16;
wire   [7:0] xor_ln636_1_fu_790_p2;
reg   [7:0] xor_ln636_1_reg_1378;
wire    ap_CS_fsm_state18;
wire   [7:0] xor_ln640_1_fu_808_p2;
reg   [7:0] xor_ln640_1_reg_1383;
wire    ap_CS_fsm_state20;
wire   [7:0] xor_ln628_2_fu_826_p2;
reg   [7:0] xor_ln628_2_reg_1388;
wire    ap_CS_fsm_state22;
wire   [7:0] xor_ln632_2_fu_844_p2;
reg   [7:0] xor_ln632_2_reg_1393;
wire    ap_CS_fsm_state24;
wire   [7:0] xor_ln636_2_fu_862_p2;
reg   [7:0] xor_ln636_2_reg_1398;
wire    ap_CS_fsm_state26;
wire   [7:0] xor_ln640_2_fu_880_p2;
reg   [7:0] xor_ln640_2_reg_1403;
wire    ap_CS_fsm_state28;
wire   [7:0] xor_ln628_3_fu_898_p2;
reg   [7:0] xor_ln628_3_reg_1408;
wire    ap_CS_fsm_state30;
wire   [7:0] xor_ln632_3_fu_916_p2;
reg   [7:0] xor_ln632_3_reg_1413;
wire    ap_CS_fsm_state32;
wire   [7:0] xor_ln636_3_fu_934_p2;
reg   [7:0] xor_ln636_3_reg_1418;
wire    ap_CS_fsm_state34;
wire   [7:0] xor_ln640_3_fu_952_p2;
reg   [7:0] xor_ln640_3_reg_1423;
wire    ap_CS_fsm_state36;
wire    grp_galois_multiplication_fu_499_ap_ready;
reg   [7:0] grp_galois_multiplication_fu_499_a;
reg   [3:0] grp_galois_multiplication_fu_499_b;
wire    grp_galois_multiplication_fu_506_ap_ready;
reg   [7:0] grp_galois_multiplication_fu_506_a;
reg   [3:0] grp_galois_multiplication_fu_506_b;
wire   [63:0] zext_ln148_4_fu_560_p1;
wire   [63:0] zext_ln148_7_fu_565_p1;
wire   [63:0] zext_ln148_5_fu_570_p1;
wire   [63:0] zext_ln148_6_fu_575_p1;
wire   [63:0] zext_ln148_8_fu_580_p1;
wire   [63:0] zext_ln148_9_fu_585_p1;
wire   [63:0] zext_ln148_10_fu_596_p1;
wire   [63:0] zext_ln148_11_fu_601_p1;
wire   [63:0] zext_ln148_13_fu_606_p1;
wire   [63:0] zext_ln148_14_fu_611_p1;
wire   [63:0] zext_ln148_12_fu_616_p1;
wire   [63:0] zext_ln148_15_fu_621_p1;
wire   [63:0] zext_ln148_fu_626_p1;
wire   [63:0] zext_ln148_1_fu_631_p1;
wire   [63:0] zext_ln148_2_fu_642_p1;
wire   [63:0] zext_ln148_3_fu_647_p1;
wire    ap_CS_fsm_state37;
wire   [7:0] xor_ln628_5_fu_683_p2;
wire   [7:0] xor_ln628_4_fu_678_p2;
wire   [7:0] xor_ln632_5_fu_700_p2;
wire   [7:0] xor_ln632_4_fu_694_p2;
wire   [7:0] xor_ln636_5_fu_714_p2;
wire   [7:0] xor_ln636_4_fu_710_p2;
wire   [7:0] xor_ln640_5_fu_731_p2;
wire   [7:0] xor_ln640_4_fu_726_p2;
wire   [7:0] xor_ln628_7_fu_748_p2;
wire   [7:0] xor_ln628_6_fu_742_p2;
wire   [7:0] xor_ln632_7_fu_766_p2;
wire   [7:0] xor_ln632_6_fu_760_p2;
wire   [7:0] xor_ln636_7_fu_784_p2;
wire   [7:0] xor_ln636_6_fu_778_p2;
wire   [7:0] xor_ln640_7_fu_802_p2;
wire   [7:0] xor_ln640_6_fu_796_p2;
wire   [7:0] xor_ln628_9_fu_820_p2;
wire   [7:0] xor_ln628_8_fu_814_p2;
wire   [7:0] xor_ln632_9_fu_838_p2;
wire   [7:0] xor_ln632_8_fu_832_p2;
wire   [7:0] xor_ln636_9_fu_856_p2;
wire   [7:0] xor_ln636_8_fu_850_p2;
wire   [7:0] xor_ln640_9_fu_874_p2;
wire   [7:0] xor_ln640_8_fu_868_p2;
wire   [7:0] xor_ln628_11_fu_892_p2;
wire   [7:0] xor_ln628_10_fu_886_p2;
wire   [7:0] xor_ln632_11_fu_910_p2;
wire   [7:0] xor_ln632_10_fu_904_p2;
wire   [7:0] xor_ln636_11_fu_928_p2;
wire   [7:0] xor_ln636_10_fu_922_p2;
wire   [7:0] xor_ln640_11_fu_946_p2;
wire   [7:0] xor_ln640_10_fu_940_p2;
reg   [36:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
end

aes_aes_invRound_rsbox_ROM_2P_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
rsbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rsbox_address0),
    .ce0(rsbox_ce0),
    .q0(rsbox_q0),
    .address1(rsbox_address1),
    .ce1(rsbox_ce1),
    .q1(rsbox_q1)
);

aes_galois_multiplication grp_galois_multiplication_fu_499(
    .ap_ready(grp_galois_multiplication_fu_499_ap_ready),
    .a(grp_galois_multiplication_fu_499_a),
    .b(grp_galois_multiplication_fu_499_b),
    .ap_return(grp_galois_multiplication_fu_499_ap_return)
);

aes_galois_multiplication grp_galois_multiplication_fu_506(
    .ap_ready(grp_galois_multiplication_fu_506_ap_ready),
    .a(grp_galois_multiplication_fu_506_a),
    .b(grp_galois_multiplication_fu_506_b),
    .ap_return(grp_galois_multiplication_fu_506_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_519 <= rsbox_q0;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_519 <= rsbox_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cpy_18_reg_1260 <= cpy_18_fu_636_p2;
        cpy_22_reg_1266 <= grp_fu_548_p2;
        tmp_53_reg_1282 <= grp_galois_multiplication_fu_499_ap_return;
        tmp_58_reg_1287 <= grp_galois_multiplication_fu_506_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cpy_19_reg_1308 <= cpy_19_fu_657_p2;
        cpy_26_reg_1314 <= cpy_26_fu_662_p2;
        cpy_30_reg_1320 <= grp_fu_548_p2;
        cpy_reg_1302 <= cpy_fu_652_p2;
        tmp_51_reg_1331 <= grp_galois_multiplication_fu_506_ap_return;
        tmp_s_reg_1326 <= grp_galois_multiplication_fu_499_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cpy_20_reg_1081 <= cpy_20_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cpy_21_reg_1161 <= grp_fu_542_p2;
        tmp_54_reg_1177 <= grp_galois_multiplication_fu_499_ap_return;
        tmp_59_reg_1182 <= grp_galois_multiplication_fu_506_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        cpy_23_reg_1336 <= cpy_23_fu_668_p2;
        cpy_27_reg_1342 <= cpy_27_fu_673_p2;
        xor_ln628_reg_1348 <= xor_ln628_fu_688_p2;
        xor_ln632_reg_1353 <= xor_ln632_fu_704_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cpy_24_reg_1118 <= grp_fu_536_p2;
        cpy_28_reg_1124 <= grp_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cpy_25_reg_1207 <= grp_fu_536_p2;
        cpy_29_reg_1213 <= grp_fu_542_p2;
        tmp_47_reg_1229 <= grp_galois_multiplication_fu_499_ap_return;
        tmp_52_reg_1234 <= grp_galois_multiplication_fu_506_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_524 <= rsbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_528 <= grp_galois_multiplication_fu_499_ap_return;
        reg_532 <= grp_galois_multiplication_fu_506_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_554 <= grp_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        roundKey_load_16_reg_1004 <= roundKey_q0;
        roundKey_load_reg_999 <= roundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        roundKey_load_17_reg_1040 <= roundKey_q1;
        roundKey_load_18_reg_1045 <= roundKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        xor_ln628_1_reg_1368 <= xor_ln628_1_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        xor_ln628_2_reg_1388 <= xor_ln628_2_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        xor_ln628_3_reg_1408 <= xor_ln628_3_fu_898_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        xor_ln632_1_reg_1373 <= xor_ln632_1_fu_772_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        xor_ln632_2_reg_1393 <= xor_ln632_2_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        xor_ln632_3_reg_1413 <= xor_ln632_3_fu_916_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        xor_ln636_1_reg_1378 <= xor_ln636_1_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        xor_ln636_2_reg_1398 <= xor_ln636_2_fu_862_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        xor_ln636_3_reg_1418 <= xor_ln636_3_fu_934_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        xor_ln636_reg_1358 <= xor_ln636_fu_720_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        xor_ln640_1_reg_1383 <= xor_ln640_1_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        xor_ln640_2_reg_1403 <= xor_ln640_2_fu_880_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        xor_ln640_3_reg_1423 <= xor_ln640_3_fu_952_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        xor_ln640_reg_1363 <= xor_ln640_fu_736_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state35))) begin
        grp_galois_multiplication_fu_499_a = cpy_30_reg_1320;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state31))) begin
        grp_galois_multiplication_fu_499_a = cpy_28_reg_1124;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_galois_multiplication_fu_499_a = cpy_29_reg_1213;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_galois_multiplication_fu_499_a = cpy_27_reg_1342;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state27))) begin
        grp_galois_multiplication_fu_499_a = cpy_26_reg_1314;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_galois_multiplication_fu_499_a = cpy_24_reg_1118;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_galois_multiplication_fu_499_a = cpy_25_reg_1207;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_galois_multiplication_fu_499_a = cpy_23_reg_1336;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_galois_multiplication_fu_499_a = cpy_22_reg_1266;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_galois_multiplication_fu_499_a = cpy_20_reg_1081;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_galois_multiplication_fu_499_a = cpy_21_reg_1161;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_galois_multiplication_fu_499_a = cpy_19_reg_1308;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_galois_multiplication_fu_499_a = cpy_reg_1302;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_galois_multiplication_fu_499_a = cpy_18_reg_1260;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_galois_multiplication_fu_499_a = reg_554;
    end else begin
        grp_galois_multiplication_fu_499_a = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_galois_multiplication_fu_499_b = 4'd14;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_galois_multiplication_fu_499_b = 4'd13;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_galois_multiplication_fu_499_b = 4'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_galois_multiplication_fu_499_b = 4'd11;
    end else begin
        grp_galois_multiplication_fu_499_b = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state35))) begin
        grp_galois_multiplication_fu_506_a = cpy_29_reg_1213;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state31))) begin
        grp_galois_multiplication_fu_506_a = cpy_27_reg_1342;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_galois_multiplication_fu_506_a = cpy_28_reg_1124;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_galois_multiplication_fu_506_a = cpy_30_reg_1320;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state27))) begin
        grp_galois_multiplication_fu_506_a = cpy_25_reg_1207;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_galois_multiplication_fu_506_a = cpy_23_reg_1336;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_galois_multiplication_fu_506_a = cpy_24_reg_1118;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_galois_multiplication_fu_506_a = cpy_26_reg_1314;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_galois_multiplication_fu_506_a = cpy_21_reg_1161;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_galois_multiplication_fu_506_a = cpy_19_reg_1308;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_galois_multiplication_fu_506_a = cpy_20_reg_1081;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_galois_multiplication_fu_506_a = cpy_22_reg_1266;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_galois_multiplication_fu_506_a = cpy_reg_1302;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_galois_multiplication_fu_506_a = cpy_18_reg_1260;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_galois_multiplication_fu_506_a = reg_554;
    end else begin
        grp_galois_multiplication_fu_506_a = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_galois_multiplication_fu_506_b = 4'd9;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_galois_multiplication_fu_506_b = 4'd11;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_galois_multiplication_fu_506_b = 4'd13;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_galois_multiplication_fu_506_b = 4'd14;
    end else begin
        grp_galois_multiplication_fu_506_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        roundKey_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        roundKey_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        roundKey_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        roundKey_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        roundKey_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        roundKey_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        roundKey_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        roundKey_address0 = 64'd1;
    end else begin
        roundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        roundKey_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        roundKey_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        roundKey_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        roundKey_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        roundKey_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        roundKey_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        roundKey_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        roundKey_address1 = 64'd0;
    end else begin
        roundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        roundKey_ce0 = 1'b1;
    end else begin
        roundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        roundKey_ce1 = 1'b1;
    end else begin
        roundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        rsbox_address0 = zext_ln148_3_fu_647_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        rsbox_address0 = zext_ln148_1_fu_631_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        rsbox_address0 = zext_ln148_15_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rsbox_address0 = zext_ln148_14_fu_611_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rsbox_address0 = zext_ln148_11_fu_601_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rsbox_address0 = zext_ln148_9_fu_585_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rsbox_address0 = zext_ln148_6_fu_575_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rsbox_address0 = zext_ln148_7_fu_565_p1;
    end else begin
        rsbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        rsbox_address1 = zext_ln148_2_fu_642_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        rsbox_address1 = zext_ln148_fu_626_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        rsbox_address1 = zext_ln148_12_fu_616_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rsbox_address1 = zext_ln148_13_fu_606_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rsbox_address1 = zext_ln148_10_fu_596_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rsbox_address1 = zext_ln148_8_fu_580_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rsbox_address1 = zext_ln148_5_fu_570_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rsbox_address1 = zext_ln148_4_fu_560_p1;
    end else begin
        rsbox_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        rsbox_ce0 = 1'b1;
    end else begin
        rsbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        rsbox_ce1 = 1'b1;
    end else begin
        rsbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        state_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        state_address0 = state_addr_45_reg_1255;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        state_address0 = state_addr_37_reg_1025;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address0 = state_addr_43_reg_1192;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address0 = state_addr_35_reg_1060;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = state_addr_31_reg_979;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd6;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        state_address1 = state_addr_40_reg_1097;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        state_address1 = state_addr_32_reg_963;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        state_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        state_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address1 = state_addr_42_reg_1146;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_address1 = state_addr_34_reg_984;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address1 = state_addr_reg_1187;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address1 = 64'd7;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        state_d0 = xor_ln636_3_reg_1418;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        state_d0 = xor_ln628_3_reg_1408;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        state_d0 = xor_ln636_2_reg_1398;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        state_d0 = xor_ln628_2_reg_1388;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_d0 = xor_ln636_1_reg_1378;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d0 = xor_ln628_1_reg_1368;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d0 = xor_ln636_reg_1358;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d0 = xor_ln632_reg_1353;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        state_d1 = xor_ln640_3_reg_1423;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        state_d1 = xor_ln632_3_reg_1413;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        state_d1 = xor_ln640_2_reg_1403;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        state_d1 = xor_ln632_2_reg_1393;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_d1 = xor_ln640_1_reg_1383;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_d1 = xor_ln632_1_reg_1373;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d1 = xor_ln640_reg_1363;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d1 = xor_ln628_reg_1348;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cpy_18_fu_636_p2 = (rsbox_q1 ^ roundKey_q1);

assign cpy_19_fu_657_p2 = (rsbox_q0 ^ roundKey_load_16_reg_1004);

assign cpy_20_fu_590_p2 = (rsbox_q1 ^ roundKey_q0);

assign cpy_23_fu_668_p2 = (rsbox_q1 ^ roundKey_load_17_reg_1040);

assign cpy_26_fu_662_p2 = (roundKey_q1 ^ reg_524);

assign cpy_27_fu_673_p2 = (rsbox_q0 ^ roundKey_load_18_reg_1045);

assign cpy_fu_652_p2 = (rsbox_q1 ^ roundKey_load_reg_999);

assign grp_fu_536_p2 = (roundKey_q1 ^ reg_519);

assign grp_fu_542_p2 = (roundKey_q0 ^ reg_524);

assign grp_fu_548_p2 = (roundKey_q0 ^ reg_519);

assign state_addr_31_reg_979 = 64'd4;

assign state_addr_32_reg_963 = 64'd7;

assign state_addr_34_reg_984 = 64'd5;

assign state_addr_35_reg_1060 = 64'd8;

assign state_addr_37_reg_1025 = 64'd10;

assign state_addr_40_reg_1097 = 64'd15;

assign state_addr_42_reg_1146 = 64'd13;

assign state_addr_43_reg_1192 = 64'd1;

assign state_addr_45_reg_1255 = 64'd3;

assign state_addr_reg_1187 = 64'd0;

assign xor_ln628_10_fu_886_p2 = (reg_532 ^ reg_528);

assign xor_ln628_11_fu_892_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln628_1_fu_754_p2 = (xor_ln628_7_fu_748_p2 ^ xor_ln628_6_fu_742_p2);

assign xor_ln628_2_fu_826_p2 = (xor_ln628_9_fu_820_p2 ^ xor_ln628_8_fu_814_p2);

assign xor_ln628_3_fu_898_p2 = (xor_ln628_11_fu_892_p2 ^ xor_ln628_10_fu_886_p2);

assign xor_ln628_4_fu_678_p2 = (tmp_s_reg_1326 ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln628_5_fu_683_p2 = (tmp_47_reg_1229 ^ reg_528);

assign xor_ln628_6_fu_742_p2 = (reg_532 ^ reg_528);

assign xor_ln628_7_fu_748_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln628_8_fu_814_p2 = (reg_532 ^ reg_528);

assign xor_ln628_9_fu_820_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln628_fu_688_p2 = (xor_ln628_5_fu_683_p2 ^ xor_ln628_4_fu_678_p2);

assign xor_ln632_10_fu_904_p2 = (reg_532 ^ reg_528);

assign xor_ln632_11_fu_910_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln632_1_fu_772_p2 = (xor_ln632_7_fu_766_p2 ^ xor_ln632_6_fu_760_p2);

assign xor_ln632_2_fu_844_p2 = (xor_ln632_9_fu_838_p2 ^ xor_ln632_8_fu_832_p2);

assign xor_ln632_3_fu_916_p2 = (xor_ln632_11_fu_910_p2 ^ xor_ln632_10_fu_904_p2);

assign xor_ln632_4_fu_694_p2 = (reg_532 ^ grp_galois_multiplication_fu_506_ap_return);

assign xor_ln632_5_fu_700_p2 = (tmp_52_reg_1234 ^ tmp_51_reg_1331);

assign xor_ln632_6_fu_760_p2 = (reg_532 ^ reg_528);

assign xor_ln632_7_fu_766_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln632_8_fu_832_p2 = (reg_532 ^ reg_528);

assign xor_ln632_9_fu_838_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln632_fu_704_p2 = (xor_ln632_5_fu_700_p2 ^ xor_ln632_4_fu_694_p2);

assign xor_ln636_10_fu_922_p2 = (reg_532 ^ reg_528);

assign xor_ln636_11_fu_928_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln636_1_fu_790_p2 = (xor_ln636_7_fu_784_p2 ^ xor_ln636_6_fu_778_p2);

assign xor_ln636_2_fu_862_p2 = (xor_ln636_9_fu_856_p2 ^ xor_ln636_8_fu_850_p2);

assign xor_ln636_3_fu_934_p2 = (xor_ln636_11_fu_928_p2 ^ xor_ln636_10_fu_922_p2);

assign xor_ln636_4_fu_710_p2 = (tmp_54_reg_1177 ^ tmp_53_reg_1282);

assign xor_ln636_5_fu_714_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln636_6_fu_778_p2 = (reg_532 ^ reg_528);

assign xor_ln636_7_fu_784_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln636_8_fu_850_p2 = (reg_532 ^ reg_528);

assign xor_ln636_9_fu_856_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln636_fu_720_p2 = (xor_ln636_5_fu_714_p2 ^ xor_ln636_4_fu_710_p2);

assign xor_ln640_10_fu_940_p2 = (reg_532 ^ reg_528);

assign xor_ln640_11_fu_946_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln640_1_fu_808_p2 = (xor_ln640_7_fu_802_p2 ^ xor_ln640_6_fu_796_p2);

assign xor_ln640_2_fu_880_p2 = (xor_ln640_9_fu_874_p2 ^ xor_ln640_8_fu_868_p2);

assign xor_ln640_3_fu_952_p2 = (xor_ln640_11_fu_946_p2 ^ xor_ln640_10_fu_940_p2);

assign xor_ln640_4_fu_726_p2 = (tmp_58_reg_1287 ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln640_5_fu_731_p2 = (tmp_59_reg_1182 ^ grp_galois_multiplication_fu_506_ap_return);

assign xor_ln640_6_fu_796_p2 = (reg_532 ^ reg_528);

assign xor_ln640_7_fu_802_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln640_8_fu_868_p2 = (reg_532 ^ reg_528);

assign xor_ln640_9_fu_874_p2 = (grp_galois_multiplication_fu_506_ap_return ^ grp_galois_multiplication_fu_499_ap_return);

assign xor_ln640_fu_736_p2 = (xor_ln640_5_fu_731_p2 ^ xor_ln640_4_fu_726_p2);

assign zext_ln148_10_fu_596_p1 = state_q0;

assign zext_ln148_11_fu_601_p1 = state_q1;

assign zext_ln148_12_fu_616_p1 = state_q1;

assign zext_ln148_13_fu_606_p1 = state_q0;

assign zext_ln148_14_fu_611_p1 = state_q1;

assign zext_ln148_15_fu_621_p1 = state_q0;

assign zext_ln148_1_fu_631_p1 = state_q0;

assign zext_ln148_2_fu_642_p1 = state_q1;

assign zext_ln148_3_fu_647_p1 = state_q0;

assign zext_ln148_4_fu_560_p1 = state_q1;

assign zext_ln148_5_fu_570_p1 = state_q0;

assign zext_ln148_6_fu_575_p1 = state_q1;

assign zext_ln148_7_fu_565_p1 = state_q0;

assign zext_ln148_8_fu_580_p1 = state_q0;

assign zext_ln148_9_fu_585_p1 = state_q1;

assign zext_ln148_fu_626_p1 = state_q1;

endmodule //aes_aes_invRound
