// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_aes_invMain_Pipeline_createRoundKeyLoop1_createRoundKeyLoop2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        nbrRounds,
        expandedKey_0_address0,
        expandedKey_0_ce0,
        expandedKey_0_q0,
        expandedKey_1_address0,
        expandedKey_1_ce0,
        expandedKey_1_q0,
        roundKey_address0,
        roundKey_ce0,
        roundKey_we0,
        roundKey_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] nbrRounds;
output  [6:0] expandedKey_0_address0;
output   expandedKey_0_ce0;
input  [7:0] expandedKey_0_q0;
output  [6:0] expandedKey_1_address0;
output   expandedKey_1_ce0;
input  [7:0] expandedKey_1_q0;
output  [3:0] roundKey_address0;
output   roundKey_ce0;
output   roundKey_we0;
output  [7:0] roundKey_d0;

reg ap_idle;
reg expandedKey_0_ce0;
reg expandedKey_1_ce0;
reg roundKey_ce0;
reg roundKey_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln436_fu_133_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] trunc_ln442_fu_199_p1;
reg   [0:0] trunc_ln442_reg_312;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln442_3_fu_247_p2;
reg   [3:0] add_ln442_3_reg_327;
wire   [63:0] zext_ln442_fu_229_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln442_11_fu_284_p1;
reg   [2:0] j_fu_58;
wire   [2:0] add_ln440_fu_253_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [2:0] i_fu_62;
wire   [2:0] select_ln436_3_fu_171_p3;
reg   [2:0] ap_sig_allocacmp_i_load;
reg   [4:0] indvar_flatten_fu_66;
wire   [4:0] add_ln436_fu_139_p2;
reg   [4:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [7:0] tmp_fu_274_p4;
wire   [0:0] icmp_ln440_fu_151_p2;
wire   [2:0] add_ln436_3_fu_165_p2;
wire   [1:0] trunc_ln436_fu_183_p1;
wire   [3:0] zext_ln440_mid2_v_fu_187_p3;
wire   [2:0] select_ln436_fu_157_p3;
wire   [7:0] tmp1_fu_203_p4;
wire   [7:0] zext_ln436_2_fu_195_p1;
wire   [7:0] add_ln442_fu_213_p2;
wire   [6:0] lshr_ln_fu_219_p4;
wire   [1:0] trunc_ln442_2_fu_235_p1;
wire   [3:0] shl_ln442_4_fu_239_p3;
wire   [3:0] zext_ln436_fu_179_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

aes_mux_21_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 8 ))
mux_21_8_1_1_U107(
    .din0(expandedKey_0_q0),
    .din1(expandedKey_1_q0),
    .din2(trunc_ln442_reg_312),
    .dout(tmp_fu_274_p4)
);

aes_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln436_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_62 <= select_ln436_3_fu_171_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_62 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln436_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_66 <= add_ln436_fu_139_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_66 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln436_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_58 <= add_ln440_fu_253_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_58 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln436_fu_133_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln442_3_reg_327 <= add_ln442_3_fu_247_p2;
        trunc_ln442_reg_312 <= trunc_ln442_fu_199_p1;
    end
end

always @ (*) begin
    if (((icmp_ln436_fu_133_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 3'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_62;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_66;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        expandedKey_0_ce0 = 1'b1;
    end else begin
        expandedKey_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        expandedKey_1_ce0 = 1'b1;
    end else begin
        expandedKey_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        roundKey_ce0 = 1'b1;
    end else begin
        roundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        roundKey_we0 = 1'b1;
    end else begin
        roundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln436_3_fu_165_p2 = (ap_sig_allocacmp_i_load + 3'd1);

assign add_ln436_fu_139_p2 = (ap_sig_allocacmp_indvar_flatten_load + 5'd1);

assign add_ln440_fu_253_p2 = (select_ln436_fu_157_p3 + 3'd1);

assign add_ln442_3_fu_247_p2 = (shl_ln442_4_fu_239_p3 + zext_ln436_fu_179_p1);

assign add_ln442_fu_213_p2 = (tmp1_fu_203_p4 + zext_ln436_2_fu_195_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign expandedKey_0_address0 = zext_ln442_fu_229_p1;

assign expandedKey_1_address0 = zext_ln442_fu_229_p1;

assign icmp_ln436_fu_133_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln440_fu_151_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign lshr_ln_fu_219_p4 = {{add_ln442_fu_213_p2[7:1]}};

assign roundKey_address0 = zext_ln442_11_fu_284_p1;

assign roundKey_d0 = tmp_fu_274_p4;

assign select_ln436_3_fu_171_p3 = ((icmp_ln440_fu_151_p2[0:0] == 1'b1) ? add_ln436_3_fu_165_p2 : ap_sig_allocacmp_i_load);

assign select_ln436_fu_157_p3 = ((icmp_ln440_fu_151_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign shl_ln442_4_fu_239_p3 = {{trunc_ln442_2_fu_235_p1}, {2'd0}};

assign tmp1_fu_203_p4 = {{{nbrRounds}, {1'd0}}, {select_ln436_fu_157_p3}};

assign trunc_ln436_fu_183_p1 = select_ln436_3_fu_171_p3[1:0];

assign trunc_ln442_2_fu_235_p1 = select_ln436_fu_157_p3[1:0];

assign trunc_ln442_fu_199_p1 = select_ln436_fu_157_p3[0:0];

assign zext_ln436_2_fu_195_p1 = zext_ln440_mid2_v_fu_187_p3;

assign zext_ln436_fu_179_p1 = select_ln436_3_fu_171_p3;

assign zext_ln440_mid2_v_fu_187_p3 = {{trunc_ln436_fu_183_p1}, {2'd0}};

assign zext_ln442_11_fu_284_p1 = add_ln442_3_reg_327;

assign zext_ln442_fu_229_p1 = lshr_ln_fu_219_p4;

endmodule //aes_aes_invMain_Pipeline_createRoundKeyLoop1_createRoundKeyLoop2
