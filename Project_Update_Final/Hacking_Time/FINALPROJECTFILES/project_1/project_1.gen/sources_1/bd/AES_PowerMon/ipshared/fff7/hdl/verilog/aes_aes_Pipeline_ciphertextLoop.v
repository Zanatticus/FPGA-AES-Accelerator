// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_aes_Pipeline_ciphertextLoop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ciphertext_and_decryptedtext_TREADY,
        ciphertext_array_address0,
        ciphertext_array_ce0,
        ciphertext_array_q0,
        tmp_keep_V_reload,
        tmp_strb_V_reload,
        tmp_user_V_reload,
        tmp_id_V_reload,
        tmp_dest_V_reload,
        ciphertext_and_decryptedtext_TDATA,
        ciphertext_and_decryptedtext_TVALID,
        ciphertext_and_decryptedtext_TKEEP,
        ciphertext_and_decryptedtext_TSTRB,
        ciphertext_and_decryptedtext_TUSER,
        ciphertext_and_decryptedtext_TLAST,
        ciphertext_and_decryptedtext_TID,
        ciphertext_and_decryptedtext_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ciphertext_and_decryptedtext_TREADY;
output  [3:0] ciphertext_array_address0;
output   ciphertext_array_ce0;
input  [7:0] ciphertext_array_q0;
input  [0:0] tmp_keep_V_reload;
input  [0:0] tmp_strb_V_reload;
input  [0:0] tmp_user_V_reload;
input  [0:0] tmp_id_V_reload;
input  [0:0] tmp_dest_V_reload;
output  [7:0] ciphertext_and_decryptedtext_TDATA;
output   ciphertext_and_decryptedtext_TVALID;
output  [0:0] ciphertext_and_decryptedtext_TKEEP;
output  [0:0] ciphertext_and_decryptedtext_TSTRB;
output  [0:0] ciphertext_and_decryptedtext_TUSER;
output  [0:0] ciphertext_and_decryptedtext_TLAST;
output  [0:0] ciphertext_and_decryptedtext_TID;
output  [0:0] ciphertext_and_decryptedtext_TDEST;

reg ap_idle;
reg ciphertext_array_ce0;
reg ciphertext_and_decryptedtext_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln87_fu_148_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ciphertext_and_decryptedtext_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] i_22_cast_fu_160_p1;
reg   [4:0] i_fu_66;
wire   [4:0] add_ln87_fu_154_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_14;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

aes_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln87_fu_148_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_66 <= add_ln87_fu_154_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 5'd0;
        end
    end
end

always @ (*) begin
    if (((icmp_ln87_fu_148_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_14 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_14 = i_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ciphertext_and_decryptedtext_TDATA_blk_n = ciphertext_and_decryptedtext_TREADY;
    end else begin
        ciphertext_and_decryptedtext_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ciphertext_and_decryptedtext_TVALID = 1'b1;
    end else begin
        ciphertext_and_decryptedtext_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ciphertext_array_ce0 = 1'b1;
    end else begin
        ciphertext_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln87_fu_154_p2 = (ap_sig_allocacmp_i_14 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ciphertext_and_decryptedtext_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ciphertext_and_decryptedtext_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ciphertext_and_decryptedtext_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (ciphertext_and_decryptedtext_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ciphertext_and_decryptedtext_TDATA = ciphertext_array_q0;

assign ciphertext_and_decryptedtext_TDEST = tmp_dest_V_reload;

assign ciphertext_and_decryptedtext_TID = tmp_id_V_reload;

assign ciphertext_and_decryptedtext_TKEEP = tmp_keep_V_reload;

assign ciphertext_and_decryptedtext_TLAST = 1'd0;

assign ciphertext_and_decryptedtext_TSTRB = tmp_strb_V_reload;

assign ciphertext_and_decryptedtext_TUSER = tmp_user_V_reload;

assign ciphertext_array_address0 = i_22_cast_fu_160_p1;

assign i_22_cast_fu_160_p1 = ap_sig_allocacmp_i_14;

assign icmp_ln87_fu_148_p2 = ((ap_sig_allocacmp_i_14 == 5'd16) ? 1'b1 : 1'b0);

endmodule //aes_aes_Pipeline_ciphertextLoop
